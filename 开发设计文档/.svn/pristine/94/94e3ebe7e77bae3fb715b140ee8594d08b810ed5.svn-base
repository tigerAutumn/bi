# 需求
## 背景
审计信息披露。现版本数据正确性不够，以及线上存在的查询效率急需优化。部分实时查询修改为定时。

## 内容
### 一、借款人逾期金额+借款人逾期笔数，统一口径调整
[查看原型](https://tower.im/projects/3d05349e05b2474dbd3198d04ac77804/todos/d5fed374befb4b348d3641211ebb4bff/)    
#### 问题点
目前只统计了赞分期和赞时贷的逾期数据，缺少云贷和七贷  
#### 修改点
1. 赞时贷、云贷、七贷统计最后一期逾期金额，借款协议利率计算，本+息
2. 赞分期、赞时贷、云贷、七贷均为最后一期逾期为一笔逾期
#### 设计
1. 每月定时，存入redis（最下面查看数据格式）
2. 从redis查询数据


### 二、平台数据，累计代偿金额，统计口径调整
[查看原型](https://tower.im/projects/3d05349e05b2474dbd3198d04ac77804/todos/8df2a0f4112b4b6fadc0a63797101c72/)
#### 问题点
目前统计的是赞分期（借款人）账单处于逾期和逾期已还的代偿本金+代偿利息，云贷和赞时贷统计的是代偿通知明细中的代偿本金+代偿利息，七贷是通知明细的代偿总金额  
#### 修改点
1. 云贷存管+七贷存管+赞时贷最后一期代偿到恒丰的金额（本+息）
2. 赞分期存管后每期被代偿的金额（本+息），存管前的代偿不统计
#### 设计
1. 每月定时，存入redis（最下面查看数据格式）
2. 从redis查询数据


### 三、平台数据页面统计时间优化
[查看原型](https://tower.im/projects/3d05349e05b2474dbd3198d04ac77804/todos/26d9f8e29eec44f08b89ed75f3be3c9a/)
#### 修改点
1. 新增平台运营概况（直接取后台跑定时的时间）
2. 成交及出借数据统计（直接取后台跑定时的时间）
3. 用户数据统计（直接取后台跑定时的时间）
4. 逾期及代偿数据统计（直接取后台跑定时的时间）
#### 设计
1. 从redis查询数据
2. 查询方式修改。从原本的每条数据发起一次ajax请求改成访问链接就查询定时跑批出来的数据。


### 四、平台数据，累计成交额要与柱形图数据保持一致
[查看原型](https://tower.im/projects/3d05349e05b2474dbd3198d04ac77804/todos/cc1b89c92970404c9fff391ccdcac25c/)
#### 修改点
目前成交额统计的是产品金额，柱形图统计的是用户成交金额，以用户成交金额为准
#### 设计
从bs_product的查数据修改为从bs_sub_account表中查询

### 五、平台数据，文案修改
[查看原型](https://tower.im/projects/3d05349e05b2474dbd3198d04ac77804/todos/c9fb9557f39b4cdaac10bdb43302015c/)
#### 修改点
1. 项目逾期率，改为：出借人项目逾期率
2. 金额逾期率，改为：出借人金额逾期率
#### 设计
前端修改

## 表设计
> 当前表设计不建表，只是单纯的redis json数据格式

### json数据格式

		// 1. 平台运营概况
		platformOverview {
			operatingDays		Integer 	// 合规运营天数
			totalBuyAmount	Double	// 累计成交额
			totalLoanAmount	Double	// 累计出借额
			totalIncomeAmount	Double	// 累计收益金额
			createTime			Date
		}

		// 2. 成交及出借数据统计
		transactionLendDataStatistics {
			// 每月平台累计成交额
			monthPlatformBuyAmount []	// 保存12条数据，按1月到12月的顺序存储对应累计成交额

			// 各个期限计划成交概况，按照期限正序存储对应成交额
			eachTermProductBuyOverview [
				{name:'短期计划' , amount: 100},
				{name:'中期计划' , amount: 1000},
				{name:'长期计划' , amount: 10000}
			]

			// 收益概况
			IntegererestOverview {
				totalIntegererestAmount	Double 	// 已赚取收益
				investIntegererestWill	Double	// 待赚取收益
			}
			// 出借数据 
			loanData {
				totalLoanAmount		Double	// 自成立以来累计借贷金额（元） 同累计出借额
				totalLoanNumber		Double	// 自成立以来累计借贷笔数
				currentWaitRepayAmount		Double	// 当前待还借贷金额（元）
				currentWaitRepayNumber		Double	// 当前待还借贷笔数
				relationBorrowerAmount		Double	// 关联关系借款余额（元）
				relationBorrowerNumber			Double	// 关联关系借款余额笔数
			}

			createTime			Date
		}

		// 3. 用户数据统计
		userData {
			// 出借人借款数据统计
			lenderData	{
				totalNumber				Integer			// 累计出借/借款人数
				currentNumber				Integer 		// 当期出借/借款人数
				eachTotalAmount			Double		// 人均累计出借/借款金额	
				topTenAmtProportion		Double		// 前十大出借人出借/借款人借款金额占比%
				topAmtProportion 			Double 		// 最大单一出借人出借/借款人借款余额占比%
			}

			// 借款人借款数据统计
			borrowerData {
				totalNumber				Integer			// 累计出借/借款人数
				currentNumber				Integer 		// 当期出借/借款人数
				eachTotalAmount			Double		// 人均累计出借/借款金额	
				topTenAmtProportion		Double		// 前十大出借人出借/借款人借款金额占比%
				topAmtProportion 			Double 		// 最大单一出借人出借/借款人借款余额占比%
			}

			// 年龄分布
			ageOrGenderProportion {
				youngLenderProportion		Double 	// 18-28岁出借人年龄分布占比%
				youngInvestorTypeNumber		Integer // 18-28岁出借人年龄人数
				middleLenderProportion		Double 	// 29-38岁出借人年龄分布占比%
				middleInvestorTypeNumber	Integer // 29-38岁出借人年龄人数
				fortyAgeLenderProportion		Double 	// 40-50岁出借人年龄分布占比%
				fortyAgeInvestorTypeNumber		Integer // 40-50岁出借人年龄人数
				oldLenderProportion		Double 	// 50岁出借人年龄分布占比%
				oldInvestorTypeNumber	Integer // 50岁出借人年龄人数
				maleLender		Double 	// 男性出借人占比%
				maleNumber		Integer // 男性出借人人数
				femaleLender	Double 	// 女性出借人占比%
				femaleNumber	Integer // 女性出借人人数
			}

			// 时间
			createTime 	Date
		}


		// 4. 逾期及代偿数据统计
		overdueInfo {
			projectOverdueRate			Double		// 出借人项目逾期率
			amtOverdueRate				Double		// 出借人金额逾期率
			overdueAmount					Double 		// 借款人逾期金额
			overdueNumber					Integer 		// 借款人逾期笔数
			overdueNinnetyDaysAmount		Double 		// 借款人逾期90天以上金额
			overdueNinnetyDaysNumber		Integer 		// 借款人逾期90天以上笔数
			totalCompensatoryAmount		Double 		// 累计代偿金额
			totalCompensatoryNumber		Integer 		// 累计代偿笔数
			createTime						Date
		}
		


## 备注
1. 定时类
2. 定时查询需要的相关sql
3. 插入查询出来的相关数据