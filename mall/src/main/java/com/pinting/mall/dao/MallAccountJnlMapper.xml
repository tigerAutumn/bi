<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pinting.mall.dao.MallAccountJnlMapper" >
  <resultMap id="BaseResultMap" type="com.pinting.mall.model.MallAccountJnl" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="rule_id" property="ruleId" jdbcType="INTEGER" />
    <result column="trans_type" property="transType" jdbcType="VARCHAR" />
    <result column="trans_name" property="transName" jdbcType="VARCHAR" />
    <result column="trans_time" property="transTime" jdbcType="TIMESTAMP" />
    <result column="points" property="points" jdbcType="BIGINT" />
    <result column="before_balance" property="beforeBalance" jdbcType="BIGINT" />
    <result column="after_balance" property="afterBalance" jdbcType="BIGINT" />
    <result column="before_avaliable_balance" property="beforeAvaliableBalance" jdbcType="BIGINT" />
    <result column="after_avaliable_balance" property="afterAvaliableBalance" jdbcType="BIGINT" />
    <result column="before_freeze_balance" property="beforeFreezeBalance" jdbcType="BIGINT" />
    <result column="after_freeze_balance" property="afterFreezeBalance" jdbcType="BIGINT" />
    <result column="note" property="note" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, account_id, rule_id, trans_type, trans_name, trans_time, points, before_balance, 
    after_balance, before_avaliable_balance, after_avaliable_balance, before_freeze_balance, 
    after_freeze_balance, note, create_time, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.pinting.mall.model.MallAccountJnlExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from mall_account_jnl
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from mall_account_jnl
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from mall_account_jnl
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.pinting.mall.model.MallAccountJnlExample" >
    delete from mall_account_jnl
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pinting.mall.model.MallAccountJnl" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into mall_account_jnl (id, user_id, account_id, 
      rule_id, trans_type, trans_name, 
      trans_time, points, before_balance, 
      after_balance, before_avaliable_balance, after_avaliable_balance, 
      before_freeze_balance, after_freeze_balance, 
      note, create_time, update_time
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{accountId,jdbcType=INTEGER}, 
      #{ruleId,jdbcType=INTEGER}, #{transType,jdbcType=VARCHAR}, #{transName,jdbcType=VARCHAR}, 
      #{transTime,jdbcType=TIMESTAMP}, #{points,jdbcType=BIGINT}, #{beforeBalance,jdbcType=BIGINT}, 
      #{afterBalance,jdbcType=BIGINT}, #{beforeAvaliableBalance,jdbcType=BIGINT}, #{afterAvaliableBalance,jdbcType=BIGINT}, 
      #{beforeFreezeBalance,jdbcType=BIGINT}, #{afterFreezeBalance,jdbcType=BIGINT}, 
      #{note,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.pinting.mall.model.MallAccountJnl" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into mall_account_jnl
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="ruleId != null" >
        rule_id,
      </if>
      <if test="transType != null" >
        trans_type,
      </if>
      <if test="transName != null" >
        trans_name,
      </if>
      <if test="transTime != null" >
        trans_time,
      </if>
      <if test="points != null" >
        points,
      </if>
      <if test="beforeBalance != null" >
        before_balance,
      </if>
      <if test="afterBalance != null" >
        after_balance,
      </if>
      <if test="beforeAvaliableBalance != null" >
        before_avaliable_balance,
      </if>
      <if test="afterAvaliableBalance != null" >
        after_avaliable_balance,
      </if>
      <if test="beforeFreezeBalance != null" >
        before_freeze_balance,
      </if>
      <if test="afterFreezeBalance != null" >
        after_freeze_balance,
      </if>
      <if test="note != null" >
        note,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="accountId != null" >
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="ruleId != null" >
        #{ruleId,jdbcType=INTEGER},
      </if>
      <if test="transType != null" >
        #{transType,jdbcType=VARCHAR},
      </if>
      <if test="transName != null" >
        #{transName,jdbcType=VARCHAR},
      </if>
      <if test="transTime != null" >
        #{transTime,jdbcType=TIMESTAMP},
      </if>
      <if test="points != null" >
        #{points,jdbcType=BIGINT},
      </if>
      <if test="beforeBalance != null" >
        #{beforeBalance,jdbcType=BIGINT},
      </if>
      <if test="afterBalance != null" >
        #{afterBalance,jdbcType=BIGINT},
      </if>
      <if test="beforeAvaliableBalance != null" >
        #{beforeAvaliableBalance,jdbcType=BIGINT},
      </if>
      <if test="afterAvaliableBalance != null" >
        #{afterAvaliableBalance,jdbcType=BIGINT},
      </if>
      <if test="beforeFreezeBalance != null" >
        #{beforeFreezeBalance,jdbcType=BIGINT},
      </if>
      <if test="afterFreezeBalance != null" >
        #{afterFreezeBalance,jdbcType=BIGINT},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pinting.mall.model.MallAccountJnlExample" resultType="java.lang.Integer" >
    select count(*) from mall_account_jnl
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update mall_account_jnl
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.accountId != null" >
        account_id = #{record.accountId,jdbcType=INTEGER},
      </if>
      <if test="record.ruleId != null" >
        rule_id = #{record.ruleId,jdbcType=INTEGER},
      </if>
      <if test="record.transType != null" >
        trans_type = #{record.transType,jdbcType=VARCHAR},
      </if>
      <if test="record.transName != null" >
        trans_name = #{record.transName,jdbcType=VARCHAR},
      </if>
      <if test="record.transTime != null" >
        trans_time = #{record.transTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.points != null" >
        points = #{record.points,jdbcType=BIGINT},
      </if>
      <if test="record.beforeBalance != null" >
        before_balance = #{record.beforeBalance,jdbcType=BIGINT},
      </if>
      <if test="record.afterBalance != null" >
        after_balance = #{record.afterBalance,jdbcType=BIGINT},
      </if>
      <if test="record.beforeAvaliableBalance != null" >
        before_avaliable_balance = #{record.beforeAvaliableBalance,jdbcType=BIGINT},
      </if>
      <if test="record.afterAvaliableBalance != null" >
        after_avaliable_balance = #{record.afterAvaliableBalance,jdbcType=BIGINT},
      </if>
      <if test="record.beforeFreezeBalance != null" >
        before_freeze_balance = #{record.beforeFreezeBalance,jdbcType=BIGINT},
      </if>
      <if test="record.afterFreezeBalance != null" >
        after_freeze_balance = #{record.afterFreezeBalance,jdbcType=BIGINT},
      </if>
      <if test="record.note != null" >
        note = #{record.note,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update mall_account_jnl
    set id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      account_id = #{record.accountId,jdbcType=INTEGER},
      rule_id = #{record.ruleId,jdbcType=INTEGER},
      trans_type = #{record.transType,jdbcType=VARCHAR},
      trans_name = #{record.transName,jdbcType=VARCHAR},
      trans_time = #{record.transTime,jdbcType=TIMESTAMP},
      points = #{record.points,jdbcType=BIGINT},
      before_balance = #{record.beforeBalance,jdbcType=BIGINT},
      after_balance = #{record.afterBalance,jdbcType=BIGINT},
      before_avaliable_balance = #{record.beforeAvaliableBalance,jdbcType=BIGINT},
      after_avaliable_balance = #{record.afterAvaliableBalance,jdbcType=BIGINT},
      before_freeze_balance = #{record.beforeFreezeBalance,jdbcType=BIGINT},
      after_freeze_balance = #{record.afterFreezeBalance,jdbcType=BIGINT},
      note = #{record.note,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pinting.mall.model.MallAccountJnl" >
    update mall_account_jnl
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="accountId != null" >
        account_id = #{accountId,jdbcType=INTEGER},
      </if>
      <if test="ruleId != null" >
        rule_id = #{ruleId,jdbcType=INTEGER},
      </if>
      <if test="transType != null" >
        trans_type = #{transType,jdbcType=VARCHAR},
      </if>
      <if test="transName != null" >
        trans_name = #{transName,jdbcType=VARCHAR},
      </if>
      <if test="transTime != null" >
        trans_time = #{transTime,jdbcType=TIMESTAMP},
      </if>
      <if test="points != null" >
        points = #{points,jdbcType=BIGINT},
      </if>
      <if test="beforeBalance != null" >
        before_balance = #{beforeBalance,jdbcType=BIGINT},
      </if>
      <if test="afterBalance != null" >
        after_balance = #{afterBalance,jdbcType=BIGINT},
      </if>
      <if test="beforeAvaliableBalance != null" >
        before_avaliable_balance = #{beforeAvaliableBalance,jdbcType=BIGINT},
      </if>
      <if test="afterAvaliableBalance != null" >
        after_avaliable_balance = #{afterAvaliableBalance,jdbcType=BIGINT},
      </if>
      <if test="beforeFreezeBalance != null" >
        before_freeze_balance = #{beforeFreezeBalance,jdbcType=BIGINT},
      </if>
      <if test="afterFreezeBalance != null" >
        after_freeze_balance = #{afterFreezeBalance,jdbcType=BIGINT},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pinting.mall.model.MallAccountJnl" >
    update mall_account_jnl
    set user_id = #{userId,jdbcType=INTEGER},
      account_id = #{accountId,jdbcType=INTEGER},
      rule_id = #{ruleId,jdbcType=INTEGER},
      trans_type = #{transType,jdbcType=VARCHAR},
      trans_name = #{transName,jdbcType=VARCHAR},
      trans_time = #{transTime,jdbcType=TIMESTAMP},
      points = #{points,jdbcType=BIGINT},
      before_balance = #{beforeBalance,jdbcType=BIGINT},
      after_balance = #{afterBalance,jdbcType=BIGINT},
      before_avaliable_balance = #{beforeAvaliableBalance,jdbcType=BIGINT},
      after_avaliable_balance = #{afterAvaliableBalance,jdbcType=BIGINT},
      before_freeze_balance = #{beforeFreezeBalance,jdbcType=BIGINT},
      after_freeze_balance = #{afterFreezeBalance,jdbcType=BIGINT},
      note = #{note,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  
  <select id="selectUserPointsRecord" resultMap="BaseResultMap" parameterType="java.util.Map">
  	select b.trans_name,b.trans_time,b.points,b.before_balance,b.after_balance
	from (
		select id from mall_account where user_id = #{userId} and account_type='POINTS_JSH'
	) a,mall_account_jnl b
	where a.id = b.account_id and b.user_id = #{userId} and b.points != 0
	and b.trans_type != 'OPEN_ACCOUNT' ORDER BY trans_time desc limit #{start},#{NumPerPage}
  </select>
  
  <select id="countUserPointsRecord" resultType="java.lang.Integer" parameterType="java.util.Map">
  	select count(b.id)
	from (
		select id from mall_account where user_id = #{userId} and account_type='POINTS_JSH'
	) a,mall_account_jnl b
	where a.id = b.account_id and b.user_id = #{userId} and b.points != 0
	and b.trans_type != 'OPEN_ACCOUNT' ORDER BY trans_time desc
  </select>

  <select id="selectMallUserPointsList" resultType="com.pinting.mall.model.vo.MallAccountJnlVO" parameterType="com.pinting.mall.model.vo.MallAccountJnlVO" >
    SELECT
      a.id, b.mobile, a.trans_time, a.trans_type, a.points
    FROM mall_account_jnl a, bs_user b
    <where>
      a.user_id = b.id
      <if test="strMobile != null and strMobile != '' ">
        AND b.mobile like concat(concat('%', #{strMobile,jdbcType=VARCHAR}),'%')
      </if>
      <if test="startTransTime != null and startTransTime != '' ">
        AND a.trans_time >= #{startTransTime}
      </if>
      <if test="endTransTime != null and endTransTime != '' ">
        AND a.trans_time &lt;= #{endTransTime}
      </if>
      <if test="transType != null and transType != '888' ">
        AND a.trans_type = #{transType}
      </if>
      <if test="pointsType != null and pointsType != '999' and pointsType == 'INCOME' ">
        AND a.trans_type IN ('REGISTER', 'OPEN_DEPOSIT', 'FINISH_RISK_ASSESSMENT', 'FIRST_INVEST', 'INVEST', 'TOTAL_INVEST', 'SIGN', 'BIRTHDAY')
      </if>
      <if test="pointsType != null and pointsType != '999' and pointsType == 'POINTSEXCHANGE' ">
        AND a.trans_type = 'EXCHANGE'
      </if>
    </where>
    ORDER BY a.update_time DESC
  </select>

  <select id="selectMallUserPointsCount" resultType="java.lang.Integer" parameterType="com.pinting.mall.model.vo.MallAccountJnlVO" >
    SELECT COUNT(a.id)
    FROM mall_account_jnl a, bs_user b
    <where>
      a.user_id = b.id
      <if test="strMobile != null and strMobile != '' ">
        AND b.mobile like concat(concat('%', #{strMobile,jdbcType=VARCHAR}),'%')
      </if>
      <if test="startTransTime != null and startTransTime != '' ">
        AND a.trans_time >= #{startTransTime}
      </if>
      <if test="endTransTime != null and endTransTime != '' ">
        AND a.trans_time &lt;= #{endTransTime}
      </if>
      <if test="transType != null and transType != '888' ">
        AND a.trans_type = #{transType}
      </if>
      <if test="pointsType != null and pointsType != '999' and pointsType == 'INCOME' ">
        AND a.trans_type IN ('REGISTER', 'OPEN_DEPOSIT', 'FINISH_RISK_ASSESSMENT', 'FIRST_INVEST', 'INVEST', 'TOTAL_INVEST', 'SIGN')
      </if>
      <if test="pointsType != null and pointsType != '999' and pointsType == 'POINTSEXCHANGE' ">
        AND a.trans_type = 'EXCHANGE'
      </if>
    </where>
  </select>

  <select id="selectMallUserPointsSum" resultType="java.lang.Double" parameterType="com.pinting.mall.model.vo.MallAccountJnlVO" >
    SELECT ABS(IFNULL(SUM(IFNULL(points, 0)),0))
    FROM mall_account_jnl a, bs_user b
    <where>
      a.user_id = b.id
      <if test="strMobile != null and strMobile != '' ">
        AND b.mobile like concat(concat('%', #{strMobile,jdbcType=VARCHAR}),'%') AND a.trans_type = 'EXCHANGE'
      </if>
      <if test="startTransTime != null and startTransTime != '' ">
        AND a.trans_time >= #{startTransTime}
      </if>
      <if test="endTransTime != null and endTransTime != '' ">
        AND a.trans_time &lt;= #{endTransTime} AND a.trans_type = 'EXCHANGE'
      </if>
      <if test="transType != null and transType == '888' ">
        AND a.trans_type = 'EXCHANGE'
      </if>
      <if test="transType != null and transType == 'EXCHANGE' ">
        AND a.trans_type = 'EXCHANGE'
      </if>
      <if test="pointsType != null and pointsType == '999' ">
        AND a.trans_type = 'EXCHANGE'
      </if>
      <if test="pointsType != null and pointsType == 'POINTSEXCHANGE' ">
        AND a.trans_type = 'EXCHANGE'
      </if>
    </where>
  </select>

</mapper>