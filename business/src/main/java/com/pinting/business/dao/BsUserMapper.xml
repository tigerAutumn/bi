<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pinting.business.dao.BsUserMapper">
	<resultMap id="BaseResultMap" type="com.pinting.business.model.BsUser">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="nick" property="nick" jdbcType="VARCHAR" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="urgent_name" property="urgentName" jdbcType="VARCHAR" />
		<result column="urgent_mobile" property="urgentMobile" jdbcType="VARCHAR" />
		<result column="relation" property="relation" jdbcType="INTEGER" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="pay_password" property="payPassword" jdbcType="VARCHAR" />
		<result column="login_time" property="loginTime" jdbcType="TIMESTAMP" />
		<result column="logout_time" property="logoutTime" jdbcType="TIMESTAMP" />
		<result column="login_fail_times" property="loginFailTimes" jdbcType="INTEGER" />
		<result column="login_fail_time" property="loginFailTime" jdbcType="TIMESTAMP" />
		<result column="login_always_fail_times" jdbcType="INTEGER" property="loginAlwaysFailTimes" />
    	<result column="login_lock_time" jdbcType="TIMESTAMP" property="loginLockTime" />
		<result column="pay_fail_times" property="payFailTimes" jdbcType="INTEGER" />
		<result column="pay_fail_time" property="payFailTime" jdbcType="TIMESTAMP" />
		<result column="id_card" property="idCard" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="INTEGER" />
		<result column="is_bind_name" property="isBindName" jdbcType="INTEGER" />
		<result column="is_bind_bank" property="isBindBank" jdbcType="INTEGER" />
		<result column="current_interest" property="currentInterest" jdbcType="DOUBLE" />
		<result column="current_bonus" property="currentBonus" jdbcType="DOUBLE" />
		<result column="total_interest" property="totalInterest" jdbcType="DOUBLE" />
		<result column="total_bonus" property="totalBonus" jdbcType="DOUBLE" />
		<result column="can_withdraw" property="canWithdraw" jdbcType="DOUBLE" />
		<result column="total_trans" property="totalTrans" jdbcType="INTEGER" />
		<result column="recommend_id" property="recommendId" jdbcType="INTEGER" />
		<result column="create_channel" property="createChannel" jdbcType="INTEGER" />
		<result column="user_type" property="userType" jdbcType="VARCHAR" />
		<result column="agent_id" property="agentId" jdbcType="INTEGER" />
		<result column="register_time" property="registerTime" jdbcType="TIMESTAMP" />
		<result column="reg_terminal" property="regTerminal" jdbcType="INTEGER" />
		<result column="first_buy_time" property="firstBuyTime" jdbcType="TIMESTAMP" />
		<result column="return_path" property="returnPath" jdbcType="INTEGER" />
		<result column="recent_bank_card_id" property="recentBankCardId" jdbcType="INTEGER" />
		<result column="last_app_version" property="lastAppVersion" jdbcType="VARCHAR" />
		<result column="last_app_time" property="lastAppTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<resultMap id="VoResultMap" type="com.pinting.business.model.vo.BsUserVO" extends="BaseResultMap">
		<result column="bank_card" property="bankCard" jdbcType="VARCHAR" />
		<result column="agent_name" property="agentName" jdbcType="VARCHAR" />
		<result column="dafy_user_id" property="dafyUserId" jdbcType="VARCHAR" />
		<result column="recommend_count" property="recommendCount" jdbcType="INTEGER" />
	</resultMap>
	<resultMap id="BaseVoResultMap" type="com.pinting.business.model.vo.BsBaseUserVO" extends="BaseResultMap">
		<result column="agent_name" property="agentName" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="UserOperateVoMap" type="com.pinting.business.model.vo.MUserOperateVO" extends="BaseResultMap">
		<result column="index" property="index" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="bank_name" property="bankName" jdbcType="VARCHAR" />
		<result column="invest_money" property="investMoney" jdbcType="DOUBLE" />
		<result column="invest_total_money" property="investTotalMoney" jdbcType="DOUBLE" />
		<result column="buy_times" property="buyTimes" jdbcType="INTEGER" />
		<result column="last_buy_time" property="lastBuyTime" jdbcType="TIMESTAMP" />
		<result column="agent_name" property="agentName" jdbcType="VARCHAR" />
	</resultMap>

	<!-- 希财用户统计 -->
	<resultMap type="com.pinting.business.model.vo.UserInfoXiCaiVO" id="BaseResultMapUser" extends="BaseResultMap">
		<result column="ip" property="ip" jdbcType="VARCHAR" />
		<result column="qq" property="qq" jdbcType="VARCHAR" />
		<result column="total_money" property="totalmoney" jdbcType="DOUBLE" />
	</resultMap>

	<!-- 希财投资统计 -->
	<resultMap type="com.pinting.business.model.vo.InvestInfoXiCaiVO" id="BaseResultMapData" extends="BaseResultMap">
		<result column="subId" property="subId" jdbcType="INTEGER" />
		<result column="pid" property="pid" jdbcType="INTEGER" />
		<result column="product_rate" property="productRate" jdbcType="DOUBLE" />
		<result column="term" property="term" jdbcType="INTEGER" />
		<result column="money" property="money" jdbcType="DOUBLE" />
		<result column="open_time" property="openTime" jdbcType="TIMESTAMP" />
	</resultMap>

	<!-- 用户利息回款查询 -->
	<resultMap id="InterestRepaymentMap" type="com.pinting.business.model.vo.InterestRepaymentVO" extends="BaseResultMap">
		<result column="open_time" property="openTime" jdbcType="TIMESTAMP" />
		<result column="product_name" property="productName" jdbcType="VARCHAR" />
		<result column="balance" property="balance" jdbcType="DOUBLE" />
		<result column="product_rate" property="productRate" jdbcType="DOUBLE" />
		<result column="term" property="term" jdbcType="INTEGER" />
		<result column="last_finish_interest_date" property="lastfinishInterestDate" jdbcType="TIMESTAMP" />
		<result column="account_status" property="accountStatus" jdbcType="INTEGER" />
		<result column="property_symbol" property="propertySymbol" jdbcType="VARCHAR" />
		<result column="interest" property="interest" jdbcType="DOUBLE" />
	</resultMap>

	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, nick, user_name, mobile, urgent_name, urgent_mobile, relation, email, password,
		pay_password, login_time, logout_time, login_fail_times, login_fail_time,  login_always_fail_times, 
		login_lock_time, pay_fail_times,
		pay_fail_time, id_card, status, is_bind_name, is_bind_bank, current_interest, current_bonus,
		total_interest, total_bonus, can_withdraw, total_trans, recommend_id, create_channel,
		user_type, agent_id, register_time, reg_terminal, first_buy_time, return_path, recent_bank_card_id,
		last_app_version, last_app_time
	</sql>

	<!-- - 查询所有用户 - @auth yanwl - @date 2015-11-11 -->
    <!-- - 修改优化 - @auth zousheng - @date 2018-04-10 -->
	<select id="selectAllUser" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultMap="BsUserAssetResultMap">
        select tab.* FROM (
        SELECT
        c.id,c.mobile,c.user_name,c.id_card,c.total_interest,c.total_bonus,c.register_time,c.first_buy_time,c.current_interest,c.recommend_id,c.status,
        bank.card_no cardNo,
        bank.bank_name bankName,
        bank.status bankStatus,
        c.agent_id,
        ba.agent_name as agentName,
        (YEAR (curdate())-IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) =
        15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) as age,
        (
        case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
        if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
        when 1 then '男' when 0 then '女' else '' end
        ) as gender,
        (select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa where bsa.product_type in('REG','AUTH','AUTH_YUN','RED') and bsa.account_id =
        a.id) as totalPrincipal,
        (select IFNULL(sum(bsa1.open_balance),0) from bs_sub_account bsa1 where ((bsa1.status=1 and bsa1.product_type =
        'JSH') or ((bsa1.status=2 or bsa1.status=7) and bsa1.product_type in('REG','AUTH','AUTH_YUN','RED'))) and bsa1.account_id = a.id ) as
        totalBalance,
        (select IFNULL(sum(bsa1.open_balance),0) from bs_sub_account bsa1 where bsa1.status=1 and bsa1.product_type ='JSH' and bsa1.account_id = a.id )
        +(select IFNULL(sum(bsa1.open_balance),0) from bs_sub_account bsa1 where (bsa1.status=2 or bsa1.status=7) and bsa1.product_type in('REG','AUTH','AUTH_YUN','RED') and bsa1.account_id = a.id )
        +IFNULL(c.current_interest,0)+IFNULL(c.current_bonus,0) as sumBalance,
        (select IFNULL(sum(bsa2.open_balance),0) from bs_sub_account bsa2 where (bsa2.status=2 or bsa2.status=7) and
        bsa2.product_type in('REG','AUTH','AUTH_YUN','RED') AND bsa2.account_id = a.id ) as currentBalance,
        (select IFNULL(sum(bsa3.balance),0) from bs_sub_account bsa3 where bsa3.status=1 and bsa3.product_type = 'JSH'
        AND bsa3.account_id = a.id) as account_balance,
        pp.user_name as recommendName,pp.mobile as recommendMobile,
        s.sales_name saleName, e.strName managerName, f.score,
        case when f.score &lt;= 20 then '保守型'
        when f.score &gt; 20 and f.score &lt;= 45 then '稳健型'
        when f.score &gt; 45 and f.score &lt;= 70 then '平衡型'
        when f.score &gt; 70 and f.score &lt;= 85 then '进取型'
        when f.score &gt; 85 then '激进型' end as questionnaireResult
        from
        bs_account a ,bs_sub_account p , bs_user c LEFT JOIN bs_user pp on pp.id = c.recommend_id
        LEFT JOIN bs_user_sales us ON c.id=us.user_id
        LEFT JOIN bs_sales s ON s.id=us.sales_id
        LEFT JOIN bs_user_customer_manager cm ON cm.user_id=c.id
        LEFT JOIN tbemployee e ON e.lUserId =cm.customer_manager_dafy_id
        LEFT JOIN bs_questionnaire f ON c.id=f.user_id
        <!-- 过滤bs_bank_card中的数据,保留bind_time离系统时间最近的一条记录  -->
        left JOIN bs_bank_card AS bank on c.id = bank.user_id
        and exists
        (select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time DESC) aa group by user_id) test where test.id = bank.id)
        LEFT JOIN bs_agent ba on ba.id=c.agent_id
        where p.account_id = a.id AND p.product_type='JSH' and c.id=a.user_id
        <if test="sName!=null">
            and c.user_name like concat(concat('%', #{sName,jdbcType=VARCHAR}),'%')
        </if>
        <if test="idCard !=null and idCard !='' ">
            and c.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
        </if>
        <if test="sBankCard !=null and sBankCard !='' ">
            and bank.card_no like concat(concat('%', #{sBankCard,jdbcType=VARCHAR}),'%')
        </if>
        <if test="sReward !=null and sReward !='' ">
            and c.total_bonus &gt;= #{sReward}
        </if>
        <if test="eReward !=null and eReward !='' ">
            and c.total_bonus &lt;= #{eReward}
        </if>
        <if test="sRegisterTime !=null">
            and c.register_time &gt;= #{sRegisterTime}
        </if>
        <if test="eRegisterTime !=null ">
            and c.register_time &lt;= DATE_FORMAT(#{eRegisterTime},'%Y-%m-%d 23:59:59')
        </if>
        <if test="sFirstBuyTime !=null">
            and c.first_buy_time &gt;= #{sFirstBuyTime}
        </if>
        <if test="eFirstBuyTime !=null">
            and c.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
        </if>
        <if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
            and c.agent_id in
            <foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
                #{agentId}
            </foreach>
        </if>
        <if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
            and c.agent_id is null
        </if>
        <if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
            and (c.agent_id in
            <foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
                #{agentId}
            </foreach>
            or c.agent_id is null)
        </if>
        <if test="bankStatus != null and bankStatus > 0 ">
            and bank.status = #{bankStatus}
        </if>
        <if test="bankStatus != null and bankStatus == 0 ">
            and bank.status is null
        </if>
        <if test="bankName !=null and bankName != ''">
            and bank.bank_name like concat(concat('%', #{bankName,jdbcType=VARCHAR}),'%')
        </if>
        <if test="recommendId !=null and recommendId != ''">
            and c.recommend_id = #{recommendId}
        </if>
        <if test="mobile !=null and mobile !='' ">
            and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
        </if>
        <if test="id !=null and id !='' ">
            and c.id = #{id}
        </if>
        <if test="status != null and status > 0 ">
            and c.status = #{status}
        </if>
        <if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='noEvaluation'">
            and f.score is null
        </if>
        <if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='conservative'">
            and f.score between 0 and 20
        </if>
        <if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='steady'">
            and f.score between 21 and 45
        </if>
        <if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='balanced'">
            and f.score between 46 and 70
        </if>
        <if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='aggressive'">
            and f.score between 71 and 85
        </if>
        <if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='radical'">
            and f.score between 86 and 100
        </if>
        <if test="age !=null and age != ''">
            and (YEAR (curdate()) - IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) = 15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) = #{age}
        </if>
        <if test="gender !=null and gender != ''">
            and (
            case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
            if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
            when 1 then '男' when 0 then '女' else '' end
            ) = #{gender}
        </if>
		<if test="regTerminal !=null and regTerminal != ''">
			and c.reg_terminal = #{regTerminal}
		</if>
        ) tab
        WHERE 1=1
        <if test="sSumBalance !=null and sSumBalance !='' ">
            and tab.sumBalance &gt;= #{sSumBalance}
        </if>
        <if test="eSumBalance !=null and eSumBalance !='' ">
            and tab.sumBalance &lt;= #{eSumBalance}
        </if>
        <if test="sBalance !=null and sBalance !='' ">
            and tab.totalBalance &gt;= #{sBalance}
        </if>
        <if test="eBalance !=null and eBalance !='' ">
            and tab.totalBalance &lt;= #{eBalance}
        </if>
        <if test="sTotalPrincipal !=null and sTotalPrincipal !='' ">
            and tab.totalPrincipal &gt;= #{sTotalPrincipal}
        </if>
        <if test="eTotalPrincipal !=null and eTotalPrincipal !='' ">
            and tab.totalPrincipal &lt;= #{eTotalPrincipal}
        </if>
        order by
        <if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
            ${orderField} ${orderDirection},
        </if>
        tab.register_time desc,tab.id desc
        <include refid="sql-global.pagination" />
	</select>

	<select id="countAllUserCount" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer">
		select count(tab.id) FROM (
		SELECT
		c.id,c.mobile,c.user_name,c.id_card,c.total_interest,c.total_bonus,c.register_time,c.first_buy_time,c.current_interest,c.recommend_id,
		bank.card_no cardNo,
		bank.bank_name bankName,
		bank.status bankStatus,
		c.agent_id,
		ba.agent_name as agentName,
		(YEAR (curdate())-IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) =
		15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) as age,
		(
		case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
		if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
		when 1 then '男' when 0 then '女' else '' end
		) as gender,
		(select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa where bsa.product_type in('REG','AUTH','AUTH_YUN','RED') and bsa.account_id =
		a.id) as totalPrincipal,
		(select IFNULL(sum(bsa1.open_balance),0) from bs_sub_account bsa1 where ((bsa1.status=1 and bsa1.product_type =
		'JSH') or ((bsa1.status=2 or bsa1.status=7) and bsa1.product_type in('REG','AUTH','AUTH_YUN','RED'))) and bsa1.account_id = a.id ) as
		totalBalance,
		(select IFNULL(sum(bsa1.open_balance),0) from bs_sub_account bsa1 where bsa1.status=1 and bsa1.product_type ='JSH' and bsa1.account_id = a.id )
		+(select IFNULL(sum(bsa1.open_balance),0) from bs_sub_account bsa1 where (bsa1.status=2 or bsa1.status=7) and bsa1.product_type in('REG','AUTH','AUTH_YUN','RED') and bsa1.account_id = a.id )
		+IFNULL(c.current_interest,0)+IFNULL(c.current_bonus,0) as sumBalance,
		(select IFNULL(sum(bsa2.open_balance),0) from bs_sub_account bsa2 where (bsa2.status=2 or bsa2.status=7) and
		bsa2.product_type in('REG','AUTH','AUTH_YUN','RED') AND bsa2.account_id = a.id ) as currentBalance,
		(select IFNULL(sum(bsa3.balance),0) from bs_sub_account bsa3 where bsa3.status=1 and bsa3.product_type = 'JSH'
		AND bsa3.account_id = a.id) as account_balance,
		pp.user_name as recommendName,pp.mobile as recommendMobile,
		s.sales_name saleName, e.strName managerName, f.score
		FROM
		bs_account a ,bs_sub_account p , bs_user c LEFT JOIN bs_user pp on pp.id = c.recommend_id
		LEFT JOIN bs_user_sales us ON c.id=us.user_id
		LEFT JOIN bs_sales s ON s.id=us.sales_id
		LEFT JOIN bs_user_customer_manager cm ON cm.user_id=c.id
		LEFT JOIN tbemployee e ON e.lUserId =cm.customer_manager_dafy_id
		LEFT JOIN bs_questionnaire f ON c.id=f.user_id
		<!-- 过滤bs_bank_card中的数据,保留bind_time离系统时间最近的一条记录  -->
		left JOIN bs_bank_card AS bank on c.id = bank.user_id
		and exists
		(select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time DESC) aa group by user_id) test where test.id = bank.id)
		LEFT JOIN bs_agent ba on ba.id=c.agent_id
		where p.account_id = a.id AND p.product_type='JSH' and c.id=a.user_id
		<if test="sName!=null">
			and c.user_name like concat(concat('%', #{sName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard !=null and idCard !='' ">
			and c.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="sBankCard !=null and sBankCard !='' ">
			and bank.card_no like concat(concat('%', #{sBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="sReward !=null and sReward !='' ">
			and c.total_bonus &gt;= #{sReward}
		</if>
		<if test="eReward !=null and eReward !='' ">
			and c.total_bonus &lt;= #{eReward}
		</if>
		<if test="sRegisterTime !=null">
			and c.register_time &gt;= #{sRegisterTime}
		</if>
		<if test="eRegisterTime !=null ">
			and c.register_time &lt;= DATE_FORMAT(#{eRegisterTime},'%Y-%m-%d 23:59:59')
		</if>
		<if test="sFirstBuyTime !=null">
			and c.first_buy_time &gt;= #{sFirstBuyTime}
		</if>
		<if test="eFirstBuyTime !=null">
			and c.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
		</if>
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and c.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and c.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (c.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or c.agent_id is null)
		</if>
		<if test="bankStatus != null and bankStatus > 0 ">
			and bank.status = #{bankStatus}
		</if>
		<if test="bankStatus != null and bankStatus == 0 ">
			and bank.status is null
		</if>
		<if test="status != null and status > 0 ">
            and c.status = #{status}
        </if>
		<if test="bankName !=null and bankName != ''">
			and bank.bank_name like concat(concat('%', #{bankName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="recommendId !=null and recommendId != ''">
			and c.recommend_id = #{recommendId}
		</if>
		<if test="mobile !=null and mobile !='' ">
			and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="id !=null and id !='' ">
			and c.id = #{id}
		</if>
		<if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='noEvaluation'">
			and f.score is null
		</if>
		<if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='conservative'">
			and f.score between 0 and 20
		</if>
		<if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='steady'">
			and f.score between 21 and 45
		</if>
		<if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='balanced'">
			and f.score between 46 and 70
		</if>
		<if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='aggressive'">
			and f.score between 71 and 85
		</if>
		<if test="questionnaireResult != null and questionnaireResult != '' and questionnaireResult=='radical'">
			and f.score between 86 and 100
		</if>
		<if test="age !=null and age != ''">
			and (YEAR (curdate()) - IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) = 15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) = #{age}
		</if>
		<if test="gender !=null and gender != ''">
			and (
			case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
			if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
			when 1 then '男' when 0 then '女' else '' end
			) = #{gender}
		</if>
		<if test="regTerminal !=null and regTerminal != ''">
			and c.reg_terminal = #{regTerminal}
		</if>
		) tab
		WHERE 1=1
		<if test="sSumBalance !=null and sSumBalance !='' ">
			and tab.sumBalance &gt;= #{sSumBalance}
		</if>
		<if test="eSumBalance !=null and eSumBalance !='' ">
			and tab.sumBalance &lt;= #{eSumBalance}
		</if>
		<if test="sBalance !=null and sBalance !='' ">
			and tab.totalBalance &gt;= #{sBalance}
		</if>
		<if test="eBalance !=null and eBalance !='' ">
			and tab.totalBalance &lt;= #{eBalance}
		</if>
		<if test="sTotalPrincipal !=null and sTotalPrincipal !='' ">
			and tab.totalPrincipal &gt;= #{sTotalPrincipal}
		</if>
		<if test="eTotalPrincipal !=null and eTotalPrincipal !='' ">
			and tab.totalPrincipal &lt;= #{eTotalPrincipal}
		</if>
	</select>

	<!-- 用户综合查询 -->
	<select id="selectUserComplex" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultMap="BsUserAssetResultMap">
		SELECT ceshi.id, ceshi.mobile, ceshi.user_name, ceshi.id_card, ceshi.total_interest, ceshi.total_bonus,
		ceshi.register_time, ceshi.first_buy_time, ceshi.is_bind_bank, ceshi.is_bind_name, ceshi.status,
		ceshi.current_interest, bank.card_no cardNo, bank.bank_name bankName, bank.status bankStatus, ceshi.user_name
		cardOwner, ceshi.account_Id AS account_Id, ba.agent_name AS agentName, ceshi.balance balance, ceshi.availableBalance,
		ee.annualized_investment, bsa5.total_balance, mi3.stock_assets, mi3.recent_buyTime, mi2.investment_times,
		ceshi.account_balance, mi2.three_investment_times
		FROM (
		SELECT
		c.id,c.mobile,c.user_name,c.id_card,c.total_interest,c.total_bonus,c.register_time,c.first_buy_time,c.is_bind_bank,c.is_bind_name,c.status,c.`agent_id`,c.current_interest,c.user_name
		cardOwner,a.id AS account_Id,p.balance balance,p.available_balance availableBalance, IF( p.status = 1,
		IFNULL(SUM(p.balance), 0), 0) AS account_balance
		FROM bs_account a, bs_sub_account p, bs_user c
		WHERE c.id = a.user_id AND p.account_id = a.id AND p.product_type  in ('JSH', 'DEP_JSH')
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			AND c.agent_id IN
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			AND c.agent_id IS NULL
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			AND (c.agent_id IN
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			OR c.agent_id IS NULL)
		</if>
		<if test="sRegisterTime != null and eRegisterTime != null ">
			AND c.register_time BETWEEN #{sRegisterTime} AND #{eRegisterTime}
		</if>
		<if test="bankStatus == -1">
			AND c.first_buy_time IS NULL
		</if>
		GROUP BY c.id
		ORDER BY
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			${orderField} ${orderDirection},
		</if>
		c.register_time DESC, c.status ASC, c.id DESC
		) ceshi
		LEFT JOIN (
		SELECT account_Id, SUM(bsa1.balance) AS total_balance
		FROM bs_sub_account bsa1
		WHERE (
		bsa1.status = 1 AND bsa1.product_type  in ('JSH', 'DEP_JSH')
		) OR (
		(bsa1.status IN (2, 3)) AND bsa1.product_type not  in ('JSH', 'DEP_JSH')
		)
		GROUP BY account_Id
		) bsa5 ON bsa5.account_id = ceshi.account_Id
		LEFT JOIN bs_agent ba ON ba.id = ceshi.agent_id
		LEFT JOIN (
		SELECT c.id, ROUND(SUM(CASE WHEN p.term = - 7 THEN (e.open_balance+IFNULL(red.open_balance, 0)) * 7 / 365 WHEN p.term IN (1, 3, 6) THEN (e.open_balance+IFNULL(red.open_balance, 0)) * p.term * 30
		/ 365 WHEN p.term = 12 THEN (e.open_balance+IFNULL(red.open_balance, 0)) WHEN p.term IS NULL THEN 0 ELSE 0 END),2) AS annualized_investment, e.open_balance+IFNULL(red.open_balance, 0),
		e.product_rate, p.term
		FROM bs_sub_account e
		LEFT JOIN bs_account d ON e.account_id=d.id
		LEFT JOIN bs_user c ON c.id=d.user_id	
		LEFT JOIN bs_product p on p.id = e.product_id 
		LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = e.id 
		LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
		WHERE e.product_type IN ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'RED_ZSD', 'RED_7', 'RED', 'AUTH_FREE', 'RED_FREE') AND e.`status` IN (2, 3,
		4, 5, 7)
		GROUP BY c.id
		) ee ON ceshi.id = ee.id
		LEFT JOIN bs_bank_card AS bank ON ceshi.id = bank.user_id AND EXISTS (
		SELECT test.id
		FROM (
		SELECT id FROM ( SELECT id, user_id FROM bs_bank_card WHERE is_first = 1 ORDER BY bind_time DESC ) aa GROUP BY user_id
		) test WHERE test.id = bank.id
		)
		LEFT JOIN (
		SELECT c.id, SUM(IF(e.open_time >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH),1,0) - IF (red.open_time >= DATE_SUB( CURDATE( ), INTERVAL 3 MONTH ), 1, 0 )) AS three_investment_times,
		(count(e.id) - count(red.id)) AS investment_times
		FROM bs_sub_account e
		LEFT JOIN bs_account a ON e.account_id=a.id
		LEFT JOIN bs_user c ON c.id=a.user_id	
		LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = e.id 
		LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id		
		WHERE e.product_type IN ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'RED_ZSD', 'RED_7', 'RED', 'AUTH_FREE', 'RED_FREE') AND e.`status` IN (2, 3, 4, 5, 7)
		GROUP BY c.id
		) mi2 ON ceshi.id = mi2.id
		LEFT JOIN (
		SELECT bsa.account_id, MAX(bsa.open_time) AS recent_buyTime, SUM(IF(bsa.`status` = 2, bsa.open_balance+IFNULL(red.open_balance, 0), 0)) AS stock_assets
		FROM bs_sub_account bsa
		LEFT JOIN bs_account a ON bsa.account_id=a.id 
		LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = bsa.id 
		LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
		WHERE bsa.product_type IN ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'RED_ZSD', 'RED_7', 'RED', 'AUTH_FREE', 'RED_FREE') 
		GROUP BY bsa.account_id
		) mi3 ON ceshi.account_Id = mi3.account_id
		WHERE 1=1
		<if test="bankStatus == -1">
			AND bank.`status` IS NULL
		</if>
		<if test="bankStatus != null and bankStatus != 0 and bankStatus != -1 ">
			AND bank.status = #{bankStatus}
		</if>
		<include refid="sql-global.pagination" />
	</select>

	<!-- 用户综合查询 数量统计 -->
	<select id="countUserComplexCount" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer">
		select
		count(*)
		from (
		select
		distinct(c.id)
		from
		bs_account a ,bs_sub_account p, bs_user c LEFT JOIN
		bs_bank_card bank on c.id = bank.user_id
		and
		exists
		(select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time
		DESC) aa group by user_id) test where test.id = bank.id)
		LEFT JOIN bs_agent ba on ba.id=c.agent_id
		<where>
			c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH'
			<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
				and c.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
			</if>
			<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
				and c.agent_id is null
			</if>
			<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
				and (c.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
				or c.agent_id is null)
			</if>
			<if test="sRegisterTime != null  and eRegisterTime != null ">
				and c.register_time between #{sRegisterTime} and #{eRegisterTime}
			</if>
			<if test="bankStatus != null and bankStatus != 0 and bankStatus != -1 ">
				and bank.status = #{bankStatus}
			</if>
			<if test="bankStatus == -1">
				and c.first_buy_time is null and bank.status is null
			</if>
		</where>
		) user
	</select>
	
	<!-- 用户注册查询回访记录查询  数量统计 -->
	<select id="countUserRecordCount" parameterType="com.pinting.business.model.vo.BsRecordListVo" resultType="java.lang.Integer">
		select count(id) from bs_return_visit_record where user_id = #{userId}
	</select>
	
	<resultMap id="BsUserRecordResultMap" type="com.pinting.business.model.vo.BsRecordListVo" extends="BaseResultMap">
		<result column="id" property="id" />
		<result column="user_id" property="userId" />
		<result column="submit_time" property="submitTime" />
		<result column="submitter" property="submitter" />
		<result column="content" property="content" />
	</resultMap>
	<!-- 用户注册查询回访记录查询 -->
	<select id="selectUserRecord" parameterType="com.pinting.business.model.vo.BsRecordListVo" resultMap="BsUserRecordResultMap">
		select * from bs_return_visit_record where user_id = #{userId}
		<include refid="sql-global.pagination" />
	</select>
	
	<insert id="addUserRecord" parameterType="com.pinting.business.model.vo.BsRecordListVo">
		insert into bs_return_visit_record (user_id, submit_time, submitter, content) 
		values (#{userId,jdbcType=INTEGER}, #{submitTime,jdbcType=TIMESTAMP},
		#{submitter,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR})
	</insert>
	
	<!-- 用户复投查询 -->
	<select id="selectUserComplexVote" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultMap="BsUserAssetResultMap">
		SELECT aa.*, bb.*
		FROM
		(select c.id, sum(a.open_balance) as totalPrincipal, 
		(count(a.id) - count(red.id)) as investment_times, a.account_id
		from bs_sub_account a
		LEFT JOIN bs_account b ON a.account_id=b.id
		LEFT JOIN bs_user c ON c.id=b.user_id	
		LEFT JOIN bs_product e ON e.id=a.product_id
		LEFT JOIN bs_property_info f ON e.property_id=f.id
		LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
		LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
		WHERE a.status in (2,5,7) 
		and ((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE'))
				or 
				(a.product_type='REG')
				)		
		<if test="sInterestBeginDate != null  and eInterestBeginDate != null ">
			and a.interest_begin_date between DATE_FORMAT(DATE_SUB(#{sInterestBeginDate},INTERVAL -1 DAY),'%Y-%m-%d')
			and DATE_FORMAT(DATE_SUB(#{eInterestBeginDate},INTERVAL -1 DAY),'%Y-%m-%d')
		</if>
		GROUP BY b.user_id
		) aa INNER JOIN
		(SELECT bsa.account_id, sum(bsa.open_balance) principal, bsa.last_finish_interest_date, bsa.interest_begin_date,
		sum(bsa.open_balance +
		CASE
			WHEN bse.term=12 THEN ROUND((bsa.open_balance)*bse.base_rate/100,2)
			WHEN bse.term &lt; 0 THEN ROUND((bsa.open_balance)*bse.base_rate*ABS(bse.term)/36500,2)
			ELSE ROUND((bsa.open_balance)*bse.base_rate*bse.term*30/36500,2)
		END ) amount_of_payment		
		from bs_sub_account bsa
		LEFT JOIN bs_account bsb ON bsa.account_id=bsb.id
		LEFT JOIN bs_user bsc ON bsc.id=bsb.user_id	
		LEFT JOIN bs_product bse ON bse.id=bsa.product_id
		LEFT JOIN bs_property_info bsf ON bse.property_id=bsf.id
		LEFT JOIN bs_sub_account_pair bspr ON bspr.auth_account_id = bsa.id 
		LEFT JOIN bs_sub_account bsred ON bsred.id = bspr.red_account_id
		WHERE bsa.status =5
		and ((bsf.property_symbol='YUN_DAI_SELF' and bsa.product_type in ('AUTH_YUN', 'RED'))
			or
			(bsf.property_symbol='7_DAI_SELF' and bsa.product_type in ('AUTH_7', 'RED_7'))
			or
			(bsf.property_symbol='FREE' and bsa.product_type in ('AUTH_FREE', 'RED_FREE'))
			or 
			(bsa.product_type='REG')
			)
		<if test="sLastFinishInterestDate != null  and eLastFinishInterestDate != null ">
			and bsa.last_finish_interest_date between #{sLastFinishInterestDate} and #{eLastFinishInterestDate}
		</if>
		GROUP BY bsa.account_id
		) bb on aa.account_id=bb.account_id
		where 1 = 1
		<if test="userId != null and userId != '' ">
			and aa.id = #{userId}
		</if>
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			order by ${orderField} ${orderDirection}
		</if>
		<include refid="sql-global.pagination" />
	</select>

	<!-- 用户复投统计 -->
	<select id="selectUserComplexVoteCount" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer">
		select count(*) from
		(
		SELECT aa.*, bb.*
		FROM
		(SELECT c.id,b.user_id, a.account_id as abc
			from bs_sub_account a
		LEFT JOIN bs_account b ON a.account_id=b.id
		LEFT JOIN bs_user c ON c.id=b.user_id	
		LEFT JOIN bs_product e ON e.id=a.product_id
		LEFT JOIN bs_property_info f ON e.property_id=f.id
		LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
		LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE a.status in (2,5,7) 
		and ((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE'))
				or 
				(a.product_type='REG')
				)	
		<if test="sInterestBeginDate != null  and eInterestBeginDate != null ">
			and a.interest_begin_date between DATE_FORMAT(DATE_SUB(#{sInterestBeginDate},INTERVAL -1 DAY),'%Y-%m-%d')
			and DATE_FORMAT(DATE_SUB(#{eInterestBeginDate},INTERVAL -1 DAY),'%Y-%m-%d')
		</if>
		GROUP BY b.user_id
		) aa INNER JOIN
		(SELECT bsa.account_id as edf
			from bs_sub_account bsa
		LEFT JOIN bs_account bsb ON bsa.account_id=bsb.id
		LEFT JOIN bs_user bsc ON bsc.id=bsb.user_id	
		LEFT JOIN bs_product bse ON bse.id=bsa.product_id
		LEFT JOIN bs_property_info bsf ON bse.property_id=bsf.id
		LEFT JOIN bs_sub_account_pair bspr ON bspr.auth_account_id = bsa.id 
		LEFT JOIN bs_sub_account bsred ON bsred.id = bspr.red_account_id
			WHERE bsa.status =5
		and ((bsf.property_symbol='YUN_DAI_SELF' and bsa.product_type in ('AUTH_YUN', 'RED'))
			or
			(bsf.property_symbol='7_DAI_SELF' and bsa.product_type in ('AUTH_7', 'RED_7'))
			or
			(bsf.property_symbol='FREE' and bsa.product_type in ('AUTH_FREE', 'RED_FREE'))
			or 
			(bsa.product_type='REG')
			)
		<if test="sLastFinishInterestDate != null  and eLastFinishInterestDate != null ">
			and e.last_finish_interest_date between #{sLastFinishInterestDate} and #{eLastFinishInterestDate}
		</if>
		GROUP BY bsa.account_id
		) bb on aa.abc=bb.edf
		where 1 = 1
		<if test="userId != null and userId != '' ">
			and aa.id = #{userId}
		</if>
		) t
	</select>

	<!-- - 统计所有的注册用户 - @auth yanwl - @date 2015-12-03 -->
	<select id="countResgisterUser" parameterType="java.util.Map" resultType="java.util.Map">
		select
		(select count(*) from bs_user u1 where u1.register_time between DATE_FORMAT(#{todayTime},'%Y-%m-%d 00:00:00') and
		DATE_FORMAT(#{todayTime},'%Y-%m-%d 23:59:59') ) as tRegisterUserCount,
		(select count(*) from bs_user u2 where u2.register_time between DATE_FORMAT(#{yesterdayTime},'%Y-%m-%d 00:00:00') and
		DATE_FORMAT(#{yesterdayTime},'%Y-%m-%d 23:59:59') ) as yRegisterUserCount,
		count(*) as totalRegisterUserCount
		from bs_user
	</select>
	
	<select id="countResgisterUserByTime" parameterType="java.util.Date" resultType="java.lang.Integer">
		select count(*) from bs_user where register_time between DATE_FORMAT(#{time},'%Y-%m-%d 00:00:00') and
			DATE_FORMAT(#{time},'%Y-%m-%d 23:59:59') 
	</select>
	
	<!-- 统计用户数旧方法 -->
	<!-- <select id="countAllUserCount" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer"> 
		select count(*) from ( select c.*, dafy.bank_card cardNo, dafy.status bankStatus, dafy.dafy_bind_card_time bindTime, c.user_name 
		cardOwner, a.id as account_Id, (select count(*) from bs_user x where x.recommend_id=a.user_id) as recommendNum, (select balance 
		from bs_sub_account p where b.status = 1 and p.product_type='JSH' and p.id=b.id) balance, SUM(b.balance) as total_balance 
		from bs_account a, bs_user c LEFT JOIN dafy_user_ext dafy on c.id = dafy.user_id ,bs_sub_account b <where> c.id=a.user_id 
		and a.id=b.account_id and ((b.status=1 and b.product_type = 'JSH') or ((b.status=2 or b.status=3) and b.product_type != 'JSH')) 
		<if test="mobile !=null and mobile !='' "> and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%') </if> <if 
		test="status!=null and status>0 "> and c.status = #{status} </if> <if test="recommendId!=null and recommendId>0 "> and c.recommend_id 
		= #{recommendId} </if> <if test="sEmail!=null"> and c.email = #{sEmail} </if> <if test="sIsBindName!=null and sIsBindName>0 
		"> and c.is_bind_name = #{sIsBindName} </if> <if test="sName!=null"> and c.user_name like concat(concat('%', #{sName,jdbcType=VARCHAR}),'%') 
		</if> <if test="sNick!=null"> and c.nick like concat(concat('%', #{sNick,jdbcType=VARCHAR}),'%') </if> <if test="sReward!=null 
		and sReward>0 and eReward!=null and eReward>0 "> and c.total_bonus between #{sReward} and #{eReward} </if> <if test="sRegisterTime!=null 
		and eRegisterTime!=null "> and c.register_time between #{sRegisterTime} and #{eRegisterTime} </if> <if test="sIsBindBank!=null 
		and sIsBindBank == 2"> and c.is_bind_bank = #{sIsBindBank} </if> <if test="agentId != null and agentId != 0"> and c.agent_id 
		= #{agentId} </if> </where> GROUP BY c.id HAVING 1=1 <if test="sIsBindBank!=null and sIsBindBank>0 and sIsBindBank!=2"> and 
		dafy.status = #{sIsBindBank} </if> <if test="sRecommend!=null and sRecommend>0 and eRecommend!=null and eRecommend>0 "> and 
		recommendNum between #{sRecommend} and #{eRecommend} </if> )p </select> -->

	<!-- 注册用户查询列表 -->
	<select id="selectRegisterUser" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultMap="BsUserAssetResultMap">
		SELECT
		c.id,c.mobile,c.user_name,c.register_time,c.status,
		bank.bank_name bankName,
		bank.status bankStatus,
		bank.is_first,
		ba.agent_name as agentName,
		case when ISNULL(c.recommend_id) then '' else (select CASE WHEN ISNULL(p.user_name) THEN p.mobile ELSE p.user_name END  from bs_user p where p.id = c.recommend_id)
		end recommendName
		FROM bs_account a ,bs_sub_account p ,
		bs_user c LEFT JOIN bs_bank_card AS bank on c.id = bank.user_id
		and exists
		(select test.id from
		(
		select id from
		(select id,user_id from bs_bank_card where is_first = 1 order by bind_time DESC) aa group by user_id
		) test
		where test.id = bank.id)
		LEFT JOIN bs_agent ba on ba.id=c.agent_id
		WHERE c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH'
		<if test="mobile !=null and mobile !='' ">
			and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null">
			and c.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		order by
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			${orderField} ${orderDirection},
		</if>
		c.register_time desc
		<include refid="sql-global.pagination" />
	</select>

	<!-- 注册用户统计 -->
	<select id="selectRegisterUserCount" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer">
		SELECT
		count(*)
		FROM (
		select
		distinct(c.id)
		from bs_account a ,bs_sub_account p, bs_user c LEFT JOIN
		bs_bank_card bank on c.id = bank.user_id LEFT JOIN bs_agent ba on ba.id=c.agent_id
		where c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH'
		<if test="mobile !=null and mobile !='' ">
			and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null ">
			and c.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		) test
	</select>

	<select id="selectAllUserForUserId" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultMap="BaseResultMap">
		select tab.user_id id from (
		select tab1.*,(tab1.totalBalance + IFNULL(tab1.current_interest,0) + IFNULL(tab1.total_bonus,0)) as sumBalance
		from (
		select
		c.id as
		user_id,c.mobile,c.user_name,c.id_card,c.total_interest,c.total_bonus,c.register_time,c.first_buy_time,c.current_interest,c.recommend_id,
		bank.card_no cardNo,
		bank.bank_name bankName,
		bank.status bankStatus,
		c.agent_id,
		ba.agent_name as agentName,
		bank.bank_id,
		(YEAR (curdate())-IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) =
		15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) as age,
		(
		case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
		if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
		when 1 then '男' when 0 then '女' else '' end
		) as gender,

		(select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa where bsa.product_type = 'REG' and bsa.account_id =
		a.id) as totalPrincipal,
		(select IFNULL(sum(bsa1.balance),0) from bs_sub_account bsa1 where bsa1.account_id = a.id and ((bsa1.status=1
		and bsa1.product_type = 'JSH') or ((bsa1.status=2 or bsa1.status=3) and bsa1.product_type != 'JSH'))) as
		totalBalance,

		(select IFNULL(sum(bsa2.balance),0) from bs_sub_account bsa2 where bsa2.account_id = a.id and (bsa2.status=2 or
		bsa2.status=3) and bsa2.product_type != 'JSH' ) as currentBalance,

		(select IFNULL(sum(bsa3.balance),0) from bs_sub_account bsa3 where bsa3.account_id = a.id and bsa3.status=1 and
		bsa3.product_type = 'JSH' ) as account_balance,

		(select count(*) from bs_sub_account e where c.id=a.user_id and a.id=e.account_id and e.product_type='REG'
		and (e.`status`=2 or e.`status`=5 or e.`status`=7 or e.`status`=3 or e.`status`=4) GROUP BY c.id) as
		investment_times,

		(select count(*) from bs_user x where x.recommend_id=a.user_id) as recommendNum

		from
		bs_account a ,bs_sub_account p , bs_user c LEFT JOIN
		bs_bank_card AS bank on c.id = bank.user_id
		and exists
		(select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time
		DESC) aa group by user_id) test where test.id = bank.id)
		LEFT JOIN bs_agent ba on ba.id=c.agent_id
		where c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH' and c.status = 1
		)tab1
		) tab left join bs_user_tags tag on tab.user_id = tag.user_id
		where 1=1
		<if test="userId !=null and userId !='' ">
			and tab.user_id like concat(concat('%', #{userId,jdbcType=INTEGER}),'%')
		</if>
		<if test="gender !=null and gender != ''">
			and tab.gender = #{gender}
		</if>
		<if test="sAge !=null and sAge !='' ">
			and tab.age &gt;= #{sAge}
		</if>
		<if test="eAge !=null and eAge !='' ">
			and tab.age &lt;= #{eAge}
		</if>
		<if test="sBankCard !=null and sBankCard !='' ">
			and tab.cardNo like concat(concat('%', #{sBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="sSumBalance !=null and sSumBalance !='' ">
			and tab.sumBalance &gt;= #{sSumBalance}
		</if>
		<if test="eSumBalance !=null and eSumBalance !='' ">
			and tab.sumBalance &lt;= #{eSumBalance}
		</if>
		<if test="bankStatus != null and bankStatus > 0 ">
			and tab.bankStatus = #{bankStatus}
		</if>
		<if test="bankStatus != null and bankStatus == 0 ">
			and tab.bankStatus is null
		</if>
		<if test="sInvestmentTimes !=null and sInvestmentTimes !='' ">
			and tab.investment_times &gt;= #{sInvestmentTimes}
		</if>
		<if test="sInvestmentTimes !=null and sInvestmentTimes !='' ">
			and tab.investment_times &lt;= #{sInvestmentTimes}
		</if>

		<if test="sCurrentBalance !=null and sCurrentBalance !='' ">
			and tab.currentBalance &gt;= #{sCurrentBalance}
		</if>
		<if test="eCurrentBalance !=null and eCurrentBalance !='' ">
			and tab.currentBalance &lt;= #{eCurrentBalance}
		</if>

		<if test="sReward !=null and sReward !='' ">
			and tab.total_bonus &gt;= #{sReward}
		</if>
		<if test="eReward !=null and eReward !='' ">
			and tab.total_bonus &lt;= #{eReward}
		</if>
		<if test="sRegisterTime !=null">
			and tab.register_time &gt;= #{sRegisterTime}
		</if>
		<if test="eRegisterTime !=null ">
			and tab.register_time &lt;= DATE_FORMAT(#{eRegisterTime},'%Y-%m-%d 23:59:59')
		</if>
		<if test="sFirstBuyTime !=null">
			and tab.first_buy_time &gt;= #{sFirstBuyTime}
		</if>
		<if test="eFirstBuyTime !=null">
			and tab.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
		</if>
		<if test="sBalance !=null and sBalance !='' ">
			and tab.totalBalance &gt;= #{sBalance}
		</if>
		<if test="eBalance !=null and eBalance !='' ">
			and tab.totalBalance &lt;= #{eBalance}
		</if>
		<if test="sTotalPrincipal !=null and sTotalPrincipal !='' ">
			and tab.totalPrincipal &gt;= #{sTotalPrincipal}
		</if>
		<if test="eTotalPrincipal !=null and eTotalPrincipal !='' ">
			and tab.totalPrincipal &lt;= #{eTotalPrincipal}
		</if>
		<if test="sTotalInterest !=null and sTotalInterest !='' ">
			and tab.total_interest &gt;= #{sTotalInterest}
		</if>
		<if test="eTotalInterest !=null and eTotalInterest !='' ">
			and tab.total_interest &lt;= #{eTotalInterest}
		</if>
		<if test="sRecommendNum !=null and sRecommendNum !='' ">
			and tab.recommendNum &gt;= #{sRecommendNum}
		</if>
		<if test="eRecommendNum !=null and eRecommendNum !='' ">
			and tab.recommendNum &lt;= #{eRecommendNum}
		</if>
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and tab.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and tab.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (tab.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or tab.agent_id is null)
		</if>

		<!-- 标签 -->
		<if test="tagIdList != null">
			and (tag.tag_id in
			<foreach collection="tagIdList" item="tagId" index="index" open="(" close=")" separator=",">
				#{tagId}
			</foreach>
			<if test="noTagId == 'yes'">
				or tag.tag_id is null
			</if>
			)
		</if>
		<if test="tagIdList == null">
			<if test="noTagId == 'yes'">
				and tag.tag_id is null
			</if>
		</if>
		<!-- 标签 -->

		<if test="recommendId !=null and recommendId != ''">
			and tab.recommend_id = #{recommendId}
		</if>
		<if test="bankName !=null and bankName != ''">
			and tab.bankName like concat(concat('%', #{bankName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="content !=null and content != ''">
			and tab.content like concat(concat('%', #{content,jdbcType=VARCHAR}),'%')
		</if>
		group by tab.user_id
		order by
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			${orderField} ${orderDirection},
		</if>
		tab.register_time desc,tab.user_id desc
		<if test="numPerPage != -1">
			<include refid="sql-global.pagination" />
		</if>
	</select>

	<!-- 用户标签管理列表 -->
	<select id="selectAllUserTag" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultMap="BsUserAssetResultMap">
		select tab.*,group_concat(tag.tag_id) content FROM (
        SELECT
        c.id as
        user_id,c.mobile,c.user_name,c.id_card,c.total_interest,c.total_bonus,c.register_time,c.first_buy_time,c.current_interest,c.recommend_id,
        bank.card_no cardNo,
        bank.bank_name bankName,
        bank.status bankStatus,
        c.agent_id,
        ba.agent_name as agentName,
        bank.bank_id,
        (YEAR (curdate())-IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) =
        15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) as age,
        (
        case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
        if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
        when 1 then '男' when 0 then '女' else '' end
        ) as gender,

        (select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa where bsa.product_type IN ('REG', 'AUTH','AUTH_YUN') and bsa.account_id =
        a.id) as totalPrincipal,
        (select IFNULL(sum(bsa1.balance),0) from bs_sub_account bsa1 where bsa1.account_id = a.id and ((bsa1.status=1
        and bsa1.product_type in ('JSH','DEP_JSH')) or ((bsa1.status=2 or bsa1.status=3) and bsa1.product_type != 'JSH' and bsa1.product_type != 'DEP_JSH'))) as
        totalBalance,

        (select IFNULL(sum(bsa1.balance),0) from bs_sub_account bsa1 where ((bsa1.status=1 and bsa1.product_type in
        ('JSH','DEP_JSH')) or ((bsa1.status=2 or bsa1.status=3) and bsa1.product_type != 'JSH')) and bsa1.account_id = a.id )
        +IFNULL(c.current_interest,0)+IFNULL(c.total_bonus,0) as sumBalance,

        (select  IFNULL(sum(CASE WHEN bsa2.product_type = 'REG_D' THEN  bsa2.balance ELSE  bsa2.open_balance END),0) from bs_sub_account bsa2 where bsa2.account_id = a.id and (bsa2.status=2 or
        bsa2.status=3 or bsa2.status=7) and bsa2.product_type IN ('REG', 'REG_D','AUTH_YUN','RED')) as currentBalance,

        (select IFNULL(sum(bsa3.balance),0) from bs_sub_account bsa3 where bsa3.account_id = a.id and bsa3.status=1 and
        bsa3.product_type in ('JSH','DEP_JSH') ) as account_balance,

        (select count(*) from bs_sub_account e where c.id=a.user_id and a.id=e.account_id and e.product_type IN ('REG', 'AUTH','AUTH_YUN')
        and (e.`status`=2 or e.`status`=5 or e.`status`=7 or e.`status`=3 or e.`status`=4) GROUP BY c.id) as
        investment_times,

        (select count(*) from bs_user x where x.recommend_id=a.user_id) as recommendNum

        from
        bs_account a ,bs_sub_account p , bs_user c LEFT JOIN
        bs_bank_card AS bank on c.id = bank.user_id
        and exists
        (select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time
        DESC) aa group by user_id) test where test.id = bank.id)
        LEFT JOIN bs_agent ba on ba.id=c.agent_id

        where p.account_id = a.id AND p.product_type='JSH' and c.status = 1 and c.id=a.user_id
        ) tab left join bs_user_tags tag on tab.user_id = tag.user_id
        WHERE 1=1
        <if test="buyBankType != null and buyBankType != '' ">
            and tab.bank_id = cast(#{buyBankType} as SIGNED INTEGER)
        </if>
        <if test="userId !=null and userId !='' ">
            and tab.user_id like concat(concat('%', #{userId,jdbcType=INTEGER}),'%')
        </if>
        <if test="gender !=null and gender != ''">
            and tab.gender = #{gender}
        </if>
        <if test="sAge !=null and sAge !='' ">
            and tab.age &gt;= #{sAge}
        </if>
        <if test="eAge !=null and eAge !='' ">
            and tab.age &lt;= #{eAge}
        </if>
        <if test="sBankCard !=null and sBankCard !='' ">
            and tab.cardNo like concat(concat('%', #{sBankCard,jdbcType=VARCHAR}),'%')
        </if>
        <if test="sSumBalance !=null and sSumBalance !='' ">
            and tab.sumBalance &gt;= #{sSumBalance}
        </if>
        <if test="eSumBalance !=null and eSumBalance !='' ">
            and tab.sumBalance &lt;= #{eSumBalance}
        </if>
        <if test="bankStatus != null and bankStatus > 0 ">
            and tab.bankStatus = #{bankStatus}
        </if>
        <if test="bankStatus != null and bankStatus == 0 ">
            and tab.bankStatus is null
        </if>
        <if test="sInvestmentTimes !=null and sInvestmentTimes !='' ">
            and tab.investment_times &gt;= #{sInvestmentTimes}
        </if>
        <if test="eInvestmentTimes !=null and eInvestmentTimes !='' ">
            and tab.investment_times &lt;= #{eInvestmentTimes}
        </if>
        <if test="sCurrentBalance !=null and sCurrentBalance !='' ">
            and tab.currentBalance &gt;= #{sCurrentBalance}
        </if>
        <if test="eCurrentBalance !=null and eCurrentBalance !='' ">
            and tab.currentBalance &lt;= #{eCurrentBalance}
        </if>
        <if test="sReward !=null and sReward !='' ">
            and tab.total_bonus &gt;= #{sReward}
        </if>
        <if test="eReward !=null and eReward !='' ">
            and tab.total_bonus &lt;= #{eReward}
        </if>
        <if test="sRegisterTime !=null">
            and tab.register_time &gt;= #{sRegisterTime}
        </if>
        <if test="eRegisterTime !=null ">
            and tab.register_time &lt;= DATE_FORMAT(#{eRegisterTime},'%Y-%m-%d 23:59:59')
        </if>
        <if test="sFirstBuyTime !=null">
            and tab.first_buy_time &gt;= #{sFirstBuyTime}
        </if>
        <if test="eFirstBuyTime !=null">
            and tab.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
        </if>
        <if test="sBalance !=null and sBalance !='' ">
            and tab.account_balance &gt;= #{sBalance}
        </if>
        <if test="eBalance !=null and eBalance !='' ">
            and tab.account_balance &lt;= #{eBalance}
        </if>
        <if test="sTotalPrincipal !=null and sTotalPrincipal !='' ">
            and tab.totalPrincipal &gt;= #{sTotalPrincipal}
        </if>
        <if test="eTotalPrincipal !=null and eTotalPrincipal !='' ">
            and tab.totalPrincipal &lt;= #{eTotalPrincipal}
        </if>
        <if test="sTotalInterest !=null and sTotalInterest !='' ">
            and tab.total_interest &gt;= #{sTotalInterest}
        </if>
        <if test="eTotalInterest !=null and eTotalInterest !='' ">
            and tab.total_interest &lt;= #{eTotalInterest}
        </if>
        <if test="sRecommendNum !=null and sRecommendNum !='' ">
            and tab.recommendNum &gt;= #{sRecommendNum}
        </if>
        <if test="eRecommendNum !=null and eRecommendNum !='' ">
            and tab.recommendNum &lt;= #{eRecommendNum}
        </if>
        <if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
            and tab.agent_id in
            <foreach collection="agentIds" item="agentId" index="index"
                     open="(" close=")" separator=",">
                #{agentId}
            </foreach>
        </if>
        <if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
            and tab.agent_id is null
        </if>
        <if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
            and (tab.agent_id in
            <foreach collection="agentIds" item="agentId" index="index"
                     open="(" close=")" separator=",">
                #{agentId}
            </foreach>
            or tab.agent_id is null)
        </if>
        <!-- 标签 -->
        <if test="tagIdList != null">
            and (tag.tag_id in
            <foreach collection="tagIdList" item="tagId" index="index"
                     open="(" close=")" separator=",">
                #{tagId}
            </foreach>
            <if test="noTagId == 'yes'">
                and tag.tag_id is null
            </if>
            )
        </if>
        <if test="tagIdList == null">
            <if test="noTagId == 'yes'">
                and tag.tag_id is null
            </if>
        </if>
        
        <if test="recommendId !=null and recommendId != ''">
            and tab.recommend_id = #{recommendId}
        </if>
        <if test="bankName !=null and bankName != ''">
            and tab.bankName like concat(concat('%', #{bankName,jdbcType=VARCHAR}),'%')
        </if>
        <if test="content !=null and content != ''">
            and tab.content like concat(concat('%', #{content,jdbcType=VARCHAR}),'%')
        </if>
        group by tab.user_id
        <if test="tagIdList != null">
            HAVING COUNT(*) >= #{tagIdListSize}
        </if>

        order by
        <if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
            ${orderField} ${orderDirection},
        </if>
        tab.register_time desc,tab.user_id desc
        <include refid="sql-global.pagination"/>
	</select>

	<!-- 用户标签管理统计 -->
	<select id="countAllUserTagCount" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer">
		select COUNT(tab1.user_id) FROM (
        select tab.user_id from
        (SELECT
        c.id as
        user_id
        ,c.mobile,c.user_name,c.id_card,c.total_interest,c.total_bonus,c.register_time,c.first_buy_time,c.current_interest,c.recommend_id,
        bank.card_no cardNo,
        bank.bank_name bankName,
        bank.status bankStatus,
        c.agent_id,
        ba.agent_name as agentName,
        bank.bank_id,
        (YEAR (curdate())-IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) =
        15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) as age,
        (
        case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
        if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
        when 1 then '男' when 0 then '女' else '' end
        ) as gender,

        (select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa where bsa.product_type IN ('REG', 'AUTH','AUTH_YUN') and bsa.account_id =
        a.id) as totalPrincipal,
        (select IFNULL(sum(bsa1.balance),0) from bs_sub_account bsa1 where bsa1.account_id = a.id and ((bsa1.status=1
        and bsa1.product_type in ('JSH','DEP_JSH')) or ((bsa1.status=2 or bsa1.status=3) and bsa1.product_type != 'JSH'))) as
        totalBalance,

        (select IFNULL(sum(bsa1.balance),0) from bs_sub_account bsa1 where ((bsa1.status=1 and bsa1.product_type in
        ('JSH','DEP_JSH')) or ((bsa1.status=2 or bsa1.status=3) and bsa1.product_type != 'JSH')) and bsa1.account_id = a.id )
        +IFNULL(c.current_interest,0)+IFNULL(c.total_bonus,0) as sumBalance,

        (select IFNULL(sum(bsa2.balance),0) from bs_sub_account bsa2 where bsa2.account_id = a.id and (bsa2.status=2 or
        bsa2.status=3) and bsa2.product_type IN ('REG', 'AUTH','AUTH_YUN')) as currentBalance,

        (select IFNULL(sum(bsa3.balance),0) from bs_sub_account bsa3 where bsa3.account_id = a.id and bsa3.status=1 and
        bsa3.product_type in ('JSH','DEP_JSH') ) as account_balance,

        (select count(*) from bs_sub_account e where c.id=a.user_id and a.id=e.account_id and e.product_type IN ('REG', 'AUTH','AUTH_YUN')
        and (e.`status`=2 or e.`status`=5 or e.`status`=7 or e.`status`=3 or e.`status`=4) GROUP BY c.id) as
        investment_times,

        (select count(*) from bs_user x where x.recommend_id=a.user_id) as recommendNum

        from
        bs_account a ,bs_sub_account p , bs_user c LEFT JOIN
        bs_bank_card AS bank on c.id = bank.user_id
        and exists
        (select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time
        DESC) aa group by user_id) test where test.id = bank.id)
        LEFT JOIN bs_agent ba on ba.id=c.agent_id

        where p.account_id = a.id AND p.product_type='JSH' and c.status = 1 and c.id=a.user_id
        ) tab left join bs_user_tags tag on tab.user_id = tag.user_id
        WHERE 1=1
        <if test="buyBankType != null and buyBankType != '' ">
            and tab.bank_id = cast(#{buyBankType} as SIGNED INTEGER)
        </if>
        <if test="userId !=null and userId !='' ">
            and tab.user_id like concat(concat('%', #{userId,jdbcType=INTEGER}),'%')
        </if>
        <if test="gender !=null and gender != ''">
            and tab.gender = #{gender}
        </if>
        <if test="sAge !=null and sAge !='' ">
            and tab.age &gt;= #{sAge}
        </if>
        <if test="eAge !=null and eAge !='' ">
            and tab.age &lt;= #{eAge}
        </if>
        <if test="sBankCard !=null and sBankCard !='' ">
            and tab.cardNo like concat(concat('%', #{sBankCard,jdbcType=VARCHAR}),'%')
        </if>
        <if test="sSumBalance !=null and sSumBalance !='' ">
            and tab.sumBalance &gt;= #{sSumBalance}
        </if>
        <if test="eSumBalance !=null and eSumBalance !='' ">
            and tab.sumBalance &lt;= #{eSumBalance}
        </if>
        <if test="bankStatus != null and bankStatus > 0 ">
            and tab.bankStatus = #{bankStatus}
        </if>
        <if test="bankStatus != null and bankStatus == 0 ">
            and tab.bankStatus is null
        </if>
        <if test="sInvestmentTimes !=null and sInvestmentTimes !='' ">
            and tab.investment_times &gt;= #{sInvestmentTimes}
        </if>
        <if test="eInvestmentTimes !=null and eInvestmentTimes !='' ">
            and tab.investment_times &lt;= #{eInvestmentTimes}
        </if>
        <if test="sCurrentBalance !=null and sCurrentBalance !='' ">
            and tab.currentBalance &gt;= #{sCurrentBalance}
        </if>
        <if test="eCurrentBalance !=null and eCurrentBalance !='' ">
            and tab.currentBalance &lt;= #{eCurrentBalance}
        </if>
        <if test="sReward !=null and sReward !='' ">
            and tab.total_bonus &gt;= #{sReward}
        </if>
        <if test="eReward !=null and eReward !='' ">
            and tab.total_bonus &lt;= #{eReward}
        </if>
        <if test="sRegisterTime !=null">
            and tab.register_time &gt;= #{sRegisterTime}
        </if>
        <if test="eRegisterTime !=null ">
            and tab.register_time &lt;= DATE_FORMAT(#{eRegisterTime},'%Y-%m-%d 23:59:59')
        </if>
        <if test="sFirstBuyTime !=null">
            and tab.first_buy_time &gt;= #{sFirstBuyTime}
        </if>
        <if test="eFirstBuyTime !=null">
            and tab.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
        </if>
        <if test="sBalance !=null and sBalance !='' ">
            and tab.account_balance &gt;= #{sBalance}
        </if>
        <if test="eBalance !=null and eBalance !='' ">
            and tab.account_balance &lt;= #{eBalance}
        </if>
        <if test="sTotalPrincipal !=null and sTotalPrincipal !='' ">
            and tab.totalPrincipal &gt;= #{sTotalPrincipal}
        </if>
        <if test="eTotalPrincipal !=null and eTotalPrincipal !='' ">
            and tab.totalPrincipal &lt;= #{eTotalPrincipal}
        </if>
        <if test="sTotalInterest !=null and sTotalInterest !='' ">
            and tab.total_interest &gt;= #{sTotalInterest}
        </if>
        <if test="eTotalInterest !=null and eTotalInterest !='' ">
            and tab.total_interest &lt;= #{eTotalInterest}
        </if>
        <if test="sRecommendNum !=null and sRecommendNum !='' ">
            and tab.recommendNum &gt;= #{sRecommendNum}
        </if>
        <if test="eRecommendNum !=null and eRecommendNum !='' ">
            and tab.recommendNum &lt;= #{eRecommendNum}
        </if>

        <if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
            and tab.agent_id in
            <foreach collection="agentIds" item="agentId" index="index"
                     open="(" close=")" separator=",">
                #{agentId}
            </foreach>
        </if>
        <if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
            and tab.agent_id is null
        </if>
        <if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
            and (tab.agent_id in
            <foreach collection="agentIds" item="agentId" index="index"
                     open="(" close=")" separator=",">
                #{agentId}
            </foreach>
            or tab.agent_id is null)
        </if>

        <!-- 标签 -->
        <if test="tagIdList != null">
            and (tag.tag_id in
            <foreach collection="tagIdList" item="tagId" index="index"
                     open="(" close=")" separator=",">
                #{tagId}
            </foreach>
            <if test="noTagId == 'yes'">
                and tag.tag_id is null
            </if>
            )
        </if>
        <if test="tagIdList == null">
            <if test="noTagId == 'yes'">
                and tag.tag_id is null
            </if>
        </if>

        <if test="recommendId !=null and recommendId != ''">
            and tab.recommend_id = #{recommendId}
        </if>
        <if test="bankName !=null and bankName != ''">
            and tab.bankName like concat(concat('%', #{bankName,jdbcType=VARCHAR}),'%')
        </if>
        <if test="content !=null and content != ''">
            and tab.content like concat(concat('%', #{content,jdbcType=VARCHAR}),'%')
        </if>
        group by tab.user_id
        <if test="tagIdList != null">
            HAVING COUNT(*) >= #{tagIdListSize}
        </if>
        ) tab1
	</select>

	<!-- user_id新增标签查询列表 -->
	<select id="selectUserIdTag" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultMap="BsUserAssetResultMap">
		select * from (
		select tab1.*,(tab1.totalBalance + IFNULL(tab1.current_interest,0) + IFNULL(tab1.total_bonus,0)) as sumBalance
		from (
		select
		user_id,total_interest,total_bonus,register_time,first_buy_time,current_interest,recommend_id,cardNo,bankName
		bank_name,
		bankStatus,agent_id,agentName agent_name,group_concat(content) content,age,gender,totalPrincipal
		total_principal,totalBalance,currentBalance current_balance,
		account_balance,investment_times
		from (
		select
		c.id as
		user_id,c.mobile,c.user_name,c.id_card,c.total_interest,c.total_bonus,c.register_time,c.first_buy_time,c.current_interest,c.recommend_id,
		bank.card_no cardNo,
		bank.bank_name bankName,
		bank.status bankStatus,
		c.agent_id,
		ba.agent_name as agentName,
		f.content,
		(YEAR (curdate())-IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) =
		15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) as age,
		(
		case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
		if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
		when 1 then '男' when 0 then '女' else '' end
		) as gender,
		(select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa where bsa.product_type = 'REG' and bsa.account_id =
		a.id) as totalPrincipal,
		(select IFNULL(sum(bsa1.balance),0) from bs_sub_account bsa1 where bsa1.account_id = a.id and ((bsa1.status=1
		and bsa1.product_type = 'JSH') or ((bsa1.status=2 or bsa1.status=3) and bsa1.product_type != 'JSH'))) as
		totalBalance,
		(select IFNULL(sum(bsa2.balance),0) from bs_sub_account bsa2 where bsa2.account_id = a.id and (bsa2.status=2 or
		bsa2.status=3) and bsa2.product_type != 'JSH' ) as currentBalance,
		(select IFNULL(sum(bsa3.balance),0) from bs_sub_account bsa3 where bsa3.account_id = a.id and bsa3.status=1 and
		bsa3.product_type = 'JSH' ) as account_balance,
		(select count(*) from bs_sub_account e where c.id=a.user_id and a.id=e.account_id and e.product_type='REG'
		and (e.`status`=2 or e.`status`=5 or e.`status`=7 or e.`status`=3 or e.`status`=4) GROUP BY c.id) as
		investment_times

		from
		bs_account a ,bs_sub_account p , bs_user c LEFT JOIN
		bs_bank_card AS bank on c.id = bank.user_id
		and exists
		(select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time
		DESC) aa group by user_id) test where test.id = bank.id)
		LEFT JOIN bs_agent ba on ba.id=c.agent_id
		LEFT JOIN bs_user_tags t on c.id = t.user_id
		LEFT JOIN bs_tag f on t.tag_id = f.id
		where c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH' and c.status = 1
		) tab2 group by user_id
		)tab1
		) tab
		where 1=1
		<if test="userIds != null and userIds !=''">
			and tab.user_id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		order by
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			${orderField} ${orderDirection},
		</if>
		tab.register_time desc,tab.user_id desc
		<include refid="sql-global.pagination" />
	</select>

	<!-- user_id新增标签查询统计 -->
	<select id="countUserIdTag" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer">
		select count(*) from (
		select user_id from (
		select user_id from (
		select user_id from (
		select
		c.id as
		user_id,c.mobile,c.user_name,c.id_card,c.total_interest,c.total_bonus,c.register_time,c.first_buy_time,c.current_interest,c.recommend_id,
		bank.card_no cardNo,
		bank.bank_name bankName,
		bank.status bankStatus,
		c.agent_id,
		ba.agent_name as agentName,
		f.content,
		(YEAR (curdate())-IF (length(c.id_card) = 18,substring(c.id_card, 7, 4),IF (length(c.id_card) =
		15,concat('19',substring(c.id_card, 7, 2)),YEAR (curdate())))) as age,
		(
		case if(length(c.id_card)=18, cast(substring(c.id_card,17,1) as UNSIGNED)%2,
		if(length(c.id_card)=15,cast(substring(c.id_card,15,1) as UNSIGNED)%2,3))
		when 1 then '男' when 0 then '女' else '' end
		) as gender,
		(select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa where bsa.product_type = 'REG' and bsa.account_id =
		a.id) as totalPrincipal,
		(select IFNULL(sum(bsa1.balance),0) from bs_sub_account bsa1 where bsa1.account_id = a.id and ((bsa1.status=1
		and bsa1.product_type = 'JSH') or ((bsa1.status=2 or bsa1.status=3) and bsa1.product_type != 'JSH'))) as
		totalBalance,
		(select IFNULL(sum(bsa2.balance),0) from bs_sub_account bsa2 where bsa2.account_id = a.id and (bsa2.status=2 or
		bsa2.status=3) and bsa2.product_type != 'JSH' ) as currentBalance,
		(select IFNULL(sum(bsa3.balance),0) from bs_sub_account bsa3 where bsa3.account_id = a.id and bsa3.status=1 and
		bsa3.product_type = 'JSH' ) as account_balance,
		(select count(*) from bs_sub_account e where c.id=a.user_id and a.id=e.account_id and e.product_type='REG'
		and (e.`status`=2 or e.`status`=5 or e.`status`=7 or e.`status`=3 or e.`status`=4) GROUP BY c.id) as
		investment_times

		from
		bs_account a ,bs_sub_account p , bs_user c LEFT JOIN
		bs_bank_card AS bank on c.id = bank.user_id
		and exists
		(select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time
		DESC) aa group by user_id) test where test.id = bank.id)
		LEFT JOIN bs_agent ba on ba.id=c.agent_id
		LEFT JOIN bs_user_tags t on c.id = t.user_id
		LEFT JOIN bs_tag f on t.tag_id = f.id
		where c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH' and c.status = 1
		) tab2 group by user_id
		)tab1
		) tab
		where 1=1
		<if test="userIds != null and userIds !=''">
			and tab.user_id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>

		) u
	</select>

	<select id="selectByExample" resultMap="BaseResultMap" parameterType="com.pinting.business.model.BsUserExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from bs_user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from bs_user
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from bs_user
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.pinting.business.model.BsUserExample">
		delete from bs_user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.pinting.business.model.BsUser">
		insert into bs_user (id, nick, user_name,
		mobile, urgent_name, urgent_mobile,
		relation, email, password,
		pay_password, login_time, logout_time,
		login_fail_times, login_fail_time, login_always_fail_times, 
      	login_lock_time,pay_fail_times,
		pay_fail_time, id_card, status,
		is_bind_name, is_bind_bank, current_interest,
		current_bonus, total_interest, total_bonus,
		can_withdraw, total_trans, recommend_id,
		create_channel, user_type, agent_id,
		register_time, reg_terminal, first_buy_time,
		return_path, recent_bank_card_id, last_app_version,
		last_app_time)
		values (#{id,jdbcType=INTEGER}, #{nick,jdbcType=VARCHAR}, #{userName,jdbcType=VARCHAR},
		#{mobile,jdbcType=VARCHAR}, #{urgentName,jdbcType=VARCHAR}, #{urgentMobile,jdbcType=VARCHAR},
		#{relation,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
		#{payPassword,jdbcType=VARCHAR}, #{loginTime,jdbcType=TIMESTAMP}, #{logoutTime,jdbcType=TIMESTAMP},
		#{loginFailTimes,jdbcType=INTEGER}, #{loginFailTime,jdbcType=TIMESTAMP}, #{payFailTimes,jdbcType=INTEGER},
		#{payFailTime,jdbcType=TIMESTAMP}, #{idCard,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER},
		#{isBindName,jdbcType=INTEGER}, #{isBindBank,jdbcType=INTEGER}, #{currentInterest,jdbcType=DOUBLE},
		#{currentBonus,jdbcType=DOUBLE}, #{totalInterest,jdbcType=DOUBLE}, #{totalBonus,jdbcType=DOUBLE},
		#{canWithdraw,jdbcType=DOUBLE}, #{totalTrans,jdbcType=INTEGER}, #{recommendId,jdbcType=INTEGER},
		#{createChannel,jdbcType=INTEGER}, #{userType,jdbcType=VARCHAR}, #{agentId,jdbcType=INTEGER},
		#{registerTime,jdbcType=TIMESTAMP}, #{regTerminal,jdbcType=INTEGER}, #{firstBuyTime,jdbcType=TIMESTAMP},
		#{returnPath,jdbcType=INTEGER}, #{recentBankCardId,jdbcType=INTEGER}, #{lastAppVersion,jdbcType=VARCHAR},
		#{lastAppTime,jdbcType=TIMESTAMP})
	</insert>
	<insert id="insertSelective" parameterType="com.pinting.business.model.BsUser" useGeneratedKeys="true"  keyProperty="id">
		insert into bs_user
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="nick != null">
				nick,
			</if>
			<if test="userName != null">
				user_name,
			</if>
			<if test="mobile != null">
				mobile,
			</if>
			<if test="urgentName != null">
				urgent_name,
			</if>
			<if test="urgentMobile != null">
				urgent_mobile,
			</if>
			<if test="relation != null">
				relation,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="payPassword != null">
				pay_password,
			</if>
			<if test="loginTime != null">
				login_time,
			</if>
			<if test="logoutTime != null">
				logout_time,
			</if>
			<if test="loginFailTimes != null">
				login_fail_times,
			</if>
			<if test="loginFailTime != null">
				login_fail_time,
			</if>
			<if test="loginAlwaysFailTimes != null">
				login_always_fail_times,
	      	</if>
	      	<if test="loginLockTime != null">
	        	login_lock_time,
	      	</if>
			<if test="payFailTimes != null">
				pay_fail_times,
			</if>
			<if test="payFailTime != null">
				pay_fail_time,
			</if>
			<if test="idCard != null">
				id_card,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="isBindName != null">
				is_bind_name,
			</if>
			<if test="isBindBank != null">
				is_bind_bank,
			</if>
			<if test="currentInterest != null">
				current_interest,
			</if>
			<if test="currentBonus != null">
				current_bonus,
			</if>
			<if test="totalInterest != null">
				total_interest,
			</if>
			<if test="totalBonus != null">
				total_bonus,
			</if>
			<if test="canWithdraw != null">
				can_withdraw,
			</if>
			<if test="totalTrans != null">
				total_trans,
			</if>
			<if test="recommendId != null">
				recommend_id,
			</if>
			<if test="createChannel != null">
				create_channel,
			</if>
			<if test="userType != null">
				user_type,
			</if>
			<if test="agentId != null">
				agent_id,
			</if>
			<if test="registerTime != null">
				register_time,
			</if>
			<if test="regTerminal != null">
				reg_terminal,
			</if>
			<if test="firstBuyTime != null">
				first_buy_time,
			</if>
			<if test="returnPath != null">
				return_path,
			</if>
			<if test="recentBankCardId != null">
				recent_bank_card_id,
			</if>
			<if test="lastAppVersion != null">
				last_app_version,
			</if>
			<if test="lastAppTime != null">
				last_app_time,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="nick != null">
				#{nick,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				#{userName,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				#{mobile,jdbcType=VARCHAR},
			</if>
			<if test="urgentName != null">
				#{urgentName,jdbcType=VARCHAR},
			</if>
			<if test="urgentMobile != null">
				#{urgentMobile,jdbcType=VARCHAR},
			</if>
			<if test="relation != null">
				#{relation,jdbcType=INTEGER},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="payPassword != null">
				#{payPassword,jdbcType=VARCHAR},
			</if>
			<if test="loginTime != null">
				#{loginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="logoutTime != null">
				#{logoutTime,jdbcType=TIMESTAMP},
			</if>
			<if test="loginFailTimes != null">
				#{loginFailTimes,jdbcType=INTEGER},
			</if>
			<if test="loginFailTime != null">
				#{loginFailTime,jdbcType=TIMESTAMP},
			</if>
			<if test="payFailTimes != null">
				#{payFailTimes,jdbcType=INTEGER},
			</if>
			<if test="payFailTime != null">
				#{payFailTime,jdbcType=TIMESTAMP},
			</if>
			<if test="idCard != null">
				#{idCard,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
			<if test="isBindName != null">
				#{isBindName,jdbcType=INTEGER},
			</if>
			<if test="isBindBank != null">
				#{isBindBank,jdbcType=INTEGER},
			</if>
			<if test="currentInterest != null">
				#{currentInterest,jdbcType=DOUBLE},
			</if>
			<if test="currentBonus != null">
				#{currentBonus,jdbcType=DOUBLE},
			</if>
			<if test="totalInterest != null">
				#{totalInterest,jdbcType=DOUBLE},
			</if>
			<if test="totalBonus != null">
				#{totalBonus,jdbcType=DOUBLE},
			</if>
			<if test="canWithdraw != null">
				#{canWithdraw,jdbcType=DOUBLE},
			</if>
			<if test="totalTrans != null">
				#{totalTrans,jdbcType=INTEGER},
			</if>
			<if test="recommendId != null">
				#{recommendId,jdbcType=INTEGER},
			</if>
			<if test="createChannel != null">
				#{createChannel,jdbcType=INTEGER},
			</if>
			<if test="userType != null">
				#{userType,jdbcType=VARCHAR},
			</if>
			<if test="agentId != null">
				#{agentId,jdbcType=INTEGER},
			</if>
			<if test="registerTime != null">
				#{registerTime,jdbcType=TIMESTAMP},
			</if>
			<if test="regTerminal != null">
				#{regTerminal,jdbcType=INTEGER},
			</if>
			<if test="firstBuyTime != null">
				#{firstBuyTime,jdbcType=TIMESTAMP},
			</if>
			<if test="returnPath != null">
				#{returnPath,jdbcType=INTEGER},
			</if>
			<if test="recentBankCardId != null">
				#{recentBankCardId,jdbcType=INTEGER},
			</if>
			<if test="lastAppVersion != null">
				#{lastAppVersion,jdbcType=VARCHAR},
			</if>
			<if test="lastAppTime != null">
				#{lastAppTime,jdbcType=TIMESTAMP},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.pinting.business.model.BsUserExample" resultType="java.lang.Integer">
		select count(*) from bs_user
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<select id="countByUserinfo" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer">
		select count(*)
		from bs_user c
		<where>
			<if test="mobile !=null and mobile !='' ">
				and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="status!=null and status>0 ">
				and c.status = #{status}
			</if>
			<if test="recommendId!=null and recommendId>0 ">
				and c.recommend_id = #{recommendId}
			</if>
			<if test="sEmail!=null">
				and c.email = #{sEmail}
			</if>
			<if test="sIsBindBank!=null and sIsBindBank>0 ">
				and c.is_bind_bank = #{sIsBindBank}
			</if>
			<if test="sIsBindName!=null and sIsBindName>0 ">
				and c.is_bind_name = #{sIsBindName}
			</if>
			<if test="sName!=null">
				and c.user_name like concat(concat('%', #{sName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="sNick!=null">
				and c.nick like concat(concat('%', #{sNick,jdbcType=VARCHAR}),'%')
			</if>


			<if test="sReward!=null and sReward>0 and eReward!=null and eReward>0 ">
				and c.total_bonus between #{sReward} and #{eReward}
			</if>
			<if test="sRegisterTime!=null  and eRegisterTime!=null ">
				and c.register_time between #{sRegisterTime} and #{eRegisterTime}
			</if>

		</where>

		<if test="sRecommend!=null and sRecommend>0 and eRecommend!=null and eRecommend>0">
			GROUP BY c.id HAVING (select count(*) from bs_user x where x.recommend_id=c.id) between #{sRecommend} and
			#{eRecommend}
		</if>

	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update bs_user
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.nick != null">
				nick = #{record.nick,jdbcType=VARCHAR},
			</if>
			<if test="record.userName != null">
				user_name = #{record.userName,jdbcType=VARCHAR},
			</if>
			<if test="record.mobile != null">
				mobile = #{record.mobile,jdbcType=VARCHAR},
			</if>
			<if test="record.urgentName != null">
				urgent_name = #{record.urgentName,jdbcType=VARCHAR},
			</if>
			<if test="record.urgentMobile != null">
				urgent_mobile = #{record.urgentMobile,jdbcType=VARCHAR},
			</if>
			<if test="record.relation != null">
				relation = #{record.relation,jdbcType=INTEGER},
			</if>
			<if test="record.email != null">
				email = #{record.email,jdbcType=VARCHAR},
			</if>
			<if test="record.password != null">
				password = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.payPassword != null">
				pay_password = #{record.payPassword,jdbcType=VARCHAR},
			</if>
			<if test="record.loginTime != null">
				login_time = #{record.loginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.logoutTime != null">
				logout_time = #{record.logoutTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.loginFailTimes != null">
				login_fail_times = #{record.loginFailTimes,jdbcType=INTEGER},
			</if>
			<if test="record.loginFailTime != null">
				login_fail_time = #{record.loginFailTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.loginAlwaysFailTimes != null">
        		login_always_fail_times = #{record.loginAlwaysFailTimes,jdbcType=INTEGER},
      		</if>
      		<if test="record.loginLockTime != null">
				login_lock_time = #{record.loginLockTime,jdbcType=TIMESTAMP},
      		</if>
			<if test="record.payFailTimes != null">
				pay_fail_times = #{record.payFailTimes,jdbcType=INTEGER},
			</if>
			<if test="record.payFailTime != null">
				pay_fail_time = #{record.payFailTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.idCard != null">
				id_card = #{record.idCard,jdbcType=VARCHAR},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=INTEGER},
			</if>
			<if test="record.isBindName != null">
				is_bind_name = #{record.isBindName,jdbcType=INTEGER},
			</if>
			<if test="record.isBindBank != null">
				is_bind_bank = #{record.isBindBank,jdbcType=INTEGER},
			</if>
			<if test="record.currentInterest != null">
				current_interest = #{record.currentInterest,jdbcType=DOUBLE},
			</if>
			<if test="record.currentBonus != null">
				current_bonus = #{record.currentBonus,jdbcType=DOUBLE},
			</if>
			<if test="record.totalInterest != null">
				total_interest = #{record.totalInterest,jdbcType=DOUBLE},
			</if>
			<if test="record.totalBonus != null">
				total_bonus = #{record.totalBonus,jdbcType=DOUBLE},
			</if>
			<if test="record.canWithdraw != null">
				can_withdraw = #{record.canWithdraw,jdbcType=DOUBLE},
			</if>
			<if test="record.totalTrans != null">
				total_trans = #{record.totalTrans,jdbcType=INTEGER},
			</if>
			<if test="record.recommendId != null">
				recommend_id = #{record.recommendId,jdbcType=INTEGER},
			</if>
			<if test="record.createChannel != null">
				create_channel = #{record.createChannel,jdbcType=INTEGER},
			</if>
			<if test="record.userType != null">
				user_type = #{record.userType,jdbcType=VARCHAR},
			</if>
			<if test="record.agentId != null">
				agent_id = #{record.agentId,jdbcType=INTEGER},
			</if>
			<if test="record.registerTime != null">
				register_time = #{record.registerTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.regTerminal != null">
				reg_terminal = #{record.regTerminal,jdbcType=INTEGER},
			</if>
			<if test="record.firstBuyTime != null">
				first_buy_time = #{record.firstBuyTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.returnPath != null">
				return_path = #{record.returnPath,jdbcType=INTEGER},
			</if>
			<if test="record.recentBankCardId != null">
				recent_bank_card_id = #{record.recentBankCardId,jdbcType=INTEGER},
			</if>
			<if test="record.lastAppVersion != null">
				last_app_version = #{record.lastAppVersion,jdbcType=VARCHAR},
			</if>
			<if test="record.lastAppTime != null">
				last_app_time = #{record.lastAppTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update bs_user
		set id = #{record.id,jdbcType=INTEGER},
		nick = #{record.nick,jdbcType=VARCHAR},
		user_name = #{record.userName,jdbcType=VARCHAR},
		mobile = #{record.mobile,jdbcType=VARCHAR},
		urgent_name = #{record.urgentName,jdbcType=VARCHAR},
		urgent_mobile = #{record.urgentMobile,jdbcType=VARCHAR},
		relation = #{record.relation,jdbcType=INTEGER},
		email = #{record.email,jdbcType=VARCHAR},
		password = #{record.password,jdbcType=VARCHAR},
		pay_password = #{record.payPassword,jdbcType=VARCHAR},
		login_time = #{record.loginTime,jdbcType=TIMESTAMP},
		logout_time = #{record.logoutTime,jdbcType=TIMESTAMP},
		login_fail_times = #{record.loginFailTimes,jdbcType=INTEGER},
		login_fail_time = #{record.loginFailTime,jdbcType=TIMESTAMP},
		login_always_fail_times = #{record.loginAlwaysFailTimes,jdbcType=INTEGER},
      	login_lock_time = #{record.loginLockTime,jdbcType=TIMESTAMP},
		pay_fail_times = #{record.payFailTimes,jdbcType=INTEGER},
		pay_fail_time = #{record.payFailTime,jdbcType=TIMESTAMP},
		id_card = #{record.idCard,jdbcType=VARCHAR},
		status = #{record.status,jdbcType=INTEGER},
		is_bind_name = #{record.isBindName,jdbcType=INTEGER},
		is_bind_bank = #{record.isBindBank,jdbcType=INTEGER},
		current_interest = #{record.currentInterest,jdbcType=DOUBLE},
		current_bonus = #{record.currentBonus,jdbcType=DOUBLE},
		total_interest = #{record.totalInterest,jdbcType=DOUBLE},
		total_bonus = #{record.totalBonus,jdbcType=DOUBLE},
		can_withdraw = #{record.canWithdraw,jdbcType=DOUBLE},
		total_trans = #{record.totalTrans,jdbcType=INTEGER},
		recommend_id = #{record.recommendId,jdbcType=INTEGER},
		create_channel = #{record.createChannel,jdbcType=INTEGER},
		user_type = #{record.userType,jdbcType=VARCHAR},
		agent_id = #{record.agentId,jdbcType=INTEGER},
		register_time = #{record.registerTime,jdbcType=TIMESTAMP},
		reg_terminal = #{record.regTerminal,jdbcType=INTEGER},
		first_buy_time = #{record.firstBuyTime,jdbcType=TIMESTAMP},
		return_path = #{record.returnPath,jdbcType=INTEGER},
		recent_bank_card_id = #{record.recentBankCardId,jdbcType=INTEGER},
		last_app_version = #{record.lastAppVersion,jdbcType=VARCHAR},
		last_app_time = #{record.lastAppTime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.pinting.business.model.BsUser">
		update bs_user
		<set>
			<if test="nick != null">
				nick = #{nick,jdbcType=VARCHAR},
			</if>
			<if test="userName != null">
				user_name = #{userName,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				mobile = #{mobile,jdbcType=VARCHAR},
			</if>
			<if test="urgentName != null">
				urgent_name = #{urgentName,jdbcType=VARCHAR},
			</if>
			<if test="urgentMobile != null">
				urgent_mobile = #{urgentMobile,jdbcType=VARCHAR},
			</if>
			<if test="relation != null">
				relation = #{relation,jdbcType=INTEGER},
			</if>
			<if test="email != null">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="payPassword != null">
				pay_password = #{payPassword,jdbcType=VARCHAR},
			</if>
			<if test="loginTime != null">
				login_time = #{loginTime,jdbcType=TIMESTAMP},
			</if>
			<if test="logoutTime != null">
				logout_time = #{logoutTime,jdbcType=TIMESTAMP},
			</if>
			<if test="loginFailTimes != null">
				login_fail_times = #{loginFailTimes,jdbcType=INTEGER},
			</if>
			<if test="loginFailTime != null">
				login_fail_time = #{loginFailTime,jdbcType=TIMESTAMP},
			</if>
			<if test="loginAlwaysFailTimes != null">
        		login_always_fail_times = #{loginAlwaysFailTimes,jdbcType=INTEGER},
     		</if>
      		<if test="loginLockTime != null">
        		login_lock_time = #{loginLockTime,jdbcType=TIMESTAMP},
      		</if>
			<if test="payFailTimes != null">
				pay_fail_times = #{payFailTimes,jdbcType=INTEGER},
			</if>
			<if test="payFailTime != null">
				pay_fail_time = #{payFailTime,jdbcType=TIMESTAMP},
			</if>
			<if test="idCard != null">
				id_card = #{idCard,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
			<if test="isBindName != null">
				is_bind_name = #{isBindName,jdbcType=INTEGER},
			</if>
			<if test="isBindBank != null">
				is_bind_bank = #{isBindBank,jdbcType=INTEGER},
			</if>
			<if test="currentInterest != null">
				current_interest = #{currentInterest,jdbcType=DOUBLE},
			</if>
			<if test="currentBonus != null">
				current_bonus = #{currentBonus,jdbcType=DOUBLE},
			</if>
			<if test="totalInterest != null">
				total_interest = #{totalInterest,jdbcType=DOUBLE},
			</if>
			<if test="totalBonus != null">
				total_bonus = #{totalBonus,jdbcType=DOUBLE},
			</if>
			<if test="canWithdraw != null">
				can_withdraw = #{canWithdraw,jdbcType=DOUBLE},
			</if>
			<if test="totalTrans != null">
				total_trans = #{totalTrans,jdbcType=INTEGER},
			</if>
			<if test="recommendId != null">
				recommend_id = #{recommendId,jdbcType=INTEGER},
			</if>
			<if test="createChannel != null">
				create_channel = #{createChannel,jdbcType=INTEGER},
			</if>
			<if test="userType != null">
				user_type = #{userType,jdbcType=VARCHAR},
			</if>
			<if test="agentId != null">
				agent_id = #{agentId,jdbcType=INTEGER},
			</if>
			<if test="registerTime != null">
				register_time = #{registerTime,jdbcType=TIMESTAMP},
			</if>
			<if test="regTerminal != null">
				reg_terminal = #{regTerminal,jdbcType=INTEGER},
			</if>
			<if test="firstBuyTime != null">
				first_buy_time = #{firstBuyTime,jdbcType=TIMESTAMP},
			</if>
			<if test="returnPath != null">
				return_path = #{returnPath,jdbcType=INTEGER},
			</if>
			<if test="recentBankCardId != null">
				recent_bank_card_id = #{recentBankCardId,jdbcType=INTEGER},
			</if>
			<if test="lastAppVersion != null">
				last_app_version = #{lastAppVersion,jdbcType=VARCHAR},
			</if>
			<if test="lastAppTime != null">
				last_app_time = #{lastAppTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.pinting.business.model.BsUser">
		update bs_user
		set nick = #{nick,jdbcType=VARCHAR},
		user_name = #{userName,jdbcType=VARCHAR},
		mobile = #{mobile,jdbcType=VARCHAR},
		urgent_name = #{urgentName,jdbcType=VARCHAR},
		urgent_mobile = #{urgentMobile,jdbcType=VARCHAR},
		relation = #{relation,jdbcType=INTEGER},
		email = #{email,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		pay_password = #{payPassword,jdbcType=VARCHAR},
		login_time = #{loginTime,jdbcType=TIMESTAMP},
		logout_time = #{logoutTime,jdbcType=TIMESTAMP},
		login_fail_times = #{loginFailTimes,jdbcType=INTEGER},
		login_fail_time = #{loginFailTime,jdbcType=TIMESTAMP},
      	login_always_fail_times = #{loginAlwaysFailTimes,jdbcType=INTEGER},
      	login_lock_time = #{loginLockTime,jdbcType=TIMESTAMP},
		pay_fail_times = #{payFailTimes,jdbcType=INTEGER},
		pay_fail_time = #{payFailTime,jdbcType=TIMESTAMP},
		id_card = #{idCard,jdbcType=VARCHAR},
		status = #{status,jdbcType=INTEGER},
		is_bind_name = #{isBindName,jdbcType=INTEGER},
		is_bind_bank = #{isBindBank,jdbcType=INTEGER},
		current_interest = #{currentInterest,jdbcType=DOUBLE},
		current_bonus = #{currentBonus,jdbcType=DOUBLE},
		total_interest = #{totalInterest,jdbcType=DOUBLE},
		total_bonus = #{totalBonus,jdbcType=DOUBLE},
		can_withdraw = #{canWithdraw,jdbcType=DOUBLE},
		total_trans = #{totalTrans,jdbcType=INTEGER},
		recommend_id = #{recommendId,jdbcType=INTEGER},
		create_channel = #{createChannel,jdbcType=INTEGER},
		user_type = #{userType,jdbcType=VARCHAR},
		agent_id = #{agentId,jdbcType=INTEGER},
		register_time = #{registerTime,jdbcType=TIMESTAMP},
		reg_terminal = #{regTerminal,jdbcType=INTEGER},
		first_buy_time = #{firstBuyTime,jdbcType=TIMESTAMP},
		return_path = #{returnPath,jdbcType=INTEGER},
		recent_bank_card_id = #{recentBankCardId,jdbcType=INTEGER},
		last_app_version = #{lastAppVersion,jdbcType=VARCHAR},
		last_app_time = #{lastAppTime,jdbcType=TIMESTAMP}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<resultMap id="BsUserAssetResultMap" type="com.pinting.business.model.vo.BsUserAssetVO" extends="BaseResultMap">
		<result column="account_id" property="accountId" />
		<result column="total_balance" property="totalBalance" />
		<result column="sum_balance" property="sumBalance" />
		<result column="current_balance" property="currentBalance" />
		<result column="cardNo" property="cardNo" />
		<result column="bankStatus" property="bankStatus" />
		<result column="bindTime" property="bindTime" />
		<result column="cardOwner" property="cardOwner" />
		<result column="recommendNum" property="recommendNum" />
		<result column="dafyStatus" property="dafyStatus" />
		<result column="investNum" property="investNum" />
		<result column="bind_fail_reson" property="bindFailReson" />
		<result column="agent_name" property="agentName" />
		<result column="bank_card_num" property="bankCardNum" />
		<result column="bank_name" property="bankName" />
		<result column="total_principal" property="totalPrincipal" />
		<result column="bankcard_count" property="bankcardCount" />
		<result column="available_balance" property="availableBalance" />
		<result column="investment_times" property="investmentTimes" />
		<result column="annualized_investment" property="annualizedInvestment" />
		<result column="stock_assets" property="stockAssets" />
		<result column="recent_buyTime" property="recentBuyTime" />
		<result column="three_investment_times" property="threeInvestmentTimes" />
		<result column="recommendMobile" property="recommendMobile" />
		<result column="is_first" property="isFirst" />
		<result column="account_balance" property="accountBalance" />
		<result column="content" property="content" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="amount_of_payment" property="amountOfPayment" />
		<result column="reserved_mobile" property="reservedMobile" />
		<result column="real_balance" property="realBalance" />
	</resultMap>
	<select id="selectUserAssetByUserId" resultMap="BsUserAssetResultMap" parameterType="java.lang.Integer">
		select
		c.*,
		a.id as account_Id,
		d.status dafyStatus,
		SUM(
 			CASE WHEN b.product_type = 'AUTH_YUN' THEN b.open_balance
 			 WHEN b.product_type = 'RED' THEN b.open_balance
 			 WHEN b.product_type = 'AUTH_ZSD' THEN b.open_balance
 			 WHEN b.product_type = 'RED_ZSD' THEN b.open_balance
 			 WHEN b.product_type = 'AUTH_7' THEN b.open_balance
 			 WHEN b.product_type = 'RED_7' THEN b.open_balance
 			 WHEN b.product_type = 'AUTH_FREE' THEN b.open_balance
 			 WHEN b.product_type = 'RED_FREE' THEN b.open_balance
 			ELSE b.balance END
 		) as total_balance,
		(select count(*) from bs_sub_account sa where sa.account_id = b.account_id and sa.status in (2,7) AND (sa.product_type='AUTH'
		OR sa.product_type='REG' or sa.product_type = 'AUTH_YUN' or sa.product_type = 'AUTH_ZSD' or sa.product_type = 'AUTH_7' or sa.product_type = 'AUTH_FREE')) investNum,
		(select count(*) from bs_bank_card k where k.user_id = c.id and k.`status` = '1' ) bankcard_count
		from
		bs_account a, bs_user c left join dafy_user_ext d on c.id = d.user_id ,bs_sub_account b
		where
		c.id=a.user_id
		and a.id=b.account_id
		and c.id=#{userId}
		and (
		(b.status=1 and b.product_type = 'JSH')
		or (b.status=1 and b.product_type = 'JLJ')
		or ((b.status=1 and b.product_type = 'DEP_JSH'))
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'REG')
		or ((b.status=2 or b.status=3 or b.status=4) and b.product_type = 'REG_D')
		or ((b.status=2 or b.status=3 or b.status=4) and b.product_type = 'AUTH')
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'AUTH_YUN')
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'RED')
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'RED_ZSD')
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'RED_7')
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'RED_FREE')
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'AUTH_ZSD')
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'AUTH_7')
		or ((b.status=2 or b.status=3 or b.status=7) and b.product_type = 'AUTH_FREE')
		)
	</select>

	<resultMap id="BsUserBonusResultMap" type="com.pinting.business.model.vo.BsUserBonusVO">
		<result column="id" property="id" jdbcType="INTEGER" />
		<result column="nick" property="nick" jdbcType="VARCHAR" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="recommend_id" property="recommendId" jdbcType="INTEGER" />
		<result column="valid_product_amount" property="validProductAmount" />
	</resultMap>
	<select id="selectRecommendedUserAndInvestAmount" resultMap="BsUserBonusResultMap">
		select
		sum(c.balance) as valid_product_amount,
		a.id,
		a.nick,
		a.user_name,
		a.mobile,
		a.recommend_id
		from
		bs_user a,
		bs_account b,
		bs_sub_account c
		where
		a.id=b.user_id and
		b.id=c.account_id and
		c.product_type = 'REG' and
		(c.`status`=2 or c.`status`=3) and
		a.recommend_id
		in
		(SELECT recommend_id from bs_user where recommend_id!='' GROUP BY recommend_id)
		GROUP BY a.id
	</select>

	<update id="updateBonusById" parameterType="com.pinting.business.model.BsUser">
		update bs_user
		<set>
			<if test="totalBonus != null">
				total_bonus = total_bonus+#{totalBonus},
			</if>
			<if test="currentBonus != null">
				current_bonus = current_bonus+#{currentBonus},
			</if>
			<if test="canWithdraw != null">
				can_withdraw = can_withdraw+#{canWithdraw},
			</if>
		</set>
		where id=#{id}
	</update>

	<update id="modifyUserAmountIncrement" parameterType="com.pinting.business.model.BsUser">
		update bs_user
		<set>
			<if test="totalInterest != null">
				total_interest = total_interest+#{totalInterest},
			</if>
			<if test="currentInterest != null">
				current_interest = current_interest+#{currentInterest},
			</if>
		</set>
		where id=#{id}
	</update>

	<resultMap type="com.pinting.business.model.vo.BsStatisticsVO" id="userBuyMessageResult" extends="BaseResultMap">
		<result column="term" property="term" />
		<result column="rate" property="rate" />
		<result column="buyBankCard" property="buyBankCard" />
		<result column="bindBankCard" property="bindBankCard" />
		<result column="bindBankName" property="bindBankName" />
		<result column="productName" property="productName" />
		<result column="openTime" property="openTime" />
		<result column="investEndTime" property="investEndTime" />
		<result column="accountStatus" property="accountStatus" />
		<result column="agentName" property="agentName" />
		<result column="settlementAmount" property="settlementAmount" />
		<result column="orderNo" property="orderNo" />
		<result column="returnCode" property="returnCode" />
		<result column="returnMsg" property="returnMsg" />
		<result column="accountType" property="accountType" />
		<result column="orderStatus" property="orderStatus" />
		<result column="bankName" property="bankName" />
		<result column="recommendId" property="recommendId" />
		<result column="agentId" property="agentId" />
		<result column="bonus" property="bonus" />
		<result column="property_symbol" property="propertySymbol" jdbcType="VARCHAR" />
		<result column="property_name" property="propertyName" jdbcType="VARCHAR" />
		<result column="loan_time" property="loanTime" jdbcType="TIMESTAMP" />
		<result column="openBalance" property="openBalance" />
	</resultMap>

	<select id="selectUserBuyMessageList" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultMap="userBuyMessageResult">
			
		select 
			tt.id,
			tt.nick,
			tt.preMobile,
			tt.afterMobile,
			tt.userName,
			tt.idCard,
			tt.recommendId,
			tt.agentId,
			tt.term,
			tt.productName,
			tt.rate,
			tt.buyBankCard,
			tt.balance as balance,
			tt.openBalance openBalance,
			tt.bindBankCard,
			tt.bindBankName,
			tt.openTime,
			tt.investEndTime,
			tt.accountStatus,
			tt.subAccountId,
			tt.buyBankName,
			tt.orderNo,
			tt.returnCode,
			tt.returnMsg,
			tt.agentName,
			tt.bankName,
			tt.property_symbol
		from (
			SELECT
			u.id id,
			u.nick nick,
			SUBSTRING(u.mobile,1,3) preMobile,
			SUBSTRING(u.mobile,8,4) afterMobile,
			u.user_name userName,
			u.id_card idCard,
			u.recommend_id recommendId,
			u.agent_id agentId,
			p.term term,
			s.product_name productName,
			s.product_rate rate,
			s.bank_card buyBankCard,
			s.balance balance,
			s.open_balance openBalance,
			b.card_no bindBankCard,
			b.bank_name bindBankName,
			s.open_time openTime,
			s.last_finish_interest_date investEndTime,
			s.status accountStatus,
			s.id subAccountId,
			<!-- s.sm bonus, -->
			od.bank_name buyBankName,
			od.order_no orderNo,
			od.return_code returnCode,
			od.return_msg returnMsg,
			ag.agent_name agentName,
			bk.name bankName,
			d.property_symbol
			from bs_account a, bs_user u left join bs_agent ag on u.agent_id=ag.id,bs_sub_account s,
			bs_bank_card b , bs_product p left join bs_property_info d on p.property_id = d.id,bs_pay_orders od left join bs_bank bk on
			od.bank_id = bk.id
			where
			u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.status in (1,5)
			and s.product_id = p.id and od.sub_account_id=s.id
			<!-- 投资购买 1、 CARD_BUY_PRODUCT 卡购买; 2、BALANCE_BUY_PRODUCT 余额购买 -->
			and od.trans_type in('CARD_BUY_PRODUCT', 'BALANCE_BUY_PRODUCT') and od.account_type = 1
			
			
			<if test="productId != null and productId > 0  ">
				and p.id = #{productId}
			</if>
			<if test="orderNo != null and orderNo != '' ">
				and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
			</if>
			<if test="userName != null and userName != '' ">
				and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="idCard != null and idCard != '' ">
				and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="buyBankCard != null and buyBankCard != '' ">
				and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="bindBankCard != null and bindBankCard != '' ">
				and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="accountStatus == null or 0 >= accountStatus">
				and s.`status` in (2,3,4,5,7)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and s.status = #{accountStatus}
			</if>
			<if test="term != null and term != 0 ">
				and p.term = #{term}
			</if>
			<if test="productCode != null and productCode != '' ">
				and s.product_id = #{productCode}
			</if>
			<if test="beginAmount != null and beginAmount > 0 ">
				and s.balance >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= s.balance
			</if>
			<if test="beginTime != null and endTime != null and beginTime != '' and endTime!= '' ">
				and s.interest_begin_date between #{beginTime} and #{endTime}
			</if>
			<if
				test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
				and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
			</if>
			<if test="agentName != null and agentName == 'NO' ">
				and ag.agent_name IS NULL
			</if>
			<if test="agentName != null and agentName != 'NO'">
				and ag.agent_name = #{agentName}
			</if>
			<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
				and od.bank_id is null
			</if>
			<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1'">
				and od.bank_id = #{buyBankType}
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
				and (d.property_symbol = #{propertySymbol} OR d.property_symbol IS NULL )
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
				and d.property_symbol = #{propertySymbol}
			</if>
			<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
				and u.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
			</if>
			<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
				and u.agent_id is null
			</if>
			<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
				and (u.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
				or u.agent_id is null)
			</if>
			<if test="rate != null and rate != '' ">
				and p.base_rate = #{rate}
			</if>
			<if test="startRate != null and startRate > 0 ">
				and s.product_rate >= #{startRate}
			</if>
			<if test="endRate != null and endRate > 0 ">
				and #{endRate} >= s.product_rate
			</if>
			GROUP BY s.id
		)	tt
		WHERE
		(tt.property_symbol is NULL OR tt.property_symbol IN ('7_DAI', 'YUN_DAI'))
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			order by ${orderField} ${orderDirection}
		</if>
		<include refid="sql-global.pagination" />
	</select>


	<select id="selectUserBuyMessageListForZan" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultMap="userBuyMessageResult">
		SELECT * FROM (
		select
		tt.id,
		tt.nick,
		tt.preMobile,
		tt.afterMobile,
		tt.userName,
		tt.idCard,
		tt.recommendId,
		tt.agentId,
		tt.term,
		tt.productName,
		tt.rate,
		tt.buyBankCard,
		CASE WHEN tt.property_symbol = 'ZAN' THEN
		CASE WHEN bb.r_amount IS NULL THEN 0.0
		ELSE bb.r_amount END
		ELSE
		tt.balance
		END balance,
		tt.openBalance openBalance,
		tt.bindBankCard,
		tt.bindBankName,
		tt.openTime,
		tt.investEndTime,
		tt.accountStatus,
		tt.subAccountId,
		tt.buyBankName,
		tt.orderNo,
		tt.returnCode,
		tt.returnMsg,
		tt.agentName,
		tt.bankName,
		tt.property_symbol
		from (
		SELECT
		u.id id,
		u.nick nick,
		SUBSTRING(u.mobile,1,3) preMobile,
		SUBSTRING(u.mobile,8,4) afterMobile,
		u.user_name userName,
		u.id_card idCard,
		u.recommend_id recommendId,
		u.agent_id agentId,
		p.term term,
		s.product_name productName,
		s.product_rate rate,
		s.bank_card buyBankCard,
		s.balance balance,
		s.open_balance openBalance,
		b.card_no bindBankCard,
		b.bank_name bindBankName,
		s.open_time openTime,
		s.last_finish_interest_date investEndTime,
		s.status accountStatus,
		s.id subAccountId,
		<!-- s.sm bonus, -->
		od.bank_name buyBankName,
		od.order_no orderNo,
		od.return_code returnCode,
		od.return_msg returnMsg,
		ag.agent_name agentName,
		bk.name bankName,
		d.property_symbol
		from bs_account a, bs_user u left join bs_agent ag on u.agent_id=ag.id,bs_sub_account s LEFT JOIN bs_sub_account_pair pair ON pair.auth_account_id = s.id,
		bs_bank_card b , bs_product p left join bs_property_info d on p.property_id = d.id,bs_pay_orders od left join bs_bank bk on
		od.bank_id = bk.id
		where
		u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.status in (1,5)
		and s.product_id = p.id and od.sub_account_id=s.id
		<!-- 投资购买 1、 CARD_BUY_PRODUCT 卡购买; 2、BALANCE_BUY_PRODUCT 余额购买 -->
		and od.trans_type in('CARD_BUY_PRODUCT', 'BALANCE_BUY_PRODUCT') and od.account_type = 1
		and  d.property_symbol != 'YUN_DAI_SELF'
		
		<if test="productId != null and productId > 0  ">
			and p.id = #{productId}
		</if>
		<if test="orderNo != null and orderNo != '' ">
			and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard != null and idCard != '' ">
			and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBankCard != null and buyBankCard != '' ">
			and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankCard != null and bindBankCard != '' ">
			and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="accountStatus == null or 0 >= accountStatus">
			and s.`status` in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null and accountStatus > 0 ">
			and s.status = #{accountStatus}
		</if>
		<if test="term != null and term != 0 ">
			and p.term = #{term}
		</if>
		<if test="productCode != null and productCode != '' ">
			and s.product_id = #{productCode}
		</if>
		<if test="propertySymbol != 'ZAN'">
			<if test="beginAmount != null and beginAmount > 0 ">
				and s.balance >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= s.balance
			</if>
		</if>
		<if test="beginTime != null and endTime != null and beginTime != '' and endTime!= '' ">
			and s.interest_begin_date between #{beginTime} and #{endTime}
		</if>
		<if test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
			and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
		</if>
		<if test="agentName != null and agentName == 'NO' ">
			and ag.agent_name IS NULL
		</if>
		<if test="agentName != null and agentName != 'NO'">
			and ag.agent_name = #{agentName}
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
			and od.bank_id is null
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1'">
			and od.bank_id = #{buyBankType}
		</if>
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
			and (d.property_symbol = #{propertySymbol} OR d.property_symbol IS NULL )
		</if>
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
			and d.property_symbol = #{propertySymbol}
		</if>
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and u.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and u.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (u.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or u.agent_id is null)
		</if>
		<if test="rate != null and rate != '' ">
			and p.base_rate = #{rate}
		</if>
		<if test="startRate != null and startRate > 0 ">
			and s.product_rate >= #{startRate}
		</if>
		<if test="endRate != null and endRate > 0 ">
			and #{endRate} >= s.product_rate
		</if>
		GROUP BY s.id
		)	tt
		LEFT JOIN
		(
		select  SUM(r.total_amount) r_amount,bp.auth_account_id a_sub,r.bs_sub_account_id r_sub from ln_loan_relation r, ln_loan l,bs_sub_account_pair bp where
		bp.reg_d_account_id=r.bs_sub_account_id and
		r.loan_id=l.id and r.`status`!='FAIL' and r.`status`!='PAYING' and r.total_amount>0 GROUP BY r.bs_sub_account_id
		) bb on tt.subAccountId=bb.a_sub
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'ZAN'">
			<where>
				<if test="beginAmount != null and beginAmount > 0 ">
					and bb.r_amount >= #{beginAmount}
				</if>
				<if test="endAmount != null and endAmount > 0 ">
					and #{endAmount} >= bb.r_amount
				</if>
			</where>
		</if>
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			order by ${orderField} ${orderDirection}
		</if>
		) aaa
		<include refid="sql-global.pagination" />
	</select>

	<select id="countUserBuyMessageList" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM (
			SELECT
			od.order_no orderNo,
			d.property_symbol
			from bs_account a, bs_user u left join bs_agent ag on u.agent_id=ag.id,bs_sub_account s,
			bs_bank_card b , bs_product p left join bs_property_info d on p.property_id = d.id,bs_pay_orders od LEFT JOIN bs_bank bk ON
			od.bank_id = bk.id
			where
			u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.status in (1,5)
			and s.product_id = p.id and od.sub_account_id=s.id
			and od.trans_type in('CARD_BUY_PRODUCT', 'BALANCE_BUY_PRODUCT') and od.account_type = 1
			<if test="orderNo != null and orderNo != '' ">
				and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
			</if>
			<if test="userName != null and userName != '' ">
				and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="idCard != null and idCard != '' ">
				and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="buyBankCard != null and buyBankCard != '' ">
				and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="bindBankCard != null and bindBankCard != '' ">
				and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="accountStatus == null or 0 >= accountStatus">
				and s.`status` in (2,3,4,5,7,8)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and s.status = #{accountStatus}
			</if>
			<if test="term != null and term != 0 ">
				and p.term = #{term}
			</if>
			<if test="productCode != null and productCode != '' ">
				and s.product_id = #{productCode}
			</if>
			<if test="beginAmount != null and beginAmount > 0 ">
				and s.balance >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= s.balance
			</if>
			<if test="beginTime != null and endTime != null and beginTime != '' and endTime != '' ">
				and s.interest_begin_date between #{beginTime} and #{endTime}
			</if>
			<if
				test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
				and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
			</if>
			<if test="agentName != null and agentName == 'NO' ">
				and ag.agent_name IS NULL
			</if>
			<if test="agentName != null and agentName != 'NO'">
				and ag.agent_name = #{agentName}
			</if>
			<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
				and od.bank_id is null
			</if>
			<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1'">
				and od.bank_id = #{buyBankType}
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
				and (d.property_symbol = #{propertySymbol} OR d.property_symbol IS NULL )
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
				and d.property_symbol = #{propertySymbol}
			</if>
			<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
				and u.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
			</if>
			<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
				and u.agent_id is null
			</if>
			<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
				and (u.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
				or u.agent_id is null)
			</if>
			<if test="rate != null and rate != '' ">
				and s.product_rate = #{rate}
			</if>
			<if test="startRate != null and startRate > 0 ">
				and s.product_rate >= #{startRate}
			</if>
			<if test="endRate != null and endRate > 0 ">
				and #{endRate} >= p.base_rate
			</if>
			GROUP BY s.id
		) bb
		WHERE
		(bb.property_symbol is NULL OR bb.property_symbol IN ('7_DAI', 'YUN_DAI'))
	</select>
	<select id="selectUserBuySumBalance" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Double">
		SELECT sum(balance) from (
			select tt.balance as balance, tt.orderNo
			from (
		
					SELECT
					s.balance,od.order_no orderNo,d.property_symbol,
					s.id subAccountId
					from bs_account a, bs_user u, bs_sub_account s , bs_bank_card b , bs_product p left join bs_property_info d on
					p.property_id = d.id,bs_pay_orders od
					where
					u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.status in (1,5)
					and s.product_id = p.id and od.sub_account_id=s.id
					and od.trans_type in('CARD_BUY_PRODUCT', 'BALANCE_BUY_PRODUCT') and od.account_type = 1
					<if test="userName != null and userName != '' ">
						and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
					</if>
					<if test="mobile != null and mobile != '' ">
						and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
					</if>
					<if test="idCard != null and idCard != '' ">
						and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
					</if>
					<if test="buyBankCard != null and buyBankCard != '' ">
						and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
					</if>
					<if test="bindBankCard != null and bindBankCard != '' ">
						and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
					</if>
					<if test="accountStatus != null and accountStatus > 0 ">
						and s.status = #{accountStatus}
					</if>
					<if test="term != null and term != 0">
						and p.term = #{term}
					</if>
					<if test="beginAmount != null and beginAmount > 0 ">
						and s.balance >= #{beginAmount}
					</if>
					<if test="endAmount != null and endAmount > 0 ">
						and #{endAmount} >= s.balance
					</if>
					<if test="beginTime != null and endTime != null and beginTime != '' and endTime!= '' ">
						and s.interest_begin_date between #{beginTime} and #{endTime}
					</if>
					<if test="productCode != null ">
						and s.product_id = #{productCode}
					</if>
					<if
						test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
						and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
					</if>
					<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
						and od.bank_id is null
					</if>
					<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1'">
						and od.bank_id = #{buyBankType}
					</if>
					<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
						and (d.property_symbol = #{propertySymbol} OR d.property_symbol IS NULL )
					</if>
					<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
						and d.property_symbol = #{propertySymbol}
					</if>
					<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
						and u.agent_id in
						<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
							#{agentId}
						</foreach>
					</if>
					<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
						and u.agent_id is null
					</if>
					<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
						and (u.agent_id in
						<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
							#{agentId}
						</foreach>
						or u.agent_id is null)
					</if>
					<if test="rate != null and rate != '' ">
						and p.base_rate = #{rate}
					</if>
					<if test="startRate != null and startRate > 0 ">
						and s.product_rate >= #{startRate}
					</if>
					<if test="endRate != null and endRate > 0 ">
						and #{endRate} >= s.product_rate
					</if>
					GROUP BY s.id
			)	tt
			WHERE
			(tt.property_symbol is NULL OR tt.property_symbol IN ('7_DAI', 'YUN_DAI'))
		) test
	</select>


	<resultMap type="com.pinting.business.model.vo.BsStatisticsVO" id="investMatureWarmList" extends="BaseResultMap">
		<result column="subAccountId" property="subAccountId" />
		<result column="term" property="term" />
		<result column="rate" property="rate" />
		<result column="buyBankCard" property="buyBankCard" />
		<result column="bindBankCard" property="bindBankCard" />
		<result column="bindBankName" property="bindBankName" />
		<result column="productName" property="productName" />
		<result column="openTime" property="openTime" />
		<result column="investEndTime" property="investEndTime" />
		<result column="accountStatus" property="accountStatus" />
		<result column="startRate" property="startRate" />
		<result column="endRate" property="endRate" />
		<result column="terminal_type" property="terminalType" />
	</resultMap>

	<select id="selectInvestMatureWarmList" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultMap="userBuyMessageResult">
		select
		u.mobile mobile,
		u.user_name userName,
		u.id_card idCard,
		p.term term,
		s.id subAccountId,
		s.product_name productName,
		s.product_rate rate,
		s.bank_card buyBankCard,
		s.balance balance,
		b.card_no bindBankCard,
		b.bank_name bindBankName,
		s.open_time openTime,
		s.last_finish_interest_date investEndTime,
		s.status accountStatus,
		s.accumulation_inerest accmulationInerest,
		bpi.property_name
		from bs_account a, bs_user u, bs_sub_account s , bs_bank_card b , bs_product p, 
		bs_property_info bpi
		where
		u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.is_first = 1 and b.`status` = 1
		and s.product_id = p.id and s.`status`=7 and NOW() > s.last_finish_interest_date
		AND bpi.id = p.property_id
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="settleAccountsBeginTime != null ">
			and s.last_finish_interest_date >= #{settleAccountsBeginTime}
		</if>
		<if test="settleAccountsEndTime != null ">
			and #{settleAccountsEndTime} > s.last_finish_interest_date
		</if>
		<include refid="sql-global.pagination" />
	</select>

	<select id="countInvestMatureWarmList" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Integer">
		select
		count(*)
		from bs_account a, bs_user u, bs_sub_account s , bs_bank_card b , bs_product p
		where
		u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.is_first = 1 and b.`status` = 1
		and s.product_id = p.id and s.`status`=7 and NOW() > s.last_finish_interest_date
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="settleAccountsBeginTime != null ">
			and s.last_finish_interest_date >= #{settleAccountsBeginTime}
		</if>
		<if test="settleAccountsEndTime != null ">
			and #{settleAccountsEndTime} > s.last_finish_interest_date
		</if>
	</select>

	<select id="countInvestMatureWarm" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Integer">
  	  <![CDATA[

  	  select
  	  		 count(*)
		from bs_account a, bs_user u, bs_sub_account s , bs_bank_card b , bs_product p
   		where
			 u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.is_first = 1 and b.`status` = 1
			 and s.product_id = p.id and s.`status`=7 and s.last_finish_interest_date < #{endTime}

        ]]>
	</select>

	<select id="selectUserForBindCardTimeout" parameterType="java.util.Date" resultMap="BaseResultMap">
  	<![CDATA[

  	select
  	  	u.*
	from
		bs_user u, dafy_user_ext d
   	where
   		u.id=d.user_id and
   		d.create_time < #{createTime} and
   		d.status=3

        ]]>
	</select>
	<select id="sumCanWithdraw" resultType="java.lang.Double">

		select
		sum(can_withdraw)
		from bs_user
	</select>

	<select id="selectSubUserByUserId" resultMap="BaseResultMap" parameterType="java.util.Map">
		select
		<include refid="Base_Column_List" />
		from bs_user
		<where>
			recommend_id=#{userId , jdbcType=INTEGER}
		</where>
		order by register_time desc
		limit #{start , jdbcType=INTEGER}, #{pageSize , jdbcType=INTEGER}
	</select>

	<select id="selectByDafyUserId" resultMap="VoResultMap" parameterType="java.lang.String">
		select
		*
		from
		bs_user u, dafy_user_ext d
		where
		u.id = d.user_id and d.dafy_user_id = #{_parameter}
	</select>

	<update id="updateCurrInterestById" parameterType="com.pinting.business.model.BsUser">
		update
		bs_user
		set
		current_interest = current_interest+#{currentInterest}
		where
		id=#{id};
	</update>

	<resultMap id="AgentUserfoResultMap" type="com.pinting.business.model.vo.AgentUserInfoVO" extends="BaseResultMap">
		<result column="transItemCount" property="transItemCount" jdbcType="INTEGER" />
		<result column="transAmountCount" property="transAmountCount" jdbcType="DOUBLE" />
	</resultMap>
	<select id="selectAgentUserList" parameterType="map" resultMap="AgentUserfoResultMap">
		SELECT f.id,f.user_name, f.mobile,f.register_time, f.agent_id, g.cooo AS transItemCount, (IFNULL(g.balance1,0)) AS transAmountCount from bs_user f LEFT JOIN
		(
		SELECT c.agent_id, c.id,c.user_name, c.mobile,c.register_time, (count(*))as transItemCount,
		SUM(e.open_balance) AS balance1,
		(SELECT COUNT(bsa.id) as aount FROM bs_sub_account bsa WHERE bsa.product_type IN ('REG','AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'AUTH_FREE')  AND bsa.`status` NOT IN (1,6) AND bsa.account_id = d.id) AS cooo
		from bs_user c, bs_account d, bs_sub_account e
		where c.id=d.user_id and d.id=e.account_id and
		(e.product_type='REG' OR e.product_type='AUTH_YUN' OR e.product_type='AUTH_ZSD' OR e.product_type='AUTH_7' OR e.product_type='AUTH_FREE'
		OR e.product_type='RED_ZSD' OR e.product_type='RED_7'  OR e.product_type='RED'  OR e.product_type='RED_FREE')
		and e.`status` IN (2,3,4,5,7)
		and c.agent_id = #{record.agentId}
		GROUP BY c.id
		) g on f.id=g.id where f.agent_id = #{record.agentId}
		<if test="investFlag == 'true'">
			and g.transItemCount>=1
		</if>
		<if test="investFlag == 'false'">
            <![CDATA[and (g.transItemCount<1 or g.transItemCount is null)]]>
		</if>
		<if test="record.mobile != null and record.mobile != ''">
			and f.mobile=#{record.mobile}
		</if>
		<if test="record.userName != null and record.userName != ''">
			and f.user_name=#{record.userName}
		</if>
		<if test="sregistTime != null and sregistTime != ''">
			and f.register_time>=#{sregistTime}
		</if>
		<if test="eregistTime != null and eregistTime != ''">
            <![CDATA[and f.register_time<=#{eregistTime}]]>
		</if>
		limit #{record.start , jdbcType=INTEGER}, #{record.numPerPage , jdbcType=INTEGER}
	</select>
	<select id="countAgentUserList" parameterType="map" resultType="java.lang.Integer">
		SELECT count(*) from
		(
		SELECT f.id,f.user_name, f.mobile,f.register_time, f.agent_id,g.transItemCount, g.transAmountCount from bs_user
		f LEFT JOIN
		(
		SELECT c.agent_id, c.id,c.user_name, c.mobile,c.register_time, count(*) as transItemCount, sum(e.open_balance) as
		transAmountCount from bs_user c, bs_account d, bs_sub_account e
		where c.id=d.user_id and d.id=e.account_id and
		(e.product_type='REG' OR e.product_type='AUTH_YUN' OR e.product_type='AUTH_ZSD' OR e.product_type='AUTH_7' OR e.product_type='AUTH_FREE')
		and e.`status` IN (2,3,4,5,7)
		and c.agent_id = #{record.agentId}
		GROUP BY c.id
		) g on f.id=g.id where f.agent_id = #{record.agentId}
		<if test="investFlag == 'true'">
			and g.transItemCount>=1
		</if>
		<if test="investFlag == 'false'">
            <![CDATA[and (g.transItemCount<1 or g.transItemCount is null)]]>
		</if>
		<if test="record.mobile != null and record.mobile != ''">
			and f.mobile=#{record.mobile}
		</if>
		<if test="record.userName != null and record.userName != ''">
			and f.user_name=#{record.userName}
		</if>
		<if test="sregistTime != null and sregistTime != ''">
			and f.register_time>=#{sregistTime}
		</if>
		<if test="eregistTime != null and eregistTime != ''">
            <![CDATA[and f.register_time<=#{eregistTime}]]>
		</if>
		) i
	</select>


	<!-- 旧投资回款sql -->
	<!-- <select id="selectUserInvestmentPaybackList" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultMap="userBuyMessageResult"> 
		SELECT u.nick nick, u.mobile mobile, u.user_name userName, u.id_card idCard, u.return_path returnPath, p.term term, s.product_name 
		productName, s.product_rate rate, s.bank_card buyBankCard, s.balance balance, s.accumulation_inerest accmulationInerest, 
		(s.balance + s.accumulation_inerest) settlementAmount, b.card_no bindBankCard, b.bank_name bindBankName, s.open_time openTime, 
		s.last_finish_interest_date investEndTime, s.status accountStatus, bank.name buyBankName, od.order_no orderNo, od.account_type 
		accountType, od.return_msg returnMsg, od.status orderStatus, ag.agent_name agentName, ag.id agentId from bs_account a, bs_user 
		u left join bs_agent ag on u.agent_id = ag.id, bs_sub_account s , bs_bank_card b , bs_product p , bs_pay_orders od left join 
		bs_bank bank on od.bank_id = bank.id where u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.is_first = 
		1 and b.status in (1,5) and s.product_id = p.id and od.sub_account_id=s.id and od.account_type = 1 and curdate() >= s.last_finish_interest_date 
		and od.trans_type != 'RETURN_2_USER_BANK_CARD' and s.status != 1 <if test="orderNo != null and orderNo != '' " > and od.order_no 
		like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%') </if> <if test="userName != null and userName != '' " > and u.user_name 
		like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%') </if> <if test="mobile != null and mobile != '' " > and u.mobile 
		like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%') </if> <if test="idCard != null and idCard != '' " > and u.id_card 
		like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%') </if> <if test="buyBankCard != null and buyBankCard != '' " > and 
		s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%') </if> <if test="bindBankCard != null and bindBankCard 
		!= '' " > and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%') </if> <if test="bindBankName != null 
		and bindBankName != '' " > and b.bank_name like concat(concat('%', #{bindBankName,jdbcType=VARCHAR}),'%') </if> <if test="agentName 
		!= null and agentName != '' " > and ag.agent_name like concat(concat('%', #{agentName,jdbcType=VARCHAR}),'%') </if> <if test="agentId 
		!= null and agentId != '' " > and ag.id = #{agentId} </if> <if test="beginAmount != null and beginAmount > 0 " > and s.balance 
		>= #{beginAmount} </if> <if test="endAmount != null and endAmount > 0 " > and #{endAmount} >= s.balance </if> <if test="beginTime 
		!= null " > and s.open_time >= #{beginTime} </if> <if test="endTime != null " > and #{endTime} > s.open_time </if> <if test="settleAccountsBeginTime 
		!= null " > and s.last_finish_interest_date >= #{settleAccountsBeginTime} </if> <if test="settleAccountsEndTime != null " 
		> and #{settleAccountsEndTime} > s.last_finish_interest_date </if> <if test="productId != null and productId != '' " > and 
		p.id = #{productId} </if> <if test="accountStatus == null or 0 >= accountStatus"> and s.status in (2,3,4,5,6,7) </if> <if 
		test="accountStatus != null and accountStatus > 0 " > and s.status = #{accountStatus} </if> <if test="beginSettlementAmount 
		!= null " > and (s.balance + s.accumulation_inerest) >= #{beginSettlementAmount} </if> <if test="endSettlementAmount != null 
		" > and #{endSettlementAmount} >= (s.balance + s.accumulation_inerest) </if> <if test="term != null and term > 0 " > and 
		p.term = #{term} </if> <if test="rate != null and rate != '' " > and p.base_rate = #{rate} </if> <if test="buyBankType != 
		null and buyBankType != '' and buyBankType =='-1'"> and od.bank_id is null </if> <if test="buyBankType != null and buyBankType 
		!= '' and buyBankType !='-1'"> and od.bank_id = cast(#{buyBankType} as SIGNED INTEGER) </if> group by od.id <if test="orderDirection!=null 
		and orderDirection != '' and orderField != '' and orderField!=null "> order by ${orderField} ${orderDirection} </if> <include 
		refid="sql-global.pagination"/> </select> -->

	<!-- new 投资回款 -->
	<select id="selectUserInvestmentPaybackList" parameterType="com.pinting.business.model.vo.BsStatisticsVO"
		resultMap="userBuyMessageResult">
		SELECT
		u.nick nick,
		u.mobile mobile,
		u.user_name userName,
		u.id_card idCard,
		p.term term,
		s.product_name productName,
		s.product_rate rate,
		s.bank_card buyBankCard,
		CASE WHEN sred.id IS NOT NULL THEN  
			s.open_balance+sred.open_balance
		ELSE s.open_balance END  balance,
		s.accumulation_inerest accmulationInerest,
		CASE WHEN sred.id IS NOT NULL THEN  
		(s.open_balance + sred.open_balance+ s.accumulation_inerest )
		ELSE (s.open_balance + s.accumulation_inerest)  END  settlementAmount,
		od.bank_card_no bindBankCard,
		b.name bindBankName,
		s.open_time openTime,
		s.last_finish_interest_date investEndTime,
		s.status accountStatus,
		od.order_no orderNo,
		od.account_type accountType,
		od.return_msg returnMsg,
		od.status orderStatus,
		ag.agent_name agentName,
		ag.id agentId,
		bpi.property_name
		FROM bs_product p,bs_account a,
		bs_property_info bpi,
		bs_user u LEFT JOIN bs_agent ag on u.agent_id=ag.id,
		bs_sub_account s LEFT JOIN bs_sub_account_pair pair ON pair.auth_account_id = s.id LEFT JOIN bs_sub_account sred ON pair.red_account_id = sred.id
		LEFT JOIN bs_pay_orders od ON s.id = od.sub_account_id AND od.trans_type = 'RETURN_2_USER_BANK_CARD' and
		od.status=6 and od.account_type = 1
		LEFT JOIN bs_bank b on b.id = od.bank_id
		where s.product_id = p.id
		and s.account_id = a.id and a.user_id = u.id
		and s.product_type in ('REG','AUTH_YUN')
		AND bpi.id = p.property_id
		<if test="orderNo != null and orderNo != '' ">
			and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard != null and idCard != '' ">
			and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBankCard != null and buyBankCard != '' ">
			and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankCard != null and bindBankCard != '' ">
			and od.bank_card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankName != null and bindBankName != '' ">
			and b.name like concat(concat('%', #{bindBankName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="agentName != null and agentName != '' ">
			and ag.agent_name like concat(concat('%', #{agentName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="agentId != null and agentId != '' ">
			and ag.id = #{agentId}
		</if>
		<if test="beginAmount != null and beginAmount > 0 ">
			and s.balance >= #{beginAmount}
		</if>
		<if test="endAmount != null and endAmount > 0 ">
			and #{endAmount} >= s.balance
		</if>
		<if test="beginTime != null ">
			and s.open_time >= #{beginTime}
		</if>
		<if test="endTime != null ">
			and #{endTime} > s.open_time
		</if>
		<if test="settleAccountsBeginTime != null ">
			and s.last_finish_interest_date &gt;= #{settleAccountsBeginTime}
		</if>
		<if test="settleAccountsEndTime != null ">
			and s.last_finish_interest_date &lt;= #{settleAccountsEndTime}
		</if>
		<if test="productId != null and productId != '' ">
			and p.id = #{productId}
		</if>
		<if test="accountStatus == null">
			and s.status IN (5,7)
		</if>
		<if test="accountStatus != null and accountStatus > 0 ">
			and s.status = #{accountStatus}
		</if>
		<if test="beginSettlementAmount != null ">
			and (s.balance + s.accumulation_inerest) >= #{beginSettlementAmount}
		</if>
		<if test="endSettlementAmount != null ">
			and #{endSettlementAmount} >= (s.balance + s.accumulation_inerest)
		</if>
		<if test="term != null and term != 0 ">
			and p.term = #{term}
		</if>
		<if test="rate != null and rate != '' ">
			and p.base_rate = #{rate}
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-2'">
			and od.bank_id is null and s.status = 5
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
			and od.bank_id is null and s.status = 7
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1' and buyBankType !='-2' ">
			and od.bank_id = cast(#{buyBankType} as SIGNED INTEGER)
		</if>
		group by s.id
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			order by ${orderField} ${orderDirection}
		</if>

		<include refid="sql-global.pagination" />
	</select>

	<select id="selectUserSumInvestment" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Double">
		select sum(tab.balance + tab.accumulation_inerest) from (
		SELECT
		CASE WHEN sred.id IS NOT NULL THEN  
			s.open_balance+sred.open_balance
		ELSE s.open_balance END  balance ,s.accumulation_inerest
		FROM
		bs_product p,
		bs_account a,
		bs_user u
		LEFT JOIN bs_agent ag on u.agent_id=ag.id,
		bs_sub_account s LEFT JOIN bs_sub_account_pair pair ON pair.auth_account_id = s.id LEFT JOIN bs_sub_account sred ON pair.red_account_id = sred.id
		LEFT JOIN bs_pay_orders od ON s.id = od.sub_account_id AND od.trans_type = 'RETURN_2_USER_BANK_CARD' and
		od.status=6 and od.account_type = 1
		LEFT JOIN bs_bank b on b.id = od.bank_id
		where s.product_id = p.id
		and s.account_id = a.id and a.user_id = u.id
		and s.product_type in ('REG','AUTH_YUN')
		<if test="orderNo != null and orderNo != '' ">
			and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard != null and idCard != '' ">
			and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBankCard != null and buyBankCard != '' ">
			and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
		</if>

		<if test="bindBankCard != null and bindBankCard != '' ">
			and od.bank_card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankName != null and bindBankName != '' ">
			and b.name like concat(concat('%', #{bindBankName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="agentName != null and agentName != '' ">
			and ag.agent_name like concat(concat('%', #{agentName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="agentId != null and agentId != '' ">
			and ag.id = #{agentId}
		</if>
		<if test="beginAmount != null and beginAmount > 0 ">
			and s.balance >= #{beginAmount}
		</if>
		<if test="endAmount != null and endAmount > 0 ">
			and #{endAmount} >= s.balance
		</if>
		<if test="beginTime != null ">
			and s.open_time >= #{beginTime}
		</if>
		<if test="endTime != null ">
			and #{endTime} > s.open_time
		</if>
		<if test="settleAccountsBeginTime != null ">
			and s.last_finish_interest_date &gt;= #{settleAccountsBeginTime}
		</if>
		<if test="settleAccountsEndTime != null ">
			and s.last_finish_interest_date &lt;= #{settleAccountsEndTime}
		</if>
		<if test="productId != null and productId != '' ">
			and p.id = #{productId}
		</if>
		<if test="accountStatus == null">
			and s.status IN (5,7)
		</if>
		<if test="accountStatus != null and accountStatus > 0 ">
			and s.status = #{accountStatus}
		</if>
		<if test="beginSettlementAmount != null ">
			and (s.balance + s.accumulation_inerest) >= #{beginSettlementAmount}
		</if>
		<if test="endSettlementAmount != null ">
			and #{endSettlementAmount} >= (s.balance + s.accumulation_inerest)
		</if>
		<if test="term != null and term != 0">
			and p.term = #{term}
		</if>
		<if test="rate != null and rate != '' ">
			and p.base_rate = #{rate}
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-2'">
			and od.bank_id is null and s.status = 5
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
			and od.bank_id is null and s.status = 7
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1' and buyBankType !='-2' ">
			and od.bank_id = cast(#{buyBankType} as SIGNED INTEGER)
		</if>
		GROUP BY s.id
		) tab
	</select>

	<select id="countUserInvestmentList" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Integer">
		select count(*) from (
		SELECT
		s.id
		FROM
		bs_product p,
		bs_account a,
		bs_property_info bpi,
		bs_user u
		LEFT JOIN bs_agent ag on u.agent_id=ag.id,
		bs_sub_account s
		LEFT JOIN bs_pay_orders od ON s.id = od.sub_account_id AND od.trans_type = 'RETURN_2_USER_BANK_CARD' and
		od.status=6 and od.account_type = 1
		LEFT JOIN bs_bank b on b.id = od.bank_id
		where s.product_id = p.id
		and s.account_id = a.id and a.user_id = u.id
		and s.product_type in ('REG','AUTH_YUN')
		AND bpi.id = p.property_id
		<if test="orderNo != null and orderNo != '' ">
			and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard != null and idCard != '' ">
			and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBankCard != null and buyBankCard != '' ">
			and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
		</if>

		<if test="bindBankCard != null and bindBankCard != '' ">
			and od.bank_card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankName != null and bindBankName != '' ">
			and b.name like concat(concat('%', #{bindBankName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="agentName != null and agentName != '' ">
			and ag.agent_name like concat(concat('%', #{agentName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="agentId != null and agentId != '' ">
			and ag.id = #{agentId}
		</if>
		<if test="beginAmount != null and beginAmount > 0 ">
			and s.balance >= #{beginAmount}
		</if>
		<if test="endAmount != null and endAmount > 0 ">
			and #{endAmount} >= s.balance
		</if>
		<if test="beginTime != null ">
			and s.open_time >= #{beginTime}
		</if>
		<if test="endTime != null ">
			and #{endTime} > s.open_time
		</if>
		<if test="settleAccountsBeginTime != null ">
			and s.last_finish_interest_date &gt;= #{settleAccountsBeginTime}
		</if>
		<if test="settleAccountsEndTime != null ">
			and s.last_finish_interest_date &lt;= #{settleAccountsEndTime}
		</if>
		<if test="productId != null and productId != '' ">
			and p.id = #{productId}
		</if>
		<if test="accountStatus == null">
			and s.status in (5,7)
		</if>
		<if test="accountStatus != null and accountStatus > 0 ">
			and s.status = #{accountStatus}
		</if>
		<if test="beginSettlementAmount != null ">
			and (s.balance + s.accumulation_inerest) >= #{beginSettlementAmount}
		</if>
		<if test="endSettlementAmount != null ">
			and #{endSettlementAmount} >= (s.balance + s.accumulation_inerest)
		</if>
		<if test="term != null and term != 0 ">
			and p.term = #{term}
		</if>
		<if test="rate != null and rate != '' ">
			and p.base_rate = #{rate}
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-2'">
			and od.bank_id is null and s.status = 5
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
			and od.bank_id is null and s.status = 7
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1' and buyBankType !='-2' ">
			and od.bank_id = cast(#{buyBankType} as SIGNED INTEGER)
		</if>
		group by s.id
		) tab
	</select>

	<!-- 统计所有用户的总收入 @author yanwl @date 2015-11-18 -->
	<select id="countUserIncome" resultType="java.lang.Double">
		select sum(total_interest+total_bonus) as totalIncome from bs_user
	</select>


	<select id="selectAgentUser" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultMap="BsUserAssetResultMap">
		SELECT
			a.id, a.user_name, a.mobile, a.id_card, a.status, a.current_interest, a.current_bonus, a.total_interest, a.total_bonus,
			a.can_withdraw, a.total_trans, a.recommend_id, a.agent_id, a.register_time, a.reg_terminal,
			dafy.bank_card cardNo, dafy.status bankStatus,b.id as account_Id,
			(SELECT SUM(balance) FROM bs_sub_account WHERE account_id = b.id AND (product_type = 'JSH' OR product_type = 'DEP_JSH')) AS balance,
			(SELECT count(x.id) FROM bs_user x WHERE x.recommend_id=a.id) AS recommendNum,
			bb.real_balance AS real_balance, bb.total_balance
		FROM
		(SELECT
			a.id, a.user_name, a.mobile, a.id_card, a.status, a.current_interest, a.current_bonus, a.total_interest, a.total_bonus,
			a.can_withdraw, a.total_trans, a.recommend_id, a.agent_id, a.register_time, a.reg_terminal
		FROM bs_user a
		<where>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
				a.agent_id = #{distributionChannel}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='999'">
				a.agent_id IN (15,36,46,47)
			</if>
			<if test="mobile !=null and mobile !='' ">
				and a.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="sName!=null">
				and a.user_name like concat(concat('%', #{sName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="sRegisterTime!=null  and eRegisterTime!=null ">
				and a.register_time between #{sRegisterTime} and #{eRegisterTime}
			</if>
			<if test="regTerminal != null and regTerminal != '888' ">
				and a.reg_terminal = #{regTerminal}
			</if>
		</where>
		) a
		INNER JOIN bs_account b ON b.user_id = a.id
		LEFT JOIN dafy_user_ext dafy on a.id = dafy.user_id
		LEFT JOIN (
			SELECT c.account_id,
				SUM(
					CASE WHEN c.product_type = 'AUTH_YUN' THEN c.open_balance
					WHEN c.product_type = 'RED' THEN c.open_balance
					WHEN c.product_type = 'AUTH_ZSD' THEN c.open_balance
					WHEN c.product_type = 'RED_ZSD' THEN c.open_balance
					WHEN c.product_type = 'AUTH_7' THEN c.open_balance
					WHEN c.product_type = 'RED_7' THEN c.open_balance
					WHEN c.product_type = 'AUTH_FREE' THEN c.open_balance
					WHEN c.product_type = 'RED_FREE' THEN c.open_balance
					ELSE c.balance END
				) AS total_balance,
				SUM(CASE WHEN c.product_type = 'REG_D' THEN bb.r_amount WHEN c.product_type = 'REG' THEN c.balance 
				WHEN (c.product_type = 'AUTH_YUN' OR c.product_type = 'RED'
					OR c.product_type = 'AUTH_7' OR c.product_type = 'RED_7'
					OR c.product_type = 'AUTH_ZSD' OR c.product_type = 'RED_ZSD'
					OR c.product_type = 'AUTH_FREE' OR c.product_type = 'RED_FREE'
				) THEN c.open_balance ELSE 0 END) AS real_balance
			FROM bs_sub_account c LEFT JOIN (
				select SUM(r.total_amount) r_amount,bp.auth_account_id a_sub,r.bs_sub_account_id r_sub from ln_loan_relation r, ln_loan l,bs_sub_account_pair bp where
				bp.reg_d_account_id=r.bs_sub_account_id and
				r.loan_id=l.id and r.`status`!='FAIL' and r.total_amount>0 GROUP BY r.bs_sub_account_id
			) bb ON c.id = bb.r_sub
			WHERE
			CASE WHEN c.product_type ='JSH' THEN c.`status` = 1
			WHEN c.product_type ='JLJ' THEN c.`status` = 1
			WHEN c.product_type ='DEP_JSH' THEN c.`status` = 1
			ELSE c.`status` = 2 END
			GROUP BY c.account_id
		) AS bb ON bb.account_id = b.id
		order by
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			${orderField} ${orderDirection},
		</if>
		a.register_time desc, recommendNum desc, a.status asc , a.id desc
		<include refid="sql-global.pagination" />
	</select>

	<select id="countAgentUserCount" parameterType="com.pinting.business.model.vo.BsUserAssetVO" resultType="java.lang.Integer">
		select
		count(*)
		from (
		select
		dafy.bank_card cardNo,
		dafy.status bankStatus,
		dafy.dafy_bind_card_time bindTime,
		a.id as account_Id,
		(select balance from bs_sub_account p where b.status = 1 and p.product_type='JSH' and p.id=b.id) balance,
		SUM(b.balance) as total_balance
		from
		bs_account a,
	   (SELECT c.id FROM bs_user c
		<where>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
				c.agent_id = #{distributionChannel}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='999'">
				c.agent_id IN (15,36,46,47)
			</if>
			<if test="mobile !=null and mobile !='' ">
				and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="sName!=null">
				and c.user_name like concat(concat('%', #{sName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="sRegisterTime!=null  and eRegisterTime!=null ">
				and c.register_time between #{sRegisterTime} and #{eRegisterTime}
			</if>
			<if test="regTerminal != null and regTerminal != '888' ">
				and c.reg_terminal = #{regTerminal}
			</if>
		</where>
		) c LEFT JOIN dafy_user_ext dafy on c.id = dafy.user_id, bs_sub_account b
		WHERE
			c.id=a.user_id
			and a.id=b.account_id
			and
			(
				(b.status=1 and b.product_type = 'JSH') OR
				(b.status=2 and b.product_type = 'REG') OR
				(b.status =2 and b.product_type = 'REG_D')
			)
		GROUP BY c.id
		)p
	</select>

	<select id="countAgentBuyMessage" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM (
		SELECT aa.subAccountId, aa.property_symbol FROM
		(
		SELECT
		s.id subAccountId,
		d.property_symbol
		from bs_account a, bs_user u, bs_sub_account s , bs_bank_card b ,
		bs_product p left join bs_property_info d on p.property_id = d.id
		where
		u.id = a.user_id and a.id = s.account_id and u.id = b.user_id
		and exists
		(select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 and `status` in
		(1,5) order by bind_time
		DESC) aa group by user_id) test where test.id = b.id)
		and s.product_id = p.id and s.product_type IN ('AUTH_YUN', 'AUTH_7', 'AUTH_ZSD', 'REG', 'AUTH', 'AUTH_FREE')
		and s.open_time &lt; IF(b.`status`=1,NOW(),IFNULL(b.unbind_time, NOW()))
		and ( (s.open_time >= '2018-1-1' and (FIND_IN_SET('PC_178', p.show_terminal) or FIND_IN_SET('H5_178',
		p.show_terminal)))
		or s.open_time &lt; '2018-1-1')
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard != null and idCard != '' ">
			and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBankCard != null and buyBankCard != '' ">
			and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankCard != null and bindBankCard != '' ">
			and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="productName != null and productName != '' ">
			and s.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="accountStatus == null or accountStatus == 0">
			and s.status in (2,5,7)
		</if>
		<if test="accountStatus != null and accountStatus > 0 ">
			and s.status = #{accountStatus}
		</if>
		<if test="term != null and term != 0 ">
			and p.term = #{term}
		</if>
		<if test="productCode != null and productCode != '' ">
			and s.product_code = #{productCode}
		</if>
		<if test="propertySymbol != 'ZAN'">
			<if test="beginAmount != null and beginAmount > 0 ">
				and s.balance >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= s.balance
			</if>
		</if>
		<if test="beginTime != null ">
			and s.open_time >= #{beginTime}
		</if>
		<if test="endTime != null ">
			and #{endTime} > s.open_time
		</if>

		<if test="settleAccountsBeginTime != null ">
			and s.last_finish_interest_date >= #{settleAccountsBeginTime}
		</if>
		<if test="settleAccountsEndTime != null ">
			and #{settleAccountsEndTime} > s.last_finish_interest_date
		</if>
		<if test="agentId != null and agentId != 0">
			and u.agent_id = #{agentId}
		</if>
		<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
			and u.agent_id = #{distributionChannel}
		</if>
		<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='999'">
			and u.agent_id IN (15,36,46,47)
		</if>

		<if test="interestBeginTime != null and interestEndTime != null and interestBeginTime != '' and interestEndTime != '' ">
			and s.interest_begin_date between #{interestBeginTime} and #{interestEndTime}
		</if>

		) aa LEFT JOIN bs_pay_orders o ON aa.subAccountId = o.sub_account_id
		<where>
			<if test="terminalType != null and terminalType != '888' ">
				o.terminal_type = #{terminalType}
			</if>
		</where>
		GROUP BY aa.subAccountId HAVING COUNT(*) >= 1
		)  tt LEFT JOIN (
			select SUM(r.total_amount) r_amount,bp.auth_account_id a_sub,r.bs_sub_account_id r_sub from ln_loan_relation r, ln_loan l,bs_sub_account_pair bp where
			bp.reg_d_account_id=r.bs_sub_account_id and
			r.loan_id=l.id and r.`status`!='FAIL' and r.total_amount>0 GROUP BY r.bs_sub_account_id
		) bb on tt.subAccountId=bb.a_sub
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'ZAN'">
			WHERE bb.r_amount > 0
			<if test="beginAmount != null and beginAmount > 0 ">
				and bb.r_amount >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= bb.r_amount
			</if>
		</if>
	</select>

	<select id="findAgentUserMessageList" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultMap="userBuyMessageResult">
		SELECT
		CASE WHEN tt.property_symbol = 'ZAN' THEN
		CASE WHEN bb.r_amount IS NULL THEN 0.0
		ELSE bb.r_amount END
		ELSE
		tt.balance
		END balance,
		tt.nick,
		tt.mobile,
		tt.userName,
		tt.idCard,
		tt.term,
		tt.productName,
		tt.rate,
		tt.bindBankCard,
		tt.bindBankName,
		tt.openTime,
		tt.investEndTime,
		tt.accountStatus,
		tt.subAccountId,
		tt.agentName,
		tt.property_symbol,
		tt.agentId,
		tt.terminalType
		FROM (
		SELECT
			aa.nick, aa.mobile, aa.userName,aa.idCard, aa.term, aa.productName, aa.rate, aa.buyBankCard, aa.balance, aa.bindBankCard, aa.bindBankName, aa.openTime,
			aa.investEndTime, aa.accountStatus, aa.subAccountId, aa.agentName, aa.property_symbol, aa.agentId, o.terminal_type terminalType
		FROM (

			SELECT
			u.nick nick,
			u.mobile mobile,
			u.user_name userName,
			u.id_card idCard,
			p.term term,
			s.product_name productName,
			s.product_rate rate,
			s.bank_card buyBankCard,
			CASE WHEN sred.id IS NOT NULL THEN
			s.open_balance+sred.open_balance
			ELSE s.open_balance END  balance,
			b.card_no bindBankCard,
			b.bank_name bindBankName,
			s.open_time openTime,
			s.last_finish_interest_date investEndTime,
			s.status accountStatus,
			s.id subAccountId,
			ag.agent_name agentName,
			d.property_symbol, u.agent_id agentId
			from bs_account a, bs_user u left join bs_agent ag on u.agent_id=ag.id, bs_sub_account s LEFT JOIN bs_sub_account_pair pair ON pair.auth_account_id = s.id LEFT JOIN bs_sub_account sred ON pair.red_account_id = sred.id , bs_bank_card b ,
			bs_product p left join bs_property_info d on p.property_id = d.id
			where
			u.id = a.user_id and a.id = s.account_id and u.id = b.user_id
			and exists
			(select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 and `status` in (1,5) order by bind_time
			DESC) aa group by user_id) test where test.id = b.id)
			AND s.open_time &lt; IF(b.`status`=1,NOW(),IFNULL(b.unbind_time, NOW()))
			and s.product_id = p.id and s.product_type IN ('AUTH_YUN', 'AUTH_7', 'AUTH_ZSD', 'REG', 'AUTH','AUTH_FREE')
			and (	(s.open_time >= '2018-1-1' and (FIND_IN_SET('PC_178', p.show_terminal) or FIND_IN_SET('H5_178', p.show_terminal)))
				or s.open_time &lt; '2018-1-1')
			<if test="productId != null and productId > 0  ">
				and p.id = #{productId}
			</if>
			<if test="userName != null and userName != '' ">
				and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="idCard != null and idCard != '' ">
				and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="buyBankCard != null and buyBankCard != '' ">
				and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="bindBankCard != null and bindBankCard != '' ">
				and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="productName != null and productName != '' ">
				and s.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="accountStatus == null or accountStatus == 0">
				and s.status in (2,5,7)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and s.status = #{accountStatus}
			</if>
			<if test="term != null and term != 0 ">
				and p.term = #{term}
			</if>
			<if test="productCode != null and productCode != '' ">
				and s.product_code = #{productCode}
			</if>
			<if test="propertySymbol != 'ZAN'">
				<if test="beginAmount != null and beginAmount > 0 ">
					and s.balance >= #{beginAmount}
				</if>
				<if test="endAmount != null and endAmount > 0 ">
					and #{endAmount} >= s.balance
				</if>
			</if>

			<if test="beginTime != null ">
				and s.open_time >= #{beginTime}
			</if>
			<if test="endTime != null ">
				and #{endTime} > s.open_time
			</if>

			<if test="settleAccountsBeginTime != null ">
				and s.last_finish_interest_date >= #{settleAccountsBeginTime}
			</if>
			<if test="settleAccountsEndTime != null ">
				and #{settleAccountsEndTime} > s.last_finish_interest_date
			</if>
			<!--<if test="agentId != null and agentId != 0">
				and u.agent_id = #{agentId}
			</if>-->
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
				and u.agent_id = #{distributionChannel}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='999'">
				and u.agent_id IN (15,36,46,47)
			</if>

			<if test="interestBeginTime != null and interestEndTime != null and interestBeginTime != '' and interestEndTime != '' ">
				and s.interest_begin_date between #{interestBeginTime} and #{interestEndTime}
			</if>
		) aa LEFT JOIN bs_pay_orders o ON aa.subAccountId = o.sub_account_id
		<where>
			<if test="terminalType != null and terminalType != '888' ">
				o.terminal_type = #{terminalType}
			</if>
		</where>
		GROUP BY aa.subAccountId HAVING COUNT(*) >= 1
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			order by ${orderField} ${orderDirection}
		</if>
		) tt LEFT JOIN (
			select SUM(r.total_amount) r_amount,bp.auth_account_id a_sub,r.bs_sub_account_id r_sub from ln_loan_relation r, ln_loan l,bs_sub_account_pair bp where
			bp.reg_d_account_id=r.bs_sub_account_id and
			r.loan_id=l.id and r.`status`!='FAIL' and r.total_amount>0 GROUP BY r.bs_sub_account_id
		) bb on tt.subAccountId=bb.a_sub
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'ZAN'">
			WHERE bb.r_amount > 0
			<if test="beginAmount != null and beginAmount > 0 ">
				and bb.r_amount >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= bb.r_amount
			</if>
		</if>
		<include refid="sql-global.pagination" />
	</select>

	<select id="selectByPKForLock" parameterType="java.lang.Integer" resultMap="BaseResultMap">
		select * from bs_user where id = #{userId} for update
	</select>

	<select id="selectAgentSumBalance" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Double">
		SELECT SUM(CASE WHEN tt.property_symbol = 'ZAN' THEN CASE WHEN bb.r_amount IS NULL THEN 0.0 ELSE bb.r_amount END ELSE tt.balance END)
		FROM (
		SELECT
			aa.subAccountId,
			aa.property_symbol,
			aa.balance
		FROM (

		SELECT
		s.id subAccountId,
		d.property_symbol,
		CASE WHEN sred.id IS NOT NULL THEN  
			s.open_balance+sred.open_balance
		ELSE s.open_balance END  balance
		from bs_account a, bs_user u, bs_sub_account s LEFT JOIN bs_sub_account_pair pair ON pair.auth_account_id = s.id LEFT JOIN bs_sub_account sred ON pair.red_account_id = sred.id, bs_bank_card b ,
		bs_product p left join bs_property_info d on p.property_id = d.id
		where
		u.id = a.user_id and a.id = s.account_id and u.id = b.user_id
		and exists
		(select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 and `status` in (1,5) order by bind_time
		DESC) aa group by user_id) test where test.id = b.id)
		and s.product_id = p.id and s.product_type IN ('AUTH_YUN', 'AUTH_7', 'AUTH_ZSD', 'REG', 'AUTH', 'AUTH_FREE')
		and s.open_time &lt; IF(b.`status`=1,NOW(),IFNULL(b.unbind_time, NOW()))
		and (	(s.open_time >= '2018-1-1' and (FIND_IN_SET('PC_178', p.show_terminal) or FIND_IN_SET('H5_178', p.show_terminal)))
			or s.open_time &lt; '2018-1-1')
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard != null and idCard != '' ">
			and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBankCard != null and buyBankCard != '' ">
			and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankCard != null and bindBankCard != '' ">
			and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="productName != null and productName != '' ">
			and s.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="accountStatus != null and accountStatus > 0 ">
			and s.status = #{accountStatus}
		</if>
		<if test="accountStatus == null or accountStatus == 0">
			and s.status in (2,5,7)
		</if>
		<if test="term != null and term != 0 ">
			and p.term = #{term}
		</if>
		<if test="propertySymbol != 'ZAN'">
			<if test="beginAmount != null and beginAmount > 0 ">
				and s.balance >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= s.balance
			</if>
		</if>
		<if test="beginTime != null ">
			and s.open_time >= #{beginTime}
		</if>
		<if test="endTime != null ">
			and #{endTime} > s.open_time
		</if>
		<if test="productCode != null ">
			and s.product_code = #{productCode}
		</if>
		<if test="settleAccountsBeginTime != null ">
			and s.last_finish_interest_date >= #{settleAccountsBeginTime}
		</if>
		<if test="settleAccountsEndTime != null ">
			and #{settleAccountsEndTime} > s.last_finish_interest_date
		</if>
		<if test="agentId != null and agentId != 0">
			and u.agent_id = #{agentId}
		</if>
		<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
			and u.agent_id = #{distributionChannel}
		</if>
		<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='999' ">
			and u.agent_id IN (15,36,46,47)
		</if>
		<if test="interestBeginTime != null and interestEndTime != null and interestBeginTime != '' and interestEndTime != '' ">
			and s.interest_begin_date between #{interestBeginTime} and #{interestEndTime}
		</if>

		) aa LEFT JOIN bs_pay_orders o ON aa.subAccountId = o.sub_account_id
		<where>
			<if test="terminalType != null and terminalType != '888' ">
				o.terminal_type = #{terminalType}
			</if>
		</where>
		GROUP BY aa.subAccountId HAVING COUNT(*) >= 1
		) tt LEFT JOIN (
			select SUM(r.total_amount) r_amount,bp.auth_account_id a_sub,r.bs_sub_account_id r_sub from ln_loan_relation r, ln_loan l,bs_sub_account_pair bp where
			bp.reg_d_account_id=r.bs_sub_account_id and
			r.loan_id=l.id and r.`status`!='FAIL' and r.total_amount>0 GROUP BY r.bs_sub_account_id
		) bb on tt.subAccountId=bb.a_sub
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'ZAN'">
			WHERE bb.r_amount > 0
			<if test="beginAmount != null and beginAmount > 0 ">
				and bb.r_amount >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= bb.r_amount
			</if>
		</if>
	</select>

	<update id="updateUserAmountInfoById" parameterType="com.pinting.business.model.BsUser">
		update bs_user
		<set>
			<if test="totalBonus != null">
				total_bonus = total_bonus+#{totalBonus},
			</if>
			<if test="currentBonus != null">
				current_bonus = current_bonus+#{currentBonus},
			</if>
			<if test="canWithdraw != null">
				can_withdraw = can_withdraw+#{canWithdraw},
			</if>
			<if test="currentInterest != null">
				current_interest = current_interest+#{currentInterest}
			</if>
			<if test="totalInterest != null">
				total_interest = total_interest+#{totalInterest}
			</if>
		</set>
		where id=#{id}
	</update>

	<sql id="Base_User_List">
		<if test="userName !=null and userName != ''">
			and u.user_name like CONCAT(CONCAT('%', #{userName}),'%')
		</if>
		<if test="mobile !=null and mobile != ''">
			and u.mobile like CONCAT(CONCAT('%', #{mobile}),'%')
		</if>
	</sql>

	<select id="countBsUser" parameterType="com.pinting.business.model.BsUser" resultType="java.lang.Integer">
		select count(*) from(select u.id from bs_user u left join bs_user u2 on u.id = u2.recommend_id left join
		bs_agent ag on u.agent_id = ag.id
		where 1 = 1
		<include refid="Base_User_List" />
		group by u.id order by u.register_time desc) as m
	</select>

	<select id="bsUserPage" resultMap="VoResultMap" parameterType="com.pinting.business.model.BsUser">
		select u.*,count(u2.recommend_id) as recommend_count,ag.agent_name from bs_user u left join bs_user u2 on u.id =
		u2.recommend_id left join bs_agent ag on u.agent_id = ag.id
		where 1 = 1
		<include refid="Base_User_List" />
		group by u.id order by u.register_time desc
		<include refid="sql-global.pagination" />
	</select>

	<!-- - 查询所有用户的基础信息 - @auth yanwl - @date 2016-01-15 -->
	<select id="selectBaseUserInfo" resultMap="BaseVoResultMap">
		select u.id,u.id_card,u.register_time,u.first_buy_time,
		u.recommend_id,u.total_trans,a.agent_name as agentName,b.mobile,
		(select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa where bsa.product_type = 'REG' and bsa.account_id = ba.id) as
		totalInterest
		from bs_user u left join bs_agent a on u.agent_id = a.id
		left join bs_bank_card b on u.id = b.user_id and b.status = 1 and b.is_first = 1
		left join bs_account ba on u.id = ba.user_id
	</select>

	<select id="mobileSelect" resultMap="BaseResultMap" parameterType="com.pinting.business.model.BsUser">
		select * from bs_user where mobile = #{mobile}
	</select>

	<!-- - 分页查询用户运营信息 - @auth yanwl - @date 2016-02-28 -->
	<select id="selectUserOperatePage" resultMap="UserOperateVoMap" parameterType="com.pinting.business.model.vo.MUserOperateVO">
		select tab.id as userId,tab.agentName,tab.mobile,tab.bankName,tab.lastBuyTime,tab.first_buy_time,tab.total_bonus,
		tab.investMoney,tab.investTotalMoney,tab.register_time
		from (
		select c.id,c.mobile,c.total_bonus,c.register_time,c.first_buy_time,c.agent_id, bank.bank_name as bankName, bank.bank_id as bankId, ba.agent_name as agentName, (
		select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa where bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') and bsa.account_id = a.id and bsa.status not in(1,6)
		) as investTotalMoney, (
		select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa where bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') and bsa.account_id = a.id and bsa.status = 2
		) as investMoney, (
		SELECT max(bsa.open_time) FROM bs_sub_account bsa WHERE bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') AND bsa.status NOT IN (1, 6) and bsa.account_id = a.id GROUP BY bsa.account_id
		) as lastBuyTime
		from
		<if test="userIds != null and userIds !=''">
			(
				select * from bs_user a where id in
				<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
					#{userId}
				</foreach>
			) as c LEFT JOIN bs_bank_card AS bank on c.id = bank.user_id and exists (select test.id from (select id from bs_bank_card ff where is_first = 1 group by user_id order by
			bind_time) test where test.id = bank.id) LEFT JOIN bs_agent ba on ba.id=c.agent_id, bs_account a ,bs_sub_account p
			where
			c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH'
		</if>
		<if test="userIds == null or userIds ==''">
			bs_account a ,bs_sub_account p , bs_user c LEFT JOIN bs_bank_card AS bank on c.id = bank.user_id
			and exists (select test.id from (select id from bs_bank_card ff where is_first = 1 group by user_id order by
			bind_time) test where test.id = bank.id)
			LEFT JOIN bs_agent ba on ba.id=c.agent_id
		</if>
		) tab
		where 1=1
		<if test="bankId != null and bankId !=0">and tab.bankId = #{bankId}</if>
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and tab.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and tab.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (tab.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or tab.agent_id is null)
		</if>
		<if test="(sLastBuyTime != null and sLastBuyTime !='') or (eLastBuyTime != null and eLastBuyTime !='')">
			<if test="sLastBuyTime != null and sLastBuyTime !=''">
				and tab.lastBuyTime &gt;= #{sLastBuyTime}
			</if>
			<if test="eLastBuyTime != null and eLastBuyTime !=''">
				and tab.lastBuyTime &lt;= DATE_FORMAT(#{eLastBuyTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="(sFirstBuyTime != null and sFirstBuyTime !='') or (eFirstBuyTime != null and eFirstBuyTime !='')">
			<if test="sFirstBuyTime != null and sFirstBuyTime !=''">
				and tab.first_buy_time &gt;= #{sFirstBuyTime}
			</if>
			<if test="eFirstBuyTime != null and eFirstBuyTime !=''">
				and tab.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="(sTotalBonus != null and sTotalBonus != '') or (eTotalBonus != null and eTotalBonus != '')">
			<if test="sTotalBonus != null and sTotalBonus != ''">
				and tab.total_bonus &gt;= #{sTotalBonus}
			</if>
			<if test="eTotalBonus != null and eTotalBonus != ''">
				and tab.total_bonus &lt;= #{eTotalBonus}
			</if>
		</if>
		<if test="(sInvestMoney != null and sInvestMoney != '') or (eInvestMoney != null and eInvestMoney != '')">
			<if test="sInvestMoney != null and sInvestMoney != ''">
				and tab.investMoney &gt;= #{sInvestMoney}
			</if>
			<if test="eInvestMoney != null and eInvestMoney != ''">
				and tab.investMoney &lt;= #{eInvestMoney}
			</if>
		</if>
		<if
			test="(sInvestTotalMoney != null and sInvestTotalMoney != '') or (eInvestTotalMoney != null and eInvestTotalMoney != '')">
			<if test="sInvestTotalMoney != null and sInvestTotalMoney != ''">
				and tab.investTotalMoney &gt;= #{sInvestTotalMoney}
			</if>
			<if test="eInvestTotalMoney != null and eInvestTotalMoney != ''">
				and tab.investTotalMoney &lt;= #{eInvestTotalMoney}
			</if>
		</if>
		<if test="(sRegistTime != null and sRegistTime !='') or (eRegistTime != null and eRegistTime !='')">
			<if test="sRegistTime != null and sRegistTime !=''">
				and tab.register_time &gt;= #{sRegistTime}
			</if>
			<if test="eRegistTime != null and eRegistTime !=''">
				and tab.register_time &lt;= DATE_FORMAT(#{eRegistTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="userIds != null and userIds !=''">
			and tab.id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		<include refid="sql-global.pagination" />
	</select>

	<!-- - 查询用户运营信息总数 - @auth yanwl - @date 2016-02-28 -->
	<select id="countUserOperate" resultType="java.lang.Integer" parameterType="com.pinting.business.model.vo.MUserOperateVO">
		select count(*) from (

		select tab.id as userId,tab.agentName,tab.mobile
		,tab.bankName,tab.lastBuyTime,tab.first_buy_time,tab.total_bonus,tab.investMoney,tab.investTotalMoney,tab.register_time
		from(
		select
		c.id,c.mobile,c.total_bonus,c.register_time,c.first_buy_time,c.agent_id,
		bank.bank_name as bankName,
		bank.bank_id as bankId,
		ba.agent_name as agentName,
		(select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa where bsa.product_type = 'REG' and bsa.account_id =
		a.id and bsa.status not in(1,6)) as investTotalMoney,
		(select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa where bsa.product_type = 'REG' and bsa.account_id =
		a.id and bsa.status = 2) as investMoney,
		(SELECT max(bsa.open_time) FROM bs_sub_account bsa
		WHERE bsa.product_type = 'REG'
		AND bsa.status NOT IN (1, 6)
		and bsa.account_id = a.id
		GROUP BY bsa.account_id
		) as lastBuyTime
		from
		<if test="userIds != null and userIds !=''">
			(
			select * from bs_user a where id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
			) as c LEFT JOIN bs_bank_card AS bank on c.id = bank.user_id and exists (select test.id from (select id from bs_bank_card ff where is_first = 1 group by user_id order by
			bind_time) test where test.id = bank.id) LEFT JOIN bs_agent ba on ba.id=c.agent_id, bs_account a ,bs_sub_account p
			where
			c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH'
		</if>
		<if test="userIds == null or userIds ==''">
			bs_account a ,bs_sub_account p , bs_user c LEFT JOIN
			bs_bank_card AS bank on c.id = bank.user_id
			and exists (select test.id from (select id from bs_bank_card ff where is_first = 1 group by user_id order by
			bind_time) test where test.id = bank.id)
			LEFT JOIN bs_agent ba on ba.id=c.agent_id
			where
			c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH'
		</if>
		) tab
		where 1=1
		<if test="bankId != null and bankId !=0">and tab.bankId = #{bankId}</if>
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and tab.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and tab.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (tab.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or tab.agent_id is null)
		</if>
		<if test="(sLastBuyTime != null and sLastBuyTime !='') or (eLastBuyTime != null and eLastBuyTime !='')">
			<if test="sLastBuyTime != null and sLastBuyTime !=''">
				and tab.lastBuyTime &gt;= #{sLastBuyTime}
			</if>
			<if test="eLastBuyTime != null and eLastBuyTime !=''">
				and tab.lastBuyTime &lt;= DATE_FORMAT(#{eLastBuyTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="(sFirstBuyTime != null and sFirstBuyTime !='') or (eFirstBuyTime != null and eFirstBuyTime !='')">
			<if test="sFirstBuyTime != null and sFirstBuyTime !=''">
				and tab.first_buy_time &gt;= #{sFirstBuyTime}
			</if>
			<if test="eFirstBuyTime != null and eFirstBuyTime !=''">
				and tab.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="(sTotalBonus != null and sTotalBonus != '') or (eTotalBonus != null and eTotalBonus != '')">
			<if test="sTotalBonus != null and sTotalBonus != ''">
				and tab.total_bonus &gt;= #{sTotalBonus}
			</if>
			<if test="eTotalBonus != null and eTotalBonus != ''">
				and tab.total_bonus &lt;= #{eTotalBonus}
			</if>
		</if>
		<if test="(sInvestMoney != null and sInvestMoney != '') or (eInvestMoney != null and eInvestMoney != '')">
			<if test="sInvestMoney != null and sInvestMoney != ''">
				and tab.investMoney &gt;= #{sInvestMoney}
			</if>
			<if test="eInvestMoney != null and eInvestMoney != ''">
				and tab.investMoney &lt;= #{eInvestMoney}
			</if>
		</if>
		<if
			test="(sInvestTotalMoney != null and sInvestTotalMoney != '') or (eInvestTotalMoney != null and eInvestTotalMoney != '')">
			<if test="sInvestTotalMoney != null and sInvestTotalMoney != ''">
				and tab.investTotalMoney &gt;= #{sInvestTotalMoney}
			</if>
			<if test="eInvestTotalMoney != null and eInvestTotalMoney != ''">
				and tab.investTotalMoney &lt;= #{eInvestTotalMoney}
			</if>
		</if>
		<if test="(sRegistTime != null and sRegistTime !='') or (eRegistTime != null and eRegistTime !='')">
			<if test="sRegistTime != null and sRegistTime !=''">
				and tab.register_time &gt;= #{sRegistTime}
			</if>
			<if test="eRegistTime != null and eRegistTime !=''">
				and tab.register_time &lt;= DATE_FORMAT(#{eRegistTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="userIds != null and userIds !=''">
			and tab.id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		) u
	</select>

	<!-- - 查询用户总数 - @auth yanwl - @date 2016-02-29 -->
	<select id="countBsUserByMap" parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(*) from bs_user
		where 1 = 1
		<if test="status != null">
			and status = #{status}
		</if>
	</select>

	<!-- - 查询推荐用户总数 - @auth yanwl - @date 2016-03-04 -->
	<select id="countRecommendUser" parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(*) from bs_user
		where 1 = 1
		<if test="recommendId != null">
			and recommend_id = #{recommendId}
		</if>
		<if test="status != null">
			and status = #{status}
		</if>
		<if test="startTime != null and endTime != null">
			and register_time between #{startTime} and #{endTime}
		</if>
	</select>

	<!-- 查询希财用户信息 -->
	<select id="selectXiCaiUserList" resultMap="BaseResultMapUser" parameterType="map">
		SELECT * FROM
		(SELECT u.id,u.nick,u.user_name,
		u.mobile,u.email,u.register_time,
		u.reg_terminal, SUM(s.balance) total_money
		FROM bs_user u
		LEFT JOIN bs_account a ON u.id = a.user_id
		LEFT JOIN bs_sub_account s ON a.id = s.account_id
		WHERE
		u.agent_id = #{agentId}
		AND u.register_time BETWEEN #{startdate} AND #{enddate}
		AND s.product_type = 'REG' AND s.status
		in (2,3,4,5,7)
		GROUP BY u.id
		UNION
		SELECT u.id,u.nick,u.user_name,
		u.mobile,u.email,u.register_time,
		u.reg_terminal, 0
		total_money
		FROM bs_user u
		LEFT JOIN bs_account a ON u.id = a.user_id
		LEFT JOIN bs_sub_account s ON a.id = s.account_id
		WHERE u.agent_id = #{agentId}
		AND u.register_time BETWEEN #{startdate} AND #{enddate}
		AND u.id NOT IN (
		SELECT ub.id
		FROM bs_user ub
		LEFT JOIN bs_account ab ON ub.id = ab.user_id
		LEFT JOIN bs_sub_account sb ON ab.id = sb.account_id
		WHERE ub.agent_id = #{agentId}
		AND ub.register_time BETWEEN #{startdate} AND #{enddate}
		AND sb.product_type = 'REG' AND sb.status in (2,3,4,5,7)
		GROUP BY ub.id
		)
		GROUP BY u.id )sc
		ORDER BY id DESC
		limit #{page},#{pagesize}
	</select>

	<!-- 查询希财用户信息数量 -->
	<select id="selectXiCaiUserCount" resultType="java.lang.Integer" parameterType="map">
		SELECT COUNT(*)
		FROM bs_user u
		WHERE u.agent_id = #{agentId}
		AND u.register_time BETWEEN #{startdate} AND #{enddate}
	</select>

	<!-- 希财用户投资信息统计 -->
	<select id="selectXiCaiInvestInfo" resultMap="BaseResultMapData" parameterType="map">
		SELECT
		s.id subId,s.product_id pid,u.mobile,u.nick ,u.reg_terminal ,s.open_time,s.balance money,s.product_rate,p.term term
		FROM bs_sub_account s LEFT JOIN bs_account a ON s.account_id = a.id,bs_user u,bs_product p
		WHERE s.status in (2,3,4,5,7) AND s.product_type = 'REG' AND u.agent_id = #{agentId} AND u.id = a.user_id AND s.product_id
		= p.id
		AND s.open_time BETWEEN #{startdate} AND #{enddate}
		ORDER BY s.id DESC
		LIMIT #{page},#{pagesize}
	</select>

	<!-- 希财用户投资产品数量统计 -->
	<select id="selectXiCaiInvestCount" resultType="java.lang.Integer" parameterType="map">
		SELECT COUNT(*)
		FROM bs_sub_account s LEFT JOIN bs_account a ON s.account_id = a.id,bs_user u,bs_product p
		WHERE s.status in (2,3,4,5,7) AND s.product_type = 'REG' AND u.agent_id = #{agentId} AND u.id = a.user_id AND s.product_id
		= p.id
		AND s.open_time BETWEEN #{startdate} AND #{enddate}
	</select>

	<!-- - 根据id或者手机号查询所有用户 - @auth yanwl - @date 2016-04-15 -->
	<select id="selectUsersByIdsOrMobiles" parameterType="java.util.Map" resultMap="BaseResultMap">
		select
		<if test="userIds != null and userIds !=''">mobile</if>
		<if test="mobiles != null and mobiles !=''">id</if>
		from bs_user u where 1=1
		<if test="userIds != null and userIds !=''">
			and u.id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		<if test="mobiles != null and mobiles !=''">
			and u.mobile in
			<foreach collection="mobiles" item="mobile" index="index" open="(" close=")" separator=",">
				#{mobile}
			</foreach>
		</if>
		order by
		<if test="userIds != null and userIds !=''">u.mobile</if>
		<if test="mobiles != null and mobiles !=''">u.id</if>
		desc
	</select>

	<!-- - 根据id或者手机号查询用户总数 - @auth yanwl - @date 2016-04-15 -->
	<select id="selectUserCountByIdsOrMobiles" parameterType="com.pinting.business.model.vo.BsUserAssetVO"
		resultType="java.lang.Integer">
		select count(*) from bs_user u where 1=1
		<if test="userIds != null and userIds !=''">
			and u.id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		<if test="mobiles != null and mobiles !=''">
			and u.mobile in
			<foreach collection="mobiles" item="mobile" index="index" open="(" close=")" separator=",">
				#{mobile}
			</foreach>
		</if>
	</select>

	<select id="selectBaseUserGrid" parameterType="java.util.Map" resultMap="BaseResultMap">
		select * from bs_user u
		<where>
			<if test="userName != null and userName !=''">
				and u.mobile like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile !=''">
				and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="idCard != null and idCard !=''">
				and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
			</if>
		</where>
		limit #{start}, #{numPerPage}
	</select>

	<select id="selectOwnershipGrid" resultType="com.pinting.business.model.vo.AscriptionChangeUserInfoVO"
		parameterType="com.pinting.business.model.vo.AscriptionChangeUserInfoVO">
		SELECT u.id userId,
		u.user_name userName,
		u.mobile mobile,
		u.id_card idCard,
		u.register_time registerTime,
		ag.agent_name agentName,
		bu.user_name recommendName,
		s.sales_name saleName,
		e.strName managerName
		FROM bs_user u
		LEFT JOIN bs_agent ag on u.agent_id = ag.id
		LEFT JOIN bs_user bu ON u.recommend_id=bu.id
		LEFT JOIN bs_user_sales us ON u.id=us.user_id
		LEFT JOIN bs_sales s ON s.id=us.sales_id
		LEFT JOIN bs_user_customer_manager cm ON cm.user_id=u.id
		LEFT JOIN tbemployee e ON e.lUserId =cm.customer_manager_dafy_id
		where 1 = 1
		<if test="record.mobile != null and record.mobile != ''">
			AND u.mobile = #{record.mobile}
		</if>
		<if test="record.idCard != null and record.idCard != ''">
			AND u.id_card = #{record.idCard}
		</if>
	</select>

	<select id="selectOwnershipDetail" resultType="com.pinting.business.model.vo.AscriptionChangeDetailVO"
		parameterType="java.util.Map">
		SELECT
		u.user_name userName,
		u.mobile userMobile,
		u.register_time registerTime,
		ag.agent_name preAgentName,
		e.strName preManageName,
		e.lUserId preManageId
		FROM bs_user u
		LEFT JOIN bs_agent ag on u.agent_id = ag.id
		LEFT JOIN bs_user_customer_manager cm ON cm.user_id=u.id
		LEFT JOIN tbemployee e ON e.lUserId =cm.customer_manager_dafy_id
		where u.id=#{userId}

	</select>

	<select id="selectResultsDetail" resultType="com.pinting.business.model.vo.AscriptionChangeDetailVO"
		parameterType="java.util.Map">
		SELECT
		count(sa.id) resultsChangeCount,
		SUM(sa.balance) resultsChangeSum
		FROM bs_user u
		LEFT JOIN bs_account a ON a.user_id=u.id
		LEFT JOIN bs_sub_account sa ON sa.account_id=a.id
		where sa.product_type='REG'
		AND sa.open_time &gt;= #{resultsTime}
		AND sa.status NOT IN (1,6)
		AND u.id=#{userId}

	</select>

	<!-- 用户利息回款查询 -->
	<select id="selectUserInterestRepayment" parameterType="com.pinting.business.model.vo.InterestRepaymentVO" resultMap="InterestRepaymentMap">
		SELECT
		d.open_time, e.user_name, e.mobile, d.product_name, d.balance, d.product_rate, f.term, d.last_finish_interest_date, d.`status` AS account_status, b.property_symbol,
		CASE b.property_symbol
		WHEN 'YUN_DAI' THEN
		CASE
		WHEN SUBSTR(f.code,1,2) in('14') THEN
		ROUND(d.balance * 30 / 365 * 0.2, 2)
		ELSE
		ROUND(d.balance * 30 / 365 * 0.24, 2)
		END
		WHEN '7_DAI' THEN
		CASE
		WHEN SUBSTR(f.code,1,2) in('24') THEN
		ROUND(d.balance * 30 / 365 * 0.18, 2)
		ELSE
		ROUND(d.balance * 30 / 365 * 0.2, 2)
		END
		ELSE
		ROUND(d.balance * 30 / 365 * 0.2, 2)
		END AS interest
		FROM
		bs_sys_receive_money a, bs_batch_buy b, bs_batch_buy_detail c, bs_sub_account d, bs_user e, bs_product f
		WHERE
		a.product_order_no = b.send_batch_id
		AND b.id = c.batch_id
		AND c.sub_account_id = d.id
		AND c.user_id = e.id
		AND d.product_id = f.id
		AND a.type = 'INTEREST_RETURN'
		<if test="openTimeStart!=null and openTimeEnd!=null ">
			AND a.pay_finsh_time between #{openTimeStart} and #{openTimeEnd}
		</if>
		ORDER BY
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			${orderField} ${orderDirection},
		</if>
		open_time DESC
		<include refid="sql-global.pagination" />
	</select>

	<!-- 用户利息回款统计 -->
	<select id="selectUserInterestRepaymentCount" parameterType="com.pinting.business.model.vo.InterestRepaymentVO" resultType="java.lang.Integer">
	  SELECT COUNT(*) FROM  (
		SELECT
		e.id
		FROM
		bs_sys_receive_money a,
		bs_batch_buy b,
		bs_batch_buy_detail c,
		bs_sub_account d,
		bs_user e,
		bs_product f
		WHERE
		a.product_order_no = b.send_batch_id
		AND b.id = c.batch_id
		AND c.sub_account_id = d.id
		AND c.user_id = e.id
		AND d.product_id = f.id
		AND a.type = 'INTEREST_RETURN'
		<if test="openTimeStart!=null and openTimeEnd!=null ">
			AND a.pay_finsh_time between #{openTimeStart} and #{openTimeEnd}
		</if>
	  )tab
	</select>

	<select id="selectAmountTrans" parameterType="java.util.Map" resultType="java.lang.Double">
		SELECT ABS(SUM(aaa.real_amount_trans)) FROM (
			SELECT CASE WHEN bbb.repayed_period_count > 0 THEN 0 WHEN bbb.repayed_period_count &lt;= 0 THEN bbb.real_amount_trans END AS real_amount_trans
			FROM (
				SELECT (
				SELECT CASE WHEN SUM(amount-in_amount) IS NULL THEN 0 ELSE SUM(amount-in_amount) END
				FROM ln_credit_transfer cc WHERE cc.in_loan_relation_id = a.id
			) AS real_amount_trans,(
				SELECT COUNT(aa.id)
				FROM ln_finance_repay_schedule aa, ln_loan_relation bb
				WHERE aa.relation_id = bb.id AND bb.bs_user_id = #{userId} AND bb.bs_sub_account_id = regd.id
				AND aa.`status` = 'REPAIED' AND bb.id = a.id
			) AS repayed_period_count
				FROM ln_loan_relation a, bs_sub_account regd
				WHERE a.bs_sub_account_id = regd.id AND a.bs_user_id = #{userId}
			) AS bbb
		) aaa
	</select>
	<select id="selectAmountTransGroup" parameterType="java.util.Map" resultType="map">
		SELECT bbb.bs_user_id AS user_id, ABS(SUM(CASE WHEN bbb.repayed_period_count > 0 THEN 0 WHEN bbb.repayed_period_count &lt;= 0 THEN bbb.real_amount_trans END )) AS real_amount_trans
		FROM (
			SELECT (
				SELECT CASE WHEN SUM(amount-in_amount) IS NULL THEN 0 ELSE SUM(amount-in_amount) END
				FROM ln_credit_transfer cc WHERE cc.in_loan_relation_id = a.id
			) AS real_amount_trans,(
				SELECT COUNT(aa.id)
				FROM ln_finance_repay_schedule aa, ln_loan_relation bb
				WHERE aa.relation_id = bb.id AND bb.bs_sub_account_id = regd.id
				AND aa.`status` = 'REPAIED' AND bb.id = a.id
			) AS repayed_period_count, a.bs_user_id
			FROM ln_loan_relation a, bs_sub_account regd
			WHERE a.bs_sub_account_id = regd.id
		) AS bbb
		GROUP BY bbb.bs_user_id
	</select>

	
	<select id="selectUserById" resultMap="BsUserAssetResultMap" parameterType="java.util.Map">
		SELECT 
		u.user_name, u.id_card, u.mobile, b.mobile reserved_mobile, b.card_no AS cardNo,
		(YEAR (curdate())-IF (length(u.id_card) = 18,substring(u.id_card, 7, 4),
		IF (length(u.id_card) =15,concat('19',substring(u.id_card, 7, 2)),YEAR (curdate())))) as age,
		(case if(length(u.id_card)=18, cast(substring(u.id_card,17,1) as UNSIGNED)%2,
		if(length(u.id_card)=15,cast(substring(u.id_card,15,1) as UNSIGNED)%2,3))
		when 1 then '男' when 0 then '女' else '' end) as gender 
		FROM bs_user u, bs_bank_card b
		WHERE u.id = b.user_id 
		AND b.status = 1
		AND b.is_first = 1
		AND u.id = #{userId}
	</select>

	<select id="selectRecentUserById" resultMap="BsUserAssetResultMap" parameterType="java.util.Map">
		SELECT
		u.user_name, u.id_card, u.mobile, b.mobile reserved_mobile, b.card_no AS cardNo,b.status,
		(YEAR (curdate())-IF (length(u.id_card) = 18,substring(u.id_card, 7, 4),
		IF (length(u.id_card) =15,concat('19',substring(u.id_card, 7, 2)),YEAR (curdate())))) as age,
		(case if(length(u.id_card)=18, cast(substring(u.id_card,17,1) as UNSIGNED)%2,
		if(length(u.id_card)=15,cast(substring(u.id_card,15,1) as UNSIGNED)%2,3))
		when 1 then '男' when 0 then '女' else '' end) as gender
		FROM bs_user u, bs_bank_card b
		WHERE u.id = b.user_id
		AND exists (select test.id from (select id from(select id,user_id from bs_bank_card where is_first = 1 order by bind_time DESC) aa group by user_id) test where test.id = b.id)
		AND u.id = #{userId}
	</select>
	
	<!-- ========================委托计划投资购买查询S ===================== -->
	
	<resultMap type="com.pinting.business.model.vo.UserBuyMessageEntrustVO" id="userBuyMessageEntrustResult" >
		<result column="user_id" property="userId" />
		<result column="mobile" property="mobile" />
		<result column="user_name" property="userName" />
		<result column="property_symbol" property="propertySymbol" />
		<result column="order_no" property="orderNo" />
		<result column="term" property="term" />
		<result column="base_rate" property="baseRate" />
		<result column="amount" property="amount" />
		<result column="status" property="status" />
		<result column="loan_time" property="loanTime" />
		<result column="repay_time" property="repayTime" />
		<result column="agent_name" property="agentName" />
	</resultMap>
	
	
	<select id="selectUserBuyMessageEntrustList" parameterType="com.pinting.business.model.vo.UserBuyMessageEntrustVO" resultMap="userBuyMessageEntrustResult">
		SELECT * FROM
		(
		SELECT
			za.bs_user_id user_id,
			CONCAT(LEFT(zb.mobile,3),'****',RIGHT(zb.mobile,4)) mobile,
			zb.user_name,
			zf.property_symbol,
			zh.order_no	order_no,
			ze.term,
			ze.base_rate,
			CASE WHEN zm.id IS NOT NULL THEN 
			zm.amount 
			ELSE 
			za.total_amount 
			END  amount,
			CASE WHEN zn.id IS NOT NULL THEN
				zn.`status`
			ELSE
			za.`status` 
			END `status`,
			zg.loan_time loan_time,
			CASE WHEN zn.id IS NOT NULL THEN
				zn.update_time 
			ELSE
				za.update_time 
			END repay_time,
			zj.agent_name agent_name
		FROM
			`ln_loan_relation` za LEFT JOIN ln_credit_transfer zl ON za.id = zl.in_loan_relation_id
			LEFT JOIN ln_credit_transfer zm ON za.id = zm.out_loan_relation_id
			LEFT JOIN ln_loan_relation zn ON  zm.in_loan_relation_id = zn.id,
			bs_user zb LEFT JOIN  bs_agent zj on zb.agent_id=zj.id,
			bs_sub_account zd ,
			bs_product ze,
			bs_property_info zf,
			ln_loan zg,
			bs_sub_account_pair zi,
			bs_sub_account zk LEFT JOIN  bs_pay_orders zh  ON zk.id = zh.sub_account_id AND zh.`status` = 6
		WHERE
		zl.id IS NULL
		AND za.bs_user_id = zb.id
		AND za.bs_sub_account_id = zd.id
		AND zd.product_id = ze.id
		AND ze.property_id = zf.id
		AND za.loan_id = zg.id
		AND zd.id = zi.reg_d_account_id
		AND zi.auth_account_id = zk.id
		AND (za.`status` = 'SUCCESS'  
		OR za.`status` = 'REPAID')
		
		<if test="mobile != null and mobile != '' ">
			and zb.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null and userName != '' ">
			and zb.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="orderNo != null and orderNo != '' ">
			and zh.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
		</if>
		<if test="loanBeginTime != null and loanEndTime != null and loanBeginTime != '' and loanEndTime!= '' ">
			and zg.loan_time  between #{loanBeginTime} and DATE_ADD(#{loanEndTime},INTERVAL 1 DAY)
		</if>

		<if test="startRate != null and startRate > 0 ">
			and ze.base_rate >= #{startRate}
		</if>
		<if test="endRate != null and endRate > 0 ">
			and #{endRate} >= ze.base_rate
		</if>
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
			and (zf.property_symbol = #{propertySymbol} OR zf.property_symbol IS NULL )
		</if>
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
			and zf.property_symbol = #{propertySymbol}
		</if>
		<if test="term != null and term != ''  ">
			and ze.term = #{term}
		</if>
		<if test="agentIdsObj != null and agentIdsObj !='' and (nonAgentId == null or nonAgentId == '')">
			and zb.agent_id in
			<foreach collection="agentIdsObj" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIdsObj == null or agentIdsObj =='' ) and nonAgentId != null and nonAgentId != ''">
			and zb.agent_id is null
		</if>
		<if test="agentIdsObj != null and agentIdsObj !='' and nonAgentId != null and nonAgentId != ''">
			and (zb.agent_id in
			<foreach collection="agentIdsObj" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or zb.agent_id is null)
		</if>
		
		<if test="orderDirection!=null and orderDirection != ''  and orderField != ''  and orderField!=null ">
			order by ${orderField} ${orderDirection}
		</if> 
		) aa WHERE 1=1
		<if test="beginAmount != null and beginAmount > 0 ">
			and aa.amount >= #{beginAmount}
		</if>
		<if test="endAmount != null and endAmount > 0 ">
			and #{endAmount} >= aa.amount
		</if>
		<if test="status != null and status != '' ">
			and aa.`status` = #{status}
		</if>
		<if test="repayBeginTime != null and repayEndTime != null and repayBeginTime != '' and repayEndTime!= '' ">
			and aa.repay_time  between #{repayBeginTime} and DATE_ADD(#{repayEndTime},INTERVAL 1 DAY)
			and aa.`status` = 'REPAID'
		</if>
		<include refid="sql-global.pagination" />
		
	</select>

	<select id="countUserBuyMessageEntrustList" parameterType="com.pinting.business.model.vo.UserBuyMessageEntrustVO" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM(
			SELECT
				za.bs_user_id user_id,
				CONCAT(LEFT(zb.mobile,3),'****',RIGHT(zb.mobile,4)) mobile,
				zb.user_name,
				zf.property_symbol,
				zh.order_no	order_no,
				ze.term,
				ze.base_rate,
				CASE WHEN zm.id IS NOT NULL THEN 
				zm.amount 
				ELSE 
				za.total_amount 
				END  amount,
				CASE WHEN zn.id IS NOT NULL THEN
					zn.`status`
				ELSE
					za.`status` 
				END `status`,
				zg.loan_time loan_time,
				CASE WHEN zn.id IS NOT NULL THEN
					zn.update_time 
				ELSE
					za.update_time 
				END repay_time,
				zj.agent_name agent_name
			FROM
				`ln_loan_relation` za  LEFT JOIN ln_credit_transfer zl ON za.id = zl.in_loan_relation_id
				LEFT JOIN ln_credit_transfer zm ON za.id = zm.out_loan_relation_id
				LEFT JOIN ln_loan_relation zn ON  zm.in_loan_relation_id = zn.id,
				bs_user zb LEFT JOIN  bs_agent zj on zb.agent_id=zj.id,
				bs_sub_account zd ,
				bs_product ze,
				bs_property_info zf,
				ln_loan zg,
				bs_sub_account_pair zi,
				bs_sub_account zk LEFT JOIN  bs_pay_orders zh  ON zk.id = zh.sub_account_id AND zh.`status` = 6
			WHERE
			zl.id IS NULL
			AND za.bs_user_id = zb.id
			AND za.bs_sub_account_id = zd.id
			AND zd.product_id = ze.id
			AND ze.property_id = zf.id
			AND za.loan_id = zg.id
			AND zd.id = zi.reg_d_account_id
			AND zi.auth_account_id = zk.id
			AND (za.`status` = 'SUCCESS'  
			OR za.`status` = 'REPAID')
			
			<if test="mobile != null and mobile != '' ">
				and zb.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="userName != null and userName != '' ">
				and zb.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="orderNo != null and orderNo != '' ">
				and zh.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
			</if>
			<if test="loanBeginTime != null and loanEndTime != null and loanBeginTime != '' and loanEndTime!= '' ">
				and zg.loan_time  between #{loanBeginTime} and DATE_ADD(#{loanEndTime},INTERVAL 1 DAY)
			</if>

			<if test="startRate != null and startRate > 0 ">
				and ze.base_rate >= #{startRate}
			</if>
			<if test="endRate != null and endRate > 0 ">
				and #{endRate} >= ze.base_rate
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
				and (zf.property_symbol = #{propertySymbol} OR zf.property_symbol IS NULL )
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
				and zf.property_symbol = #{propertySymbol}
			</if>

			<if test="term != null and term != ''  ">
				and ze.term = #{term}
			</if>
			<if test="agentIdsObj != null and agentIdsObj !='' and (nonAgentId == null or nonAgentId == '')">
				and zb.agent_id in
				<foreach collection="agentIdsObj" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
			</if>
			<if test="(agentIdsObj == null or agentIdsObj =='' ) and nonAgentId != null and nonAgentId != ''">
				and zb.agent_id is null
			</if>
			<if test="agentIdsObj != null and agentIdsObj !='' and nonAgentId != null and nonAgentId != ''">
				and (zb.agent_id in
				<foreach collection="agentIdsObj" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
				or zb.agent_id is null)
			</if>
		) aa  WHERE 1=1
		<if test="beginAmount != null and beginAmount > 0 ">
			and aa.amount >= #{beginAmount}
		</if>
		<if test="endAmount != null and endAmount > 0 ">
			and #{endAmount} >= aa.amount
		</if>
		<if test="status != null and status != ''  ">
			and aa.`status` = #{status}
		</if>
		<if test="repayBeginTime != null and repayEndTime != null and repayBeginTime != '' and repayEndTime!= '' ">
			and aa.repay_time  between #{repayBeginTime} and DATE_ADD(#{repayEndTime},INTERVAL 1 DAY)
			and aa.`status` = 'REPAID'
		</if>

	</select>
	
	
	<select id="sumUserBuyMessageEntrustList" parameterType="com.pinting.business.model.vo.UserBuyMessageEntrustVO" resultType="java.lang.Double">
		SELECT SUM(aa.amount) FROM(
			SELECT
					za.bs_user_id user_id,
					CONCAT(LEFT(zb.mobile,3),'****',RIGHT(zb.mobile,4)) mobile,
					zb.user_name,
					zf.property_symbol,
					zh.order_no	order_no,
					ze.term,
					ze.base_rate,
					CASE WHEN zm.id IS NOT NULL THEN 
					zm.amount 
					ELSE 
					za.total_amount 
					END  amount,
					CASE WHEN zn.id IS NOT NULL THEN
						zn.`status`
					ELSE
					za.`status` 
					END `status`,
					zg.loan_time loan_time,
					CASE WHEN zn.id IS NOT NULL THEN
						zn.update_time 
					ELSE
						za.update_time 
					END repay_time,
					zj.agent_name agent_name
			FROM
				`ln_loan_relation` za LEFT JOIN ln_credit_transfer zl ON za.id = zl.in_loan_relation_id
				LEFT JOIN ln_credit_transfer zm ON za.id = zm.out_loan_relation_id
				LEFT JOIN ln_loan_relation zn ON  zm.in_loan_relation_id = zn.id,
				bs_user zb LEFT JOIN  bs_agent zj on zb.agent_id=zj.id,
				bs_sub_account zd ,
				bs_product ze,
				bs_property_info zf,
				ln_loan zg,
				bs_sub_account_pair zi,
				bs_sub_account zk LEFT JOIN  bs_pay_orders zh  ON zk.id = zh.sub_account_id AND zh.`status` = 6
			WHERE
			zl.id IS NULL
			AND za.bs_user_id = zb.id
			AND za.bs_sub_account_id = zd.id
			AND zd.product_id = ze.id
			AND ze.property_id = zf.id
			AND za.loan_id = zg.id
			AND zd.id = zi.reg_d_account_id
			AND zi.auth_account_id = zk.id
			AND (za.`status` = 'SUCCESS'  
			OR za.`status` = 'REPAID')
		
			<if test="mobile != null and mobile != '' ">
				and zb.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="userName != null and userName != '' ">
				and zb.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="orderNo != null and orderNo != '' ">
				and zh.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
			</if>
			<if test="loanBeginTime != null and loanEndTime != null and loanBeginTime != '' and loanEndTime!= '' ">
				and zg.loan_time  between #{loanBeginTime} and DATE_ADD(#{loanEndTime},INTERVAL 1 DAY)
			</if>
			<if test="startRate != null and startRate > 0 ">
				and ze.base_rate >= #{startRate}
			</if>
			<if test="endRate != null and endRate > 0 ">
				and #{endRate} >= ze.base_rate
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
				and (zf.property_symbol = #{propertySymbol} OR zf.property_symbol IS NULL )
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
				and zf.property_symbol = #{propertySymbol}
			</if>

			<if test="term != null and term != ''  ">
				and ze.term = #{term}
			</if>
			<if test="agentIdsObj != null and agentIdsObj !='' and (nonAgentId == null or nonAgentId == '')">
				and zb.agent_id in
				<foreach collection="agentIdsObj" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
			</if>
			<if test="(agentIdsObj == null or agentIdsObj =='' ) and nonAgentId != null and nonAgentId != ''">
				and zb.agent_id is null
			</if>
			<if test="agentIdsObj != null and agentIdsObj !='' and nonAgentId != null and nonAgentId != ''">
				and (zb.agent_id in
				<foreach collection="agentIdsObj" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
				or zb.agent_id is null)
			</if>
		) aa WHERE 1=1
		<if test="beginAmount != null and beginAmount > 0 ">
			and aa.amount >= #{beginAmount}
		</if>
		<if test="endAmount != null and endAmount > 0 ">
			and #{endAmount} >= aa.amount
		</if>
		<if test="status != null and status != ''  ">
			and aa.`status` = #{status}
		</if>
		<if test="repayBeginTime != null and repayEndTime != null and repayBeginTime != '' and repayEndTime!= '' ">
			and aa.repay_time  between #{repayBeginTime} and DATE_ADD(#{repayEndTime},INTERVAL 1 DAY)
			and aa.`status` = 'REPAID'
		</if>
	</select>
	
	
    <!-- ========================委托计划投资购买查询S ===================== -->








	<select id="countUserBuyMessageListForZan" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM (
		select
		tt.id,
		tt.nick,
		tt.preMobile,
		tt.afterMobile,
		tt.userName,
		tt.idCard,
		tt.recommendId,
		tt.agentId,
		tt.term,
		tt.productName,
		tt.rate,
		tt.buyBankCard,
		CASE WHEN tt.property_symbol = 'ZAN' THEN
		CASE WHEN bb.r_amount IS NULL THEN 0.0
		ELSE bb.r_amount END
		ELSE
		tt.balance
		END balance,
		tt.bindBankCard,
		tt.bindBankName,
		tt.openTime,
		tt.investEndTime,
		tt.accountStatus,
		tt.subAccountId,
		tt.buyBankName,
		tt.orderNo,
		tt.returnCode,
		tt.returnMsg,
		tt.agentName,
		tt.bankName,
		tt.property_symbol
		from (
		SELECT
		u.id id,
		u.nick nick,
		SUBSTRING(u.mobile,1,3) preMobile,
		SUBSTRING(u.mobile,8,4) afterMobile,
		u.user_name userName,
		u.id_card idCard,
		u.recommend_id recommendId,
		u.agent_id agentId,
		p.term term,
		s.product_name productName,
		s.product_rate rate,
		s.bank_card buyBankCard,
		s.balance balance,
		b.card_no bindBankCard,
		b.bank_name bindBankName,
		s.open_time openTime,
		s.last_finish_interest_date investEndTime,
		s.status accountStatus,
		s.id subAccountId,
		<!-- s.sm bonus, -->
		od.bank_name buyBankName,
		od.order_no orderNo,
		od.return_code returnCode,
		od.return_msg returnMsg,
		ag.agent_name agentName,
		bk.name bankName,
		d.property_symbol
		from bs_account a, bs_user u left join bs_agent ag on u.agent_id=ag.id,bs_sub_account s,
		bs_bank_card b , bs_product p left join bs_property_info d on p.property_id = d.id,bs_pay_orders od left join bs_bank bk on
		od.bank_id = bk.id
		where
		u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.status in (1,5)
		and s.product_id = p.id and od.sub_account_id=s.id
		<!-- 投资购买 1、 CARD_BUY_PRODUCT 卡购买; 2、BALANCE_BUY_PRODUCT 余额购买 -->
		and od.trans_type in('CARD_BUY_PRODUCT', 'BALANCE_BUY_PRODUCT') and od.account_type = 1
		and  d.property_symbol != 'YUN_DAI_SELF'

		<if test="productId != null and productId > 0  ">
			and p.id = #{productId}
		</if>
		<if test="orderNo != null and orderNo != '' ">
			and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
		</if>
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard != null and idCard != '' ">
			and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBankCard != null and buyBankCard != '' ">
			and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankCard != null and bindBankCard != '' ">
			and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="accountStatus == null or 0 >= accountStatus">
			and s.`status` in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null and accountStatus > 0 ">
			and s.status = #{accountStatus}
		</if>
		<if test="term != null and term != 0 ">
			and p.term = #{term}
		</if>
		<if test="productCode != null and productCode != '' ">
			and s.product_id = #{productCode}
		</if>
		<if test="propertySymbol != 'ZAN'">
			<if test="beginAmount != null and beginAmount > 0 ">
				and s.balance >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= s.balance
			</if>
		</if>
		<if test="beginTime != null and endTime != null and beginTime != '' and endTime!= '' ">
			and s.interest_begin_date between #{beginTime} and #{endTime}
		</if>
		<if test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
			and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
		</if>
		<if test="agentName != null and agentName == 'NO' ">
			and ag.agent_name IS NULL
		</if>
		<if test="agentName != null and agentName != 'NO'">
			and ag.agent_name = #{agentName}
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
			and od.bank_id is null
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1'">
			and od.bank_id = #{buyBankType}
		</if>
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
			and (d.property_symbol = #{propertySymbol} OR d.property_symbol IS NULL )
		</if>
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
			and d.property_symbol = #{propertySymbol}
		</if>
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and u.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and u.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (u.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or u.agent_id is null)
		</if>
		<if test="rate != null and rate != '' ">
			and p.base_rate = #{rate}
		</if>
		<if test="startRate != null and startRate > 0 ">
			and s.product_rate >= #{startRate}
		</if>
		<if test="endRate != null and endRate > 0 ">
			and #{endRate} >= s.product_rate
		</if>
		GROUP BY s.id
		)	tt
		LEFT JOIN
		(
		select  SUM(r.total_amount) r_amount,bp.auth_account_id a_sub,r.bs_sub_account_id r_sub from ln_loan_relation r, ln_loan l,bs_sub_account_pair bp where
		bp.reg_d_account_id=r.bs_sub_account_id and
		r.loan_id=l.id and r.`status`!='FAIL' and r.`status`!='PAYING' and r.total_amount>0 GROUP BY r.bs_sub_account_id
		) bb on tt.subAccountId=bb.a_sub
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'ZAN'">
			<where>
				<if test="beginAmount != null and beginAmount > 0 ">
					and bb.r_amount >= #{beginAmount}
				</if>
				<if test="endAmount != null and endAmount > 0 ">
					and #{endAmount} >= bb.r_amount
				</if>
			</where>
		</if>
		) aaa
	</select>


	<select id="selectUserBuySumBalanceForZan" parameterType="com.pinting.business.model.vo.BsStatisticsVO" resultType="java.lang.Double">
		SELECT sum(balance) from (
		select
		CASE WHEN tt.property_symbol = 'ZAN' THEN
		CASE WHEN bb.r_amount IS NULL THEN 0.0
		ELSE bb.r_amount END
		ELSE
		tt.balance
		END balance,
		tt.orderNo

		from (

		SELECT
		s.balance,od.order_no orderNo,d.property_symbol,
		s.id subAccountId
		from bs_account a, bs_user u, bs_sub_account s , bs_bank_card b , bs_product p left join bs_property_info d on
		p.property_id = d.id,bs_pay_orders od
		where
		u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.status in (1,5)
		and s.product_id = p.id and od.sub_account_id=s.id
		and od.trans_type in('CARD_BUY_PRODUCT', 'BALANCE_BUY_PRODUCT') and od.account_type = 1
		and  d.property_symbol != 'YUN_DAI_SELF'
		<if test="userName != null and userName != '' ">
			and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != '' ">
			and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="idCard != null and idCard != '' ">
			and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBankCard != null and buyBankCard != '' ">
			and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="bindBankCard != null and bindBankCard != '' ">
			and b.card_no like concat(concat('%', #{bindBankCard,jdbcType=VARCHAR}),'%')
		</if>
		<if test="accountStatus != null and accountStatus > 0 ">
			and s.status = #{accountStatus}
		</if>
		<if test="term != null and term != 0">
			and p.term = #{term}
		</if>
		<if test="propertySymbol != 'ZAN'">
			<if test="beginAmount != null and beginAmount > 0 ">
				and s.balance >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= s.balance
			</if>
		</if>
		<if test="beginTime != null and endTime != null and beginTime != '' and endTime!= '' ">
			and s.interest_begin_date between #{beginTime} and #{endTime}
		</if>
		<if test="productCode != null ">
			and s.product_id = #{productCode}
		</if>
		<if
				test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
			and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
			and od.bank_id is null
		</if>
		<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1'">
			and od.bank_id = #{buyBankType}
		</if>
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI'">
			and (d.property_symbol = #{propertySymbol} OR d.property_symbol IS NULL )
		</if>
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol != 'YUN_DAI'">
			and d.property_symbol = #{propertySymbol}
		</if>
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and u.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and u.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (u.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or u.agent_id is null)
		</if>
		<if test="rate != null and rate != '' ">
			and p.base_rate = #{rate}
		</if>
		<if test="startRate != null and startRate > 0 ">
			and s.product_rate >= #{startRate}
		</if>
		<if test="endRate != null and endRate > 0 ">
			and #{endRate} >= s.product_rate
		</if>
		GROUP BY s.id
		)	tt
		LEFT JOIN
		(
		select  SUM(r.total_amount) r_amount,bp.auth_account_id a_sub,r.bs_sub_account_id r_sub from ln_loan_relation r, ln_loan l,bs_sub_account_pair bp where
		bp.reg_d_account_id=r.bs_sub_account_id and
		r.loan_id=l.id and r.`status`!='FAIL' and r.`status`!='PAYING' and r.total_amount>0 GROUP BY r.bs_sub_account_id
		) bb on tt.subAccountId=bb.a_sub
		<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'ZAN'">
			WHERE bb.r_amount > 0
			<if test="beginAmount != null and beginAmount > 0 ">
				and bb.r_amount >= #{beginAmount}
			</if>
			<if test="endAmount != null and endAmount > 0 ">
				and #{endAmount} >= bb.r_amount
			</if>
		</if>
		) test
	</select>
	<select id="selectYunDaiSelfCreditor"  resultMap="BaseResultMap" >
		SELECT * FROM bs_user
		WHERE id = (SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_COMPENSATE_USER_ID')
	</select>

	<resultMap id="waiteActivateInfoVOMap" type="com.pinting.business.model.vo.WaiteActivateInfoVO">
		<result column="mobile" property="mobile" />
		<result column="user_name" property="userName" />
		<result column="id_card" property="idCard" />
		<result column="card_no" property="cardNo" />
		<result column="bank_name" property="bankName" />
		<result column="hf_user_id" property="hfUserId" />
	</resultMap>
	<!-- 恒丰激活信息 -->
	<select id="selectWaiteActivateInfo" resultMap="waiteActivateInfoVOMap" parameterType="java.util.Map">
		SELECT a.user_name, b.mobile, b.id_card, b.card_no, b.bank_name, c.hf_user_id
		FROM bs_user a, bs_bank_card b, bs_hfbank_user_ext c
		WHERE a.id = #{userId} AND b.user_id = a.id AND a.id = c.user_id AND c.`status` != 'CANCEL' AND b.`status` = 1
	</select>


	<!-- ========================存管投资购买查询S ===================== -->

	<resultMap type="com.pinting.business.model.vo.BsStatisticsDepVO" id="userBuyMessageDepResult" extends="BaseResultMap">
		<result column="term" property="term" />
		<result column="rate" property="rate" />
		<result column="buyBankCard" property="buyBankCard" />
		<result column="bindBankCard" property="bindBankCard" />
		<result column="bindBankName" property="bindBankName" />
		<result column="productName" property="productName" />
		<result column="openTime" property="openTime" />
		<result column="investEndTime" property="investEndTime" />
		<result column="accountStatus" property="accountStatus" />
		<result column="agentName" property="agentName" />
		<result column="settlementAmount" property="settlementAmount" />
		<result column="orderNo" property="orderNo" />
		<result column="returnCode" property="returnCode" />
		<result column="returnMsg" property="returnMsg" />
		<result column="accountType" property="accountType" />
		<result column="orderStatus" property="orderStatus" />
		<result column="bankName" property="bankName" />
		<result column="recommendId" property="recommendId" />
		<result column="agentId" property="agentId" />
		<result column="bonus" property="bonus" />
		<result column="property_symbol" property="propertySymbol" jdbcType="VARCHAR" />
		<result column="property_name" property="propertyName" jdbcType="VARCHAR" />
		<result column="loan_time" property="loanTime" jdbcType="TIMESTAMP" />
		<result column="openBalance" property="buyBalance" />
	</resultMap>

	<select id="selectUserBuyMessageListForDep" parameterType="com.pinting.business.model.vo.BsStatisticsDepVO" resultMap="userBuyMessageDepResult">
			SELECT
				tt.id,
				tt.preMobile,
				tt.afterMobile,
				tt.userName,
				tt.agentId,
				tt.term,
				tt.productName,
				tt.rate,
				tt.open_balance buyBalance,
				tt.openTime,
				tt.investEndTime,
				tt.accountStatus,
				tt.subAccountId,
				tt.orderNo,
				tt.agentName,
				tt.property_symbol,
				(
						SELECT
							CASE WHEN SUM(r.left_amount) IS NULL THEN 0 ELSE SUM(r.left_amount) END  r_amount
							
							<if test="productType != null and productType != '' and productType != 'AUTH'">
								FROM
								ln_loan_relation r,
								bs_sub_account s
								WHERE r.bs_sub_account_id = s.id
								AND r.`status` NOT IN ('FAIL', 'PAYING')
								AND r.left_amount > 0
								and s.product_type = #{productType}
								AND s.id = tt.subAccountId
							</if>
							<if test="productType != null and productType != '' and productType == 'AUTH'">
								FROM
								ln_loan_relation r,
								bs_sub_account s, bs_sub_account_pair p, bs_sub_account auth
								WHERE r.bs_sub_account_id = s.id
								AND r.`status` NOT IN ('FAIL', 'PAYING')
								AND r.left_amount > 0
								and s.product_type = 'REG_D' and s.id = p.reg_d_account_id and auth.id = p.auth_account_id
								AND s.id = tt.subAccountId
							</if>
							<if test="beginAmount != null ">
								and r.left_amount >= #{beginAmount}
							</if>
							<if test="endAmount != null">
								and #{endAmount} >= r.left_amount
							</if>
						) balance
			FROM
				(
				SELECT
					u.id id,
					SUBSTRING(u.mobile, 1, 3) preMobile,
					SUBSTRING(u.mobile, 8, 4) afterMobile,
					u.user_name userName,
					u.agent_id agentId,
					p.term term,
					s.product_name productName,
					s.product_rate rate,
					s.open_balance + CASE
				WHEN s2.open_balance IS NULL THEN
					0
				ELSE
					s2.open_balance
				END open_balance,
				s.open_time openTime,
				s.last_finish_interest_date investEndTime,
				s. STATUS accountStatus,
				s.id subAccountId,
				od.order_no orderNo,
				ag.agent_name agentName,
				d.property_symbol
			FROM
				bs_account a
			INNER JOIN bs_user u ON u.id = a.user_id
			INNER JOIN bs_sub_account s ON s.account_id = a.id
			INNER JOIN bs_pay_orders od ON (
				od.sub_account_id = s.id
				AND od.trans_type = 'BALANCE_BUY_PRODUCT'
				AND od.account_type = 1
			)
			INNER JOIN bs_product p ON p.id = s.product_id
			INNER JOIN bs_bank_card b ON (
				b. STATUS IN (1, 5)
				AND b.user_id = u.id
			)
			LEFT JOIN bs_agent ag ON u.agent_id = ag.id
			LEFT JOIN bs_sub_account_pair sa ON s.id = sa.auth_account_id
			LEFT JOIN bs_sub_account s2 ON sa.red_account_id = s2.id
			LEFT JOIN bs_property_info d ON p.property_id = d.id
			where 1=1
			<if test="productId != null and productId > 0  ">
				and p.id = #{productId}
			</if>
			<if test="orderNo != null and orderNo != '' ">
				and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
			</if>
			<if test="userName != null and userName != '' ">
				and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="idCard != null and idCard != '' ">
				and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="buyBankCard != null and buyBankCard != '' ">
				and s.bank_card like concat(concat('%', #{buyBankCard,jdbcType=VARCHAR}),'%')
			</if>
			<if test="accountStatus == null or 0 >= accountStatus">
				and s.`status` in (2,5,7)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and s.status = #{accountStatus}
			</if>
			<if test="term != null and term != 0 ">
				and p.term = #{term}
			</if>
			<if test="productCode != null and productCode != '' ">
				and s.product_id = #{productCode}
			</if>
			<if test="productType != null and productType != '' and productType != 'AUTH'">
				and s.product_type = #{productType}
			</if>
			<if test="productType != null and productType != '' and productType == 'AUTH'">
				and s.product_type = 'REG_D'
			</if>
			<if test="beginTime != null and endTime != null and beginTime != '' and endTime!= '' ">
				and s.interest_begin_date between #{beginTime} and #{endTime}
			</if>
			<if test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
				and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
			</if>
			<if test="agentName != null and agentName == 'NO' ">
				and ag.agent_name IS NULL
			</if>
			<if test="agentName != null and agentName != 'NO'">
				and ag.agent_name = #{agentName}
			</if>
			<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
				and u.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
			</if>
			<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
				and u.agent_id is null
			</if>
			<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
				and (u.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
				or u.agent_id is null)
			</if>
			GROUP BY s.id
			ORDER BY s.open_time DESC
			<include refid="sql-global.pagination" />
			)	tt
	</select>

	<select id="countUserBuyMessageListForDep" parameterType="com.pinting.business.model.vo.BsStatisticsDepVO" resultType="java.lang.Integer">
			SELECT
				COUNT( tt.id ) 
			FROM
				(
			SELECT
				u.id id 
			FROM
				bs_account a
				INNER JOIN bs_user u ON u.id = a.user_id
				INNER JOIN bs_sub_account s ON s.account_id = a.id 
				INNER JOIN bs_pay_orders od ON (
					od.sub_account_id = s.id
					AND od.trans_type = 'BALANCE_BUY_PRODUCT'
					AND od.account_type = 1
				)
				INNER JOIN bs_product p ON p.id = s.product_id
				INNER JOIN bs_bank_card b ON (
					b. STATUS IN (1, 5)
					AND b.user_id = u.id
				)
				LEFT JOIN bs_agent ag ON u.agent_id = ag.id
				where 1=1
				<if test="productId != null and productId > 0  ">
					and p.id = #{productId}
				</if>
				<if test="orderNo != null and orderNo != '' ">
					and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
				</if>
				<if test="userName != null and userName != '' ">
					and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
				</if>
				<if test="mobile != null and mobile != '' ">
					and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
				</if>
				<if test="idCard != null and idCard != '' ">
					and u.id_card like concat(concat('%', #{idCard,jdbcType=VARCHAR}),'%')
				</if>
				<if test="accountStatus == null or 0 >= accountStatus">
					and s.`status` in (2,5,7)
				</if>
				<if test="accountStatus != null and accountStatus > 0 ">
					and s.status = #{accountStatus}
				</if>
				<if test="term != null and term != 0 ">
					and p.term = #{term}
				</if>
				<if test="productCode != null and productCode != '' ">
					and s.product_id = #{productCode}
				</if>
				<if test="beginTime != null and endTime != null and beginTime != '' and endTime!= '' ">
					and s.interest_begin_date between #{beginTime} and #{endTime}
				</if>
				<if test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
					and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
				</if>
				<if test="agentName != null and agentName == 'NO' ">
					and ag.agent_name IS NULL
				</if>
				<if test="agentName != null and agentName != 'NO'">
					and ag.agent_name = #{agentName}
				</if>
				<if test="buyBankType != null and buyBankType != '' and buyBankType =='-1'">
					and od.bank_id is null
				</if>
				<if test="buyBankType != null and buyBankType != '' and buyBankType !='-1'">
					and od.bank_id = #{buyBankType}
				</if>
				<if test="productType != null and productType != '' and productType != 'AUTH'">
					and s.product_type = #{productType}
				</if>
				<if test="productType != null and productType != '' and productType == 'AUTH'">
					and s.product_type = 'REG_D'
				</if>
				<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
					and u.agent_id in
					<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
						#{agentId}
					</foreach>
				</if>
				<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
					and u.agent_id is null
				</if>
				<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
					and (u.agent_id in
					<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
						#{agentId}
					</foreach>
					or u.agent_id is null)
				</if>
				GROUP BY s.id
			)	tt
	</select>
	
	<select id="selectUserBuySumBalanceForDep" parameterType="com.pinting.business.model.vo.BsStatisticsDepVO" resultType="java.lang.Double">
			select
				SUM(bb.r_amount)
			from (
				SELECT
				s.balance,od.order_no orderNo,d.property_symbol,
				s.id subAccountId
				from bs_account a, bs_user u, bs_sub_account s , bs_bank_card b , bs_product p left join bs_property_info d on
				p.property_id = d.id,bs_pay_orders od
				where
				u.id = a.user_id and a.id = s.account_id and u.id = b.user_id and b.status in (1,5)
				and s.product_id = p.id and od.sub_account_id=s.id
				and od.trans_type = 'BALANCE_BUY_PRODUCT' and od.account_type = 1
				<if test="mobile != null and mobile != '' ">
					and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
				</if>
				<if test="userName != null and userName != '' ">
					and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
				</if>
				<if test="orderNo != null and orderNo != '' ">
					and od.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
				</if>
				<if test="settleAccountsBeginTime != null and settleAccountsEndTime != null and settleAccountsBeginTime != '' and settleAccountsEndTime != '' ">
					and s.last_finish_interest_date between #{settleAccountsBeginTime} and #{settleAccountsEndTime}
				</if>
				<if test="beginTime != null and endTime != null and beginTime != '' and endTime!= '' ">
					and s.interest_begin_date between #{beginTime} and #{endTime}
				</if>
				<if test="propertySymbol != null and propertySymbol != ''">
					and d.property_symbol = #{propertySymbol}
				</if>
				<if test="accountStatus == null or 0 >= accountStatus">
					and s.`status` in (2,5,7)
				</if>
				<if test="accountStatus != null and accountStatus > 0 ">
					and s.status = #{accountStatus}
				</if>
				<if test="term != null and term != 0 ">
					and p.term = #{term}
				</if>
				<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
					and u.agent_id in
					<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
						#{agentId}
					</foreach>
				</if>
				<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
					and u.agent_id is null
				</if>
				<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
					and (u.agent_id in
					<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
						#{agentId}
					</foreach>
					or u.agent_id is null)
				</if>
				GROUP BY s.id
			)	tt
			LEFT JOIN
			(
				SELECT
					CASE WHEN SUM(r.left_amount) IS NULL THEN 0 ELSE SUM(r.left_amount) END  r_amount,
				<if test="productType != null and productType != '' and productType != 'AUTH'">
					s.id a_sub,
					r.bs_sub_account_id r_sub
					FROM
					ln_loan_relation r,
					bs_sub_account s
					WHERE r.bs_sub_account_id = s.id
					AND r.`status` NOT IN ('FAIL', 'PAYING')
					AND r.left_amount > 0
					and s.product_type = #{productType}
				</if>
				<if test="productType != null and productType != '' and productType == 'AUTH'">
					s.id r_sub,
					auth.id a_sub 
					FROM
					ln_loan_relation r,
					bs_sub_account s, bs_sub_account_pair p, bs_sub_account auth
					WHERE r.bs_sub_account_id = s.id
					AND r.`status` NOT IN ('FAIL', 'PAYING')
					AND r.left_amount > 0
					and s.product_type = 'REG_D' and s.id = p.reg_d_account_id and auth.id = p.auth_account_id
				</if>
				<if test="beginAmount != null ">
					and r.left_amount >= #{beginAmount}
				</if>
				<if test="endAmount != null">
					and #{endAmount} >= r.left_amount
				</if>
				GROUP BY
				r.bs_sub_account_id
			) bb on tt.subAccountId=bb.a_sub
	</select>

	<select id="selectUserTotalBalanceForDep" parameterType="java.util.Map" resultType="java.lang.Double">
		SELECT (SUM(tab.open_balance) + SUM(tab.red_open_balance)) AS total_buy_amount
			FROM
		(
			SELECT
				s.open_balance AS open_balance, IFNULL(sa.open_balance,0) AS red_open_balance
			FROM
				bs_account a, bs_user u,
				bs_sub_account s LEFT JOIN bs_sub_account_pair sp on s.id = sp.auth_account_id
				LEFT JOIN bs_sub_account sa on sa.id = sp.red_account_id and sa.product_type = 'RED',
				bs_bank_card b,
				bs_product p LEFT JOIN bs_property_info d ON p.property_id = d.id,bs_pay_orders od
			WHERE u.id = a.user_id AND a.id = s.account_id
			AND u.id = b.user_id AND b.status in (1,5)
			AND s.product_id = p.id AND s.status IN (2,3,4,5,7)
			AND od.sub_account_id=s.id AND od.trans_type = 'BALANCE_BUY_PRODUCT'
			AND od.account_type = 1
			<if test="buyBeginTime != null and buyEndTime != null ">
				AND s.interest_begin_date BETWEEN #{buyBeginTime} AND #{buyEndTime}
			</if>
			<if test="propertySymbol != null and propertySymbol != null ">
				AND d.property_symbol = #{propertySymbol}
			</if>
			<if test="productType != null and productType != null ">
				AND s.product_type = #{productType}
			</if>
			GROUP BY s.id
		) tab
	</select>

	<!-- ========================存管投资购买查询E ===================== -->


	<!-- ================钱报178 APP平台接入Start================== -->

	<resultMap type="com.pinting.gateway.hessian.message.qb178.model.QueryUserDetailsDataResModel" id="userDetailsDataResultMap" >
		<result column="user_account" property="user_account" jdbcType="VARCHAR"/>
		<result column="id_no" property="id_no" jdbcType="VARCHAR"/>
		<result column="id_kine" property="id_kine" jdbcType="VARCHAR"/>
		<result column="bank_account" property="bank_account" jdbcType="VARCHAR"/>
		<result column="holder_name" property="holder_name" jdbcType="VARCHAR"/>
		<result column="create_time" property="create_time" jdbcType="VARCHAR"/>
	</resultMap>

	<select id="count178UserDetails"  parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT
			COUNT(a.id)
		FROM
		bs_user a, bs_bank_card b
		WHERE a.agent_id = 15 AND a.id = b.user_id AND b.status = 1 AND b.is_first = 1
		<if test="userAccount != null and userAccount != ''">
			AND a.mobile = #{userAccount}
		</if>
		<if test="createTimeBegin != null and createTimeBegin != ''">
			AND a.register_time >= #{createTimeBegin}
		</if>
		<if test="createTimeEnd != null and createTimeEnd != ''">
			AND a.register_time &lt;= #{createTimeEnd}
		</if>
	</select>

	<select id="select178UserDetailsByPage" resultMap="userDetailsDataResultMap" parameterType="Map">
		SELECT
			a.mobile AS user_account,
			b.id_card AS id_no,
			'0' AS id_kine,
			b.card_no AS bank_account,
			a.user_name AS 	holder_name,
			DATE_FORMAT(b.bind_time,'%Y%m%d%H%i%s') AS create_time
		FROM
		bs_user a, bs_bank_card b
		WHERE a.agent_id = 15 AND a.id = b.user_id AND b.status = 1 AND b.is_first = 1
		<if test="userAccount != null and userAccount != ''">
			AND a.mobile = #{userAccount}
		</if>
		<if test="createTimeBegin != null and createTimeBegin != ''">
			AND a.register_time >= #{createTimeBegin}
		</if>
		<if test="createTimeEnd != null and createTimeEnd != ''">
			AND a.register_time &lt;= #{createTimeEnd}
		</if>
		ORDER BY a.register_time DESC
		LIMIT #{start}, #{numPerPage}
	</select>

	<!-- ================钱报178 APP平台接入End================== -->





	<resultMap type="com.pinting.business.model.vo.UpdateHFUserApplyVO" id="UpdateHFUserApplyVOMap" >
		<result column="card_mobile" property="cardMobile" jdbcType="VARCHAR"/>
		<result column="m_user" property="mUser" jdbcType="VARCHAR"/>
		<result column="status" property="status" jdbcType="VARCHAR"/>
		<result column="mobile" property="mobile" jdbcType="VARCHAR"/>
		<result column="new_mobile" property="newMobile" jdbcType="VARCHAR"/>
		<result column="user_name" property="userName" jdbcType="VARCHAR"/>
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="apply_id" property="applyId" jdbcType="INTEGER" />
		<result column="option_time" property="optionTime" jdbcType="TIMESTAMP" />
		<result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
	</resultMap>

	<select id="selectUpdateHFUserInfo"  parameterType="java.util.Map" resultMap="UpdateHFUserApplyVOMap">
		select a.id as user_id, b.id as apply_id, a.user_name, a.mobile, d.mobile as card_mobile, b.`status`, b.new_mobile,
		b.update_time, c.`name` as m_user
		from bs_user a
		left join (select * from (select * from bs_update_hf_user_apply order by id desc ) as a group by a.user_id) b on a.id = b.user_id
		left join m_user c on c.id = b.apply_user_id
		left join bs_bank_card d on d.user_id = a.id and d.`status` = 1
		<where>
			<if test="userName != null and userName != ''">
				and a.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != ''">
				and a.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="cardMobile != null and cardMobile != ''">
				and d.mobile like concat(concat('%', #{cardMobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="startTime != null and startTime != ''">
				and b.update_time >= #{startTime}
			</if>
			<if test="endTime != null and endTime != ''">
				and b.update_time &lt;= DATE_FORMAT(#{endTime},'%Y-%m-%d 23:59:59')
			</if>
			<if test="mUser != null and mUser != ''">
				and c.name like concat(concat('%', #{mUser,jdbcType=VARCHAR}),'%')
			</if>
		</where>
		order by b.update_time desc
		limit #{start}, #{numPerPage}
	</select>

	<select id="countUpdateHFUserInfo"  parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(a.id)
		from bs_user a
		left join (select * from (select * from bs_update_hf_user_apply order by id desc ) as a group by a.user_id) b on a.id = b.user_id
		left join m_user c on c.id = b.apply_user_id
		left join bs_bank_card d on d.user_id = a.id and d.`status` = 1
		<where>
			<if test="userName != null and userName != ''">
				and a.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != ''">
				and a.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="cardMobile != null and cardMobile != ''">
				and d.mobile like concat(concat('%', #{cardMobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="startTime != null and startTime != ''">
				and b.update_time >= #{startTime}
			</if>
			<if test="endTime != null and endTime != ''">
				and b.update_time &lt;= DATE_FORMAT(#{endTime},'%Y-%m-%d 23:59:59')
			</if>
			<if test="mUser != null and mUser != ''">
				and c.name like concat(concat('%', #{mUser,jdbcType=VARCHAR}),'%')
			</if>
		</where>
	</select>


	<select id="selectUpdateHFUserApplyInfo"  parameterType="java.util.Map" resultMap="UpdateHFUserApplyVOMap">
		select * from (
			select * from (
				select a.id as user_id, b.id as apply_id, a.user_name, a.mobile, d.mobile as card_mobile, b.`status`, b.update_time,
				c.`name` as m_user, b.new_mobile
				from bs_update_hf_user_apply b left join m_user c on c.id = b.check_user_id, bs_user a
				left join bs_bank_card d on d.user_id = a.id and d.`status` = 1
				where a.id = b.user_id
				order by b.id desc
			) as aa
			group by aa.user_id
		) as bb
		WHERE 1=1
		<if test="userName != null and userName != ''">
			and bb.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="mobile != null and mobile != ''">
			and bb.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="cardMobile != null and cardMobile != ''">
			and bb.card_mobile like concat(concat('%', #{cardMobile,jdbcType=VARCHAR}),'%')
		</if>
		<if test="startTime != null and startTime != ''">
			and bb.update_time >= #{startTime}
		</if>
		<if test="endTime != null and endTime != ''">
			and bb.update_time &lt;= DATE_FORMAT(#{endTime},'%Y-%m-%d 23:59:59')
		</if>
		<if test="mUser != null and mUser != ''">
			and bb.m_user like concat(concat('%', #{mUser,jdbcType=VARCHAR}),'%')
		</if>
		order by bb.update_time desc
		limit #{start}, #{numPerPage}
	</select>

	<select id="countUpdateHFUserApplyInfo"  parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(*) from (
			select * from (
				select a.id as user_id, b.id as apply_id, a.user_name, a.mobile, d.mobile as card_mobile, b.`status`, b.update_time,
				c.`name` as m_user, b.new_mobile
				from bs_update_hf_user_apply b left join m_user c on c.id = b.check_user_id, bs_user a
				left join bs_bank_card d on d.user_id = a.id and d.`status` = 1
				where a.id = b.user_id
				order by b.id desc
			) as aa
			group by aa.user_id
			<if test="userName != null and userName != ''">
				and aa.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != ''">
				and aa.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="cardMobile != null and cardMobile != ''">
				and aa.card_mobile like concat(concat('%', #{cardMobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="startTime != null and startTime != ''">
				and aa.update_time >= #{startTime}
			</if>
			<if test="endTime != null and endTime != ''">
				and aa.update_time &lt;= DATE_FORMAT(#{endTime},'%Y-%m-%d 23:59:59')
			</if>
			<if test="mUser != null and mUser != ''">
				and aa.m_user like concat(concat('%', #{mUser,jdbcType=VARCHAR}),'%')
			</if>
		) as bb
	</select>


	<!-- ================管理台信息服务费查询================== -->
	<select id="sumPtBuyAmount" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Double">
		SELECT IFNULL(sum(IFNULL(a.open_balance,0)) + sum(IFNULL(red.open_balance, 0)), 0)
			FROM bs_sub_account a 
			INNER JOIN bs_account b ON a.account_id=b.id
			INNER JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			INNER JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE ((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE')))
			and h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and ( (c.agent_id != 49 and c.agent_id != 51 and c.agent_id != 52 and c.agent_id != 53 and c.agent_id != 54 and c.agent_id != 55)
			or c.agent_id is null) 
			and !FIND_IN_SET('H5_QD', e.show_terminal) AND !FIND_IN_SET('PC_QD', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_JT', e.show_terminal) AND !FIND_IN_SET('H5_QHD_XW', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_TV', e.show_terminal) AND !FIND_IN_SET('PC_QHD_ST', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_ST', e.show_terminal) AND !FIND_IN_SET('H5_QHD_SJC', e.show_terminal)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
	</select>
	
	<select id="sumBuyAmount" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Double">
		SELECT IFNULL(sum(IFNULL(a.open_balance,0)) + sum(IFNULL(red.open_balance, 0)), 0)
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD', 'RED_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
	</select>
	
	<select id="sumBuy178Amount" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Double">
		SELECT IFNULL(sum(IFNULL(a.open_balance,0)) + sum(IFNULL(red.open_balance, 0)), 0)
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and d.id = 15
			and e.show_terminal like '%178%'
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD', 'RED_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
	</select>
	
	<select id="sumDepServiceFee" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Double">
		SELECT sum(round((t.openBalance*revenueRate*investDay/36500),2)) as depServiceFee FROM 
		(SELECT IFNULL(a.open_balance, 0) + IFNULL(red.open_balance, 0) as openBalance,
			if(DATE(a.open_time) >= DATE('2018-04-30'), 1, 2) as revenueRate,
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			INNER JOIN bs_account b ON a.account_id=b.id
			INNER JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			INNER JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE a.status in (2,5,7) 
			and ((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE')))
			and h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and (c.agent_id != 49 or c.agent_id is null) 
			and !FIND_IN_SET('H5_QD', e.show_terminal) AND !FIND_IN_SET('PC_QD', e.show_terminal)
			and ( (c.agent_id != 49 and c.agent_id != 51 and c.agent_id != 52 and c.agent_id != 53 and c.agent_id != 54 and c.agent_id != 55)
			or c.agent_id is null) 
			and !FIND_IN_SET('H5_QD', e.show_terminal) AND !FIND_IN_SET('PC_QD', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_JT', e.show_terminal) AND !FIND_IN_SET('H5_QHD_XW', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_TV', e.show_terminal) AND !FIND_IN_SET('PC_QHD_ST', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_ST', e.show_terminal) AND !FIND_IN_SET('H5_QHD_SJC', e.show_terminal)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		) t
	</select>
	
	<select id="sumHsDepServiceFee" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Double">
		SELECT sum(round((t.openBalance*0.01*investDay/365),2)) as depServiceFee FROM 
		(SELECT IFNULL(a.open_balance, 0) + IFNULL(red.open_balance, 0) as openBalance,
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD', 'RED_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
		) t
	</select>
	
	<select id="sumHsDep178ServiceFee" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Double">
		SELECT sum(round((t.openBalance*0.01*investDay/365),2)) as depServiceFee FROM 
		(SELECT IFNULL(a.open_balance, 0) + IFNULL(red.open_balance, 0) as openBalance,
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and d.id = 15
			and e.show_terminal like '%178%'
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD', 'RED_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
		) t
	</select>
	
	<select id="sumQbBuyAmount" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Double">
		SELECT IFNULL(sum(IFNULL(a.open_balance,0)) + sum(IFNULL(red.open_balance, 0)), 0)
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE f.property_symbol='YUN_DAI_SELF' 
			and a.status in (2,3,4,5,7) and a.product_type in ('AUTH_YUN', 'RED')
			and c.agent_id=15 and h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
	</select>
	
	<select id="sumQbDepServiceFee" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Double">
		SELECT sum(round((t.openBalance*0.02*investDay/365),2)) as depServiceFee FROM 
		(SELECT IFNULL(a.open_balance, 0) + IFNULL(red.open_balance, 0) as openBalance,
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE f.property_symbol='YUN_DAI_SELF' 
			and a.status in (2,3,4,5,7) and a.product_type in ('AUTH_YUN', 'RED')
			and c.agent_id=15 and h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		) t
	</select>
	
	<select id="countQbDepServiceFee" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Integer">
		SELECT count(a.id) FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f on e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			WHERE f.property_symbol='YUN_DAI_SELF' 
			and a.status in (2,3,4,5,7) and a.product_type in ('AUTH_YUN')
			and c.agent_id=15 and h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
	</select>
	
	<select id="countHsDepServiceFee" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Integer">
		SELECT count(a.id) FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f on e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
	</select>
	
	<select id="countHsDep178ServiceFee" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Integer">
		SELECT count(a.id) FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f on e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and d.id = 15
			and e.show_terminal like '%178%'
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
	</select>
	
	<select id="countPtDepServiceFee" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultType="java.lang.Integer">
		SELECT count(a.id) FROM bs_sub_account a 
			INNER JOIN bs_account b ON a.account_id=b.id
			INNER JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			INNER JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f on e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			WHERE a.status in (2,5,7) 
			and ((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE')))
			and h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and ( (c.agent_id != 49 and c.agent_id != 51 and c.agent_id != 52 and c.agent_id != 53 and c.agent_id != 54 and c.agent_id != 55)
			or c.agent_id is null) 
			and !FIND_IN_SET('H5_QD', e.show_terminal) AND !FIND_IN_SET('PC_QD', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_JT', e.show_terminal) AND !FIND_IN_SET('H5_QHD_XW', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_TV', e.show_terminal) AND !FIND_IN_SET('PC_QHD_ST', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_ST', e.show_terminal) AND !FIND_IN_SET('H5_QHD_SJC', e.show_terminal)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
	</select>
	
	<select id="queryQbDepServiceFeeList" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultMap="depServiceFeeResultMap">
		SELECT t.*, (t.openBalance*0.02*investDay/365) as depServiceFee FROM 
		(SELECT a.open_time,c.mobile,c.user_name,c.id as user_id,a.product_name,e.base_rate,a.open_balance + IFNULL(red.open_balance, 0) as openBalance,
			a.`status`,a.last_finish_interest_date,d.agent_name,h.order_no, 2 as revenueRate, 
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE f.property_symbol='YUN_DAI_SELF' 
			and a.status in (2,3,4,5,7) and a.product_type in ('AUTH_YUN', 'RED')
			and c.agent_id=15 and h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		) t
		order by t.open_time desc
		<include refid="sql-global.pagination" />
	</select>
	
	<select id="queryHsDepServiceFeeList" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultMap="depServiceFeeResultMap">
		SELECT t.*, (t.openBalance*0.01*investDay/365) as depServiceFee FROM 
		(SELECT a.open_time,c.mobile,c.user_name,c.id as user_id,a.product_name,e.base_rate,a.open_balance + IFNULL(red.open_balance, 0) as openBalance,
			a.`status`,a.last_finish_interest_date,d.agent_name,h.order_no, 1 as revenueRate, 
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD', 'RED_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
		) t
		order by t.open_time desc
		<include refid="sql-global.pagination" />
	</select>
	
	<select id="queryHsDepServiceFee178List" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultMap="depServiceFeeResultMap">
		SELECT t.*, (t.openBalance*0.01*investDay/365) as depServiceFee FROM 
		(SELECT a.open_time,c.mobile,c.user_name,c.id as user_id,a.product_name,e.base_rate,a.open_balance + IFNULL(red.open_balance, 0) as openBalance,
			a.`status`,a.last_finish_interest_date,d.agent_name,h.order_no, 1 as revenueRate, 
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and d.id = 15
			and e.show_terminal like '%178%'
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD', 'RED_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
		) t
		order by t.open_time desc
		<include refid="sql-global.pagination" />
	</select>
	
	<select id="queryHsDepServiceFeeAllList" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultMap="depServiceFeeResultMap">
		SELECT * FROM (
		SELECT t1.*, (t1.openBalance*0.01*investDay/365) as depServiceFee FROM 
		(SELECT a.open_time,c.mobile,c.user_name,c.id as user_id,a.product_name,e.base_rate,a.open_balance + IFNULL(red.open_balance, 0) as openBalance,
			a.`status`,a.last_finish_interest_date,d.agent_name,h.order_no, 1 as revenueRate, 
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and d.id = 15
			and e.show_terminal like '%178%'
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD', 'RED_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE('2018-01-01')
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
		) t1
		UNION ALL
		SELECT t2.*, (t2.openBalance*0.01*investDay/365) as depServiceFee FROM 
		(SELECT a.open_time,c.mobile,c.user_name,c.id as user_id,a.product_name,e.base_rate,a.open_balance + IFNULL(red.open_balance, 0) as openBalance,
			a.`status`,a.last_finish_interest_date,d.agent_name,h.order_no, 1 as revenueRate, 
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and (
			(f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
			or
			(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
			or
			(f.property_symbol='ZAN' and a.product_type in ('AUTH'))
			or
			(f.property_symbol='ZSD' and a.product_type in ('AUTH_ZSD', 'RED_ZSD'))
			)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE('2017-12-31')
		</if>
		<if test="accountStatus == null ">
			and a.status in (2,3,4,5,7)
		</if>
		<if test="accountStatus != null">
			and a.status = #{accountStatus}
		</if>
		) t2
		) t
		order by t.open_time desc
		<include refid="sql-global.pagination" />
	</select>
	
	<select id="queryPtDepServiceFeeList" parameterType="com.pinting.business.model.vo.DepServiceFeeSelectVO" resultMap="depServiceFeeResultMap">
		SELECT t.*, (t.openBalance*revenueRate*investDay/36500) as depServiceFee FROM 
		(SELECT a.open_time,c.mobile,c.user_name,c.id as user_id,a.product_name,e.base_rate,a.open_balance + IFNULL(red.open_balance, 0) as openBalance,
			a.`status`,a.last_finish_interest_date,d.agent_name,h.order_no, 
			if(DATE(a.open_time) >= DATE('2018-04-30'), 1, 2) as revenueRate, 
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 9 THEN 270 
			WHEN 12 THEN 365 END as investDay
			FROM bs_sub_account a 
			INNER JOIN bs_account b ON a.account_id=b.id
			INNER JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			INNER JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			WHERE a.status in (2,5,7) 
			and ((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE')))
			and h.trans_type in('BALANCE_BUY_PRODUCT', 'CARD_BUY_PRODUCT')
			and ( (c.agent_id != 49 and c.agent_id != 51 and c.agent_id != 52 and c.agent_id != 53 and c.agent_id != 54 and c.agent_id != 55)
			or c.agent_id is null) 
			and !FIND_IN_SET('H5_QD', e.show_terminal) AND !FIND_IN_SET('PC_QD', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_JT', e.show_terminal) AND !FIND_IN_SET('H5_QHD_XW', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_TV', e.show_terminal) AND !FIND_IN_SET('PC_QHD_ST', e.show_terminal)
			and !FIND_IN_SET('H5_QHD_ST', e.show_terminal) AND !FIND_IN_SET('H5_QHD_SJC', e.show_terminal)
		<if test="productTerm != null and productTerm != 0 ">
			and e.term = #{productTerm}
		</if>
		<if test="productName != null and productName != '' ">
			and a.product_name like concat(concat('%', #{productName,jdbcType=VARCHAR}),'%')
		</if>
		<if test="buyBeginTime != null ">
			and DATE(a.open_time) >=  DATE(#{buyBeginTime})
		</if>
		<if test="buyEndTime != null ">
			and DATE(a.open_time) &lt;= DATE(#{buyEndTime})
		</if>
		order by a.open_time desc
		<include refid="sql-global.pagination" />
		) t
	</select>
	
	<resultMap id="depServiceFeeResultMap" type="com.pinting.business.model.vo.DepServiceFeeVO">
		<result column="open_time" property="openTime" jdbcType="TIMESTAMP" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="product_name" property="productName" jdbcType="VARCHAR" />
		<result column="base_rate" property="productRate" jdbcType="INTEGER" />
		<result column="openBalance" property="openBalance" jdbcType="DOUBLE" />
		<result column="status" property="accountStatus" jdbcType="INTEGER" />
		<result column="last_finish_interest_date" property="withdrawTime" jdbcType="TIMESTAMP" />
		<result column="bank_name" property="bankName" jdbcType="VARCHAR" />
		<result column="agent_name" property="agentName" jdbcType="VARCHAR" />
		<result column="order_no" property="orderNo" jdbcType="VARCHAR" />
		<result column="investDay" property="productTerm" jdbcType="INTEGER" />
		<result column="revenueRate" property="revenueRate" jdbcType="DOUBLE" />
		<result column="depServiceFee" property="depServiceFee" jdbcType="DOUBLE" />
	</resultMap>

	<select id="select7DaiSelfCreditor"  resultMap="BaseResultMap" >
		SELECT * FROM bs_user
		WHERE id = (SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_COMPENSATE_USER_ID')
	</select>


	<!-- - 分页查询用户运营信息 - @auth yanwl - @date 2016-02-28 -->
	<select id="selectUserOperateManualPacketPage" resultMap="UserOperateVoMap" parameterType="com.pinting.business.model.vo.MUserOperateVO">
		select
		c.id as userId,c.mobile,c.total_bonus,c.register_time,c.first_buy_time,c.agent_id,
		ba.agent_name as agentName,
		(select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa where bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') and bsa.account_id =
		a.id and bsa.status not in(1,6)) as investTotalMoney,
		(select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa where bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') and bsa.account_id =
		a.id and bsa.status = 2) as investMoney,
		(SELECT max(bsa.open_time) FROM bs_sub_account bsa
		WHERE bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD')
		AND bsa.status NOT IN (1, 6)
		and bsa.account_id = a.id
		GROUP BY bsa.account_id
		) as lastBuyTime
		from
		bs_account a ,bs_sub_account p , bs_user c 
		LEFT JOIN bs_agent ba on ba.id=c.agent_id
		where
		c.id=a.user_id and p.account_id = a.id AND p.product_type='JSH'

		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and c.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and c.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (c.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or c.agent_id is null)
		</if>
		<if test="(sLastBuyTime != null and sLastBuyTime !='') or (eLastBuyTime != null and eLastBuyTime !='')">
			<if test="sLastBuyTime != null and sLastBuyTime !=''">
				and (SELECT max(bsa.open_time) FROM bs_sub_account bsa
						WHERE bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD')
							AND bsa.status NOT IN (1, 6)
							and bsa.account_id = a.id
						GROUP BY bsa.account_id)
				&gt;= #{sLastBuyTime}
			</if>
			<if test="eLastBuyTime != null and eLastBuyTime !=''">
				and (SELECT max(bsa.open_time) FROM bs_sub_account bsa
						WHERE bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD')
							AND bsa.status NOT IN (1, 6)
							and bsa.account_id = a.id
						GROUP BY bsa.account_id)
				&lt;= DATE_FORMAT(#{eLastBuyTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="(sFirstBuyTime != null and sFirstBuyTime !='') or (eFirstBuyTime != null and eFirstBuyTime !='')">
			<if test="sFirstBuyTime != null and sFirstBuyTime !=''">
				and c.first_buy_time &gt;= #{sFirstBuyTime}
			</if>
			<if test="eFirstBuyTime != null and eFirstBuyTime !=''">
				and c.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="(sTotalBonus != null and sTotalBonus != '') or (eTotalBonus != null and eTotalBonus != '')">
			<if test="sTotalBonus != null and sTotalBonus != ''">
				and c.total_bonus &gt;= #{sTotalBonus}
			</if>
			<if test="eTotalBonus != null and eTotalBonus != ''">
				and c.total_bonus &lt;= #{eTotalBonus}
			</if>
		</if>
		<if test="(sInvestMoney != null and sInvestMoney != '') or (eInvestMoney != null and eInvestMoney != '')">
			<if test="sInvestMoney != null and sInvestMoney != ''">
				and (select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa 
						where bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') 
							and bsa.account_id = a.id
		 					and bsa.status = 2)
		 	    &gt;= #{sInvestMoney}
			</if>
			<if test="eInvestMoney != null and eInvestMoney != ''">
				and (select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa 
						where bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') 
							and bsa.account_id = a.id
		 					and bsa.status = 2)
		        &lt;= #{eInvestMoney}
			</if>
		</if>
		<if
			test="(sInvestTotalMoney != null and sInvestTotalMoney != '') or (eInvestTotalMoney != null and eInvestTotalMoney != '')">
			<if test="sInvestTotalMoney != null and sInvestTotalMoney != ''">
				and (select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa 
						where bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') 
						and bsa.account_id = a.id 
						and bsa.status not in(1,6)) 
				&gt;= #{sInvestTotalMoney}
			</if>
			<if test="eInvestTotalMoney != null and eInvestTotalMoney != ''">
				and (select IFNULL(sum(bsa.open_balance),0) from bs_sub_account bsa 
						where bsa.product_type IN ('REG','AUTH_YUN','AUTH_ZSD') 
						and bsa.account_id = a.id 
						and bsa.status not in(1,6))
				&lt;= #{eInvestTotalMoney}
			</if>
		</if>
		<if test="(sRegistTime != null and sRegistTime !='') or (eRegistTime != null and eRegistTime !='')">
			<if test="sRegistTime != null and sRegistTime !=''">
				and c.register_time &gt;= #{sRegistTime}
			</if>
			<if test="eRegistTime != null and eRegistTime !=''">
				and c.register_time &lt;= DATE_FORMAT(#{eRegistTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="userIds != null and userIds !=''">
			and c.id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		<include refid="sql-global.pagination" />
	</select>

	<!-- - 查询用户运营信息总数 - @auth yanwl - @date 2016-02-28 -->
	<select id="countUserOperateManualPacket" resultType="java.lang.Integer" parameterType="com.pinting.business.model.vo.MUserOperateVO">
		select count(*) from (
			select c.id from
				bs_account a ,bs_sub_account p , bs_user c
				LEFT JOIN bs_agent ba on ba.id=c.agent_id
				where c.id=a.user_id and p.account_id = a.id 
					AND p.product_type='JSH'
		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and c.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and c.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (c.agent_id in
			<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
				#{agentId}
			</foreach>
			or c.agent_id is null)
		</if>
		<if test="(sLastBuyTime != null and sLastBuyTime !='') or (eLastBuyTime != null and eLastBuyTime !='')">
			<if test="sLastBuyTime != null and sLastBuyTime !=''">
				and (SELECT max(bsa.open_time) FROM bs_sub_account bsa
						WHERE bsa.product_type = 'REG'
							AND bsa.status NOT IN (1, 6)
							and bsa.account_id = a.id
						GROUP BY bsa.account_id)
			 	&gt;= #{sLastBuyTime}
			</if>
			<if test="eLastBuyTime != null and eLastBuyTime !=''">
				and (SELECT max(bsa.open_time) FROM bs_sub_account bsa
						WHERE bsa.product_type = 'REG'
							AND bsa.status NOT IN (1, 6)
							and bsa.account_id = a.id
						GROUP BY bsa.account_id) 
				&lt;= DATE_FORMAT(#{eLastBuyTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="(sFirstBuyTime != null and sFirstBuyTime !='') or (eFirstBuyTime != null and eFirstBuyTime !='')">
			<if test="sFirstBuyTime != null and sFirstBuyTime !=''">
				and c.first_buy_time &gt;= #{sFirstBuyTime}
			</if>
			<if test="eFirstBuyTime != null and eFirstBuyTime !=''">
				and c.first_buy_time &lt;= DATE_FORMAT(#{eFirstBuyTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="(sTotalBonus != null and sTotalBonus != '') or (eTotalBonus != null and eTotalBonus != '')">
			<if test="sTotalBonus != null and sTotalBonus != ''">
				and c.total_bonus &gt;= #{sTotalBonus}
			</if>
			<if test="eTotalBonus != null and eTotalBonus != ''">
				and c.total_bonus &lt;= #{eTotalBonus}
			</if>
		</if>
		<if test="(sInvestMoney != null and sInvestMoney != '') or (eInvestMoney != null and eInvestMoney != '')">
			<if test="sInvestMoney != null and sInvestMoney != ''">
				and (select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa 
						where bsa.product_type = 'REG' 
							and bsa.account_id = a.id 
							and bsa.status = 2) 
				&gt;= #{sInvestMoney}
			</if>
			<if test="eInvestMoney != null and eInvestMoney != ''">
				and (select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa 
						where bsa.product_type = 'REG' 
							and bsa.account_id = a.id 
							and bsa.status = 2) 
				&lt;= #{eInvestMoney}
			</if>
		</if>
		<if
			test="(sInvestTotalMoney != null and sInvestTotalMoney != '') or (eInvestTotalMoney != null and eInvestTotalMoney != '')">
			<if test="sInvestTotalMoney != null and sInvestTotalMoney != ''">
				and (select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa 
						where bsa.product_type = 'REG' 
							and bsa.account_id = a.id
		 					and bsa.status not in(1,6)) 
				&gt;= #{sInvestTotalMoney}
			</if>
			<if test="eInvestTotalMoney != null and eInvestTotalMoney != ''">
				and (select IFNULL(sum(bsa.balance),0) from bs_sub_account bsa 
						where bsa.product_type = 'REG' 
							and bsa.account_id = a.id
		 					and bsa.status not in(1,6)) 
		 		&lt;= #{eInvestTotalMoney}
			</if>
		</if>
		<if test="(sRegistTime != null and sRegistTime !='') or (eRegistTime != null and eRegistTime !='')">
			<if test="sRegistTime != null and sRegistTime !=''">
				and c.register_time &gt;= #{sRegistTime}
			</if>
			<if test="eRegistTime != null and eRegistTime !=''">
				and c.register_time &lt;= DATE_FORMAT(#{eRegistTime},'%Y-%m-%d 23:59:59')
			</if>
		</if>
		<if test="userIds != null and userIds !=''">
			and c.id in
			<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		) u
	</select>


	<!--  投资购买查询（存管后） -->
	<select id="selectInvestmentBuyMessageListForDep" parameterType="com.pinting.business.model.vo.BsStatisticsDepVO" resultMap="userBuyMessageDepResult">
			
			SELECT 
			c.id id,
			SUBSTRING(c.mobile,1,3) preMobile,
			SUBSTRING(c.mobile,8,4) afterMobile,
			c.user_name userName,
			c.agent_id agentId,
			e.term term,
			a.product_rate rate,
			a.open_balance + IFNULL(red.open_balance, 0) as openBalance,
			a.open_time openTime,
			a.last_finish_interest_date investEndTime,
			a.status accountStatus,
			a.id subAccountId,
			h.order_no orderNo,
			d.agent_name agentName,
			CASE WHEN ((a.product_type='AUTH_YUN' AND a.note='AUTH_ZSD_2_AUTH_YUN') or a.product_type = 'AUTH_ZSD') THEN 'ZSD'
			ELSE f.property_symbol
			END as property_symbol
				FROM bs_sub_account a 
				LEFT JOIN bs_account b ON a.account_id=b.id
				LEFT JOIN bs_user c ON c.id=b.user_id
				LEFT JOIN bs_agent d ON d.id=c.agent_id
				LEFT JOIN bs_product e ON e.id=a.product_id
				LEFT JOIN bs_property_info f ON e.property_id=f.id
				LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
				LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
				LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
				WHERE h.trans_type ='BALANCE_BUY_PRODUCT' and h.account_type = 1
			<if test="orderNo != null and orderNo != '' ">
				and h.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
			</if>
			<if test="userName != null and userName != '' ">
				and c.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
		
			<if test="accountStatus == null or 0 >= accountStatus">
				and a.`status` in (2,5,7)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and a.status = #{accountStatus}
			</if>
		
			<if test="investStartTime != null and investStartTime != ''"> 
				and date(a.open_time) &gt;= #{investStartTime} 
			</if>
			<if test="investFinishTime != null and investFinishTime != ''">   
				and date(a.open_time) &lt;= #{investFinishTime}
			</if>
			<if test="lastFinishInterestStartTime != null and lastFinishInterestStartTime != ''"> 
				and date(a.last_finish_interest_date) &gt;= #{lastFinishInterestStartTime} 
			</if>
			<if test="lastFinishInterestEndTime != null and lastFinishInterestEndTime != ''"> 
				and date(a.last_finish_interest_date) &lt;= #{lastFinishInterestEndTime}
			</if>
				
			<if test="agentName != null and agentName == 'NO' ">
				and d.agent_name IS NULL
			</if>
			<if test="agentName != null and agentName != 'NO'">
				and d.agent_name = #{agentName}
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol=='ZSD'">
				and (a.product_type = 'AUTH_ZSD' or (a.product_type = 'AUTH_YUN' AND a.note = 'AUTH_ZSD_2_AUTH_YUN'))
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI_SELF'">
				and a.product_type = 'AUTH_YUN' AND (a.note!='AUTH_ZSD_2_AUTH_YUN' or a.note is null) AND f.property_symbol = 'YUN_DAI_SELF'
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == '7_DAI_SELF'">
				and a.product_type = 'AUTH_7' AND f.property_symbol = '7_DAI_SELF'
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'FREE'">
				and a.product_type = 'AUTH_FREE' AND f.property_symbol = 'FREE'
			</if>
			<if test="propertySymbol == null or propertySymbol == ''">
				and f.property_symbol in ('YUN_DAI_SELF', '7_DAI_SELF', 'ZSD', 'FREE') AND a.product_type in ('AUTH_YUN','AUTH_7','AUTH_ZSD', 'AUTH_FREE')
			</if>
			<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
				and c.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
			</if>
			<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
				and c.agent_id is null
			</if>
			<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
				and (c.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
				or c.agent_id is null)
			</if>
			ORDER BY a.open_time DESC
			<include refid="sql-global.pagination" />
	</select>

	<select id="countInvestmentBuyMessageListForDep" parameterType="com.pinting.business.model.vo.BsStatisticsDepVO" resultType="java.lang.Integer">
			SELECT 
			COUNT(a.id)
				FROM bs_sub_account a 
				LEFT JOIN bs_account b ON a.account_id=b.id
				LEFT JOIN bs_user c ON c.id=b.user_id
				LEFT JOIN bs_agent d ON d.id=c.agent_id
				LEFT JOIN bs_product e ON e.id=a.product_id
				LEFT JOIN bs_property_info f ON e.property_id=f.id
				LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
				LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
				LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
				WHERE h.trans_type ='BALANCE_BUY_PRODUCT' and h.account_type = 1
				<if test="orderNo != null and orderNo != '' ">
					and h.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
				</if>
				<if test="userName != null and userName != '' ">
					and c.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
				</if>
				<if test="mobile != null and mobile != '' ">
					and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
				</if>
				<if test="accountStatus == null or 0 >= accountStatus">
					and a.`status` in (2,5,7)
				</if>
				<if test="accountStatus != null and accountStatus > 0 ">
					and a.status = #{accountStatus}
				</if>
				
				<if test="investStartTime != null and investStartTime != ''"> 
					and date(a.open_time) &gt;= #{investStartTime} 
				</if>
				<if test="investFinishTime != null and investFinishTime != ''">   
					and date(a.open_time) &lt;= #{investFinishTime}
				</if>
				<if test="lastFinishInterestStartTime != null and lastFinishInterestStartTime != ''"> 
					and date(a.last_finish_interest_date) &gt;= #{lastFinishInterestStartTime} 
				</if>
				<if test="lastFinishInterestEndTime != null and lastFinishInterestEndTime != ''"> 
					and date(a.last_finish_interest_date) &lt;= #{lastFinishInterestEndTime}
				</if>

				<if test="agentName != null and agentName == 'NO' ">
					and d.agent_name IS NULL
				</if>
				<if test="agentName != null and agentName != 'NO'">
					and d.agent_name = #{agentName}
				</if>
				<if test="propertySymbol != null and propertySymbol != '' and propertySymbol=='ZSD'">
					and (a.product_type = 'AUTH_ZSD' or (a.product_type = 'AUTH_YUN' AND a.note = 'AUTH_ZSD_2_AUTH_YUN')) 
				</if>
				<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI_SELF'">
					and a.product_type = 'AUTH_YUN' AND (a.note!='AUTH_ZSD_2_AUTH_YUN' or a.note is null) AND f.property_symbol = 'YUN_DAI_SELF'
				</if>
				<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == '7_DAI_SELF'">
					and a.product_type = 'AUTH_7' AND f.property_symbol = '7_DAI_SELF'
				</if>
				<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'FREE'">
					and a.product_type = 'AUTH_FREE' AND f.property_symbol = 'FREE'
				</if>
				<if test="propertySymbol == null or propertySymbol == ''">
					and f.property_symbol in ('YUN_DAI_SELF', '7_DAI_SELF', 'ZSD', 'FREE') AND a.product_type in ('AUTH_YUN','AUTH_7','AUTH_ZSD', 'AUTH_FREE')
				</if>
				<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
					and c.agent_id in
					<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
						#{agentId}
					</foreach>
				</if>
				<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
					and c.agent_id is null
				</if>
				<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
					and (c.agent_id in
					<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
						#{agentId}
					</foreach>
					or c.agent_id is null)
				</if>
	</select>

	<select id="selectInvestmentBuySumBalanceForDep" parameterType="com.pinting.business.model.vo.BsStatisticsDepVO" resultType="java.lang.Double">
		SELECT 
				IFNULL(sum(IFNULL(a.open_balance,0)) + sum(IFNULL(red.open_balance, 0)), 0)
				FROM bs_sub_account a 
				LEFT JOIN bs_account b ON a.account_id=b.id
				LEFT JOIN bs_user c ON c.id=b.user_id
				LEFT JOIN bs_agent d ON d.id=c.agent_id
				LEFT JOIN bs_product e ON e.id=a.product_id
				LEFT JOIN bs_property_info f ON e.property_id=f.id
				LEFT JOIN bs_pay_orders h ON h.sub_account_id=a.id
				LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
				LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
				WHERE h.trans_type ='BALANCE_BUY_PRODUCT' and h.account_type = 1
			<if test="orderNo != null and orderNo != '' ">
				and h.order_no like concat(concat('%', #{orderNo,jdbcType=VARCHAR}),'%')
			</if>
			<if test="userName != null and userName != '' ">
				and c.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
		
			<if test="accountStatus == null or 0 >= accountStatus">
				and a.`status` in (2,5,7)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and a.status = #{accountStatus}
			</if>
		
			<if test="investStartTime != null and investStartTime != ''"> 
				and date(a.open_time) &gt;= #{investStartTime} 
			</if>
			<if test="investFinishTime != null and investFinishTime != ''">   
				and date(a.open_time) &lt;= #{investFinishTime}
			</if>
			<if test="lastFinishInterestStartTime != null and lastFinishInterestStartTime != ''"> 
				and date(a.last_finish_interest_date) &gt;= #{lastFinishInterestStartTime} 
			</if>
			<if test="lastFinishInterestEndTime != null and lastFinishInterestEndTime != ''"> 
				and date(a.last_finish_interest_date) &lt;= #{lastFinishInterestEndTime}
			</if>
				
			<if test="agentName != null and agentName == 'NO' ">
				and d.agent_name IS NULL
			</if>
			<if test="agentName != null and agentName != 'NO'">
				and d.agent_name = #{agentName}
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol=='ZSD'">
				and (a.product_type = 'AUTH_ZSD' or (a.product_type = 'AUTH_YUN' AND a.note = 'AUTH_ZSD_2_AUTH_YUN'))
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'YUN_DAI_SELF'">
				and a.product_type = 'AUTH_YUN' AND (a.note!='AUTH_ZSD_2_AUTH_YUN' or a.note is null) AND f.property_symbol = 'YUN_DAI_SELF'
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == '7_DAI_SELF'">
				and a.product_type = 'AUTH_7' AND f.property_symbol = '7_DAI_SELF'
			</if>
			<if test="propertySymbol != null and propertySymbol != '' and propertySymbol == 'FREE'">
				and a.product_type = 'AUTH_FREE' AND f.property_symbol = 'FREE'
			</if>
			<if test="propertySymbol == null or propertySymbol == ''">
				and f.property_symbol in ('YUN_DAI_SELF', '7_DAI_SELF', 'ZSD', 'FREE') AND a.product_type in ('AUTH_YUN','AUTH_7','AUTH_ZSD', 'AUTH_FREE')
			</if>
			<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
				and c.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
			</if>
			<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
				and c.agent_id is null
			</if>
			<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
				and (c.agent_id in
				<foreach collection="agentIds" item="agentId" index="index" open="(" close=")" separator=",">
					#{agentId}
				</foreach>
				or c.agent_id is null)
			</if>
	</select>
	<select id="selectHaveNoTicketUserList" parameterType="map" resultMap="BaseResultMap">
		select a.* from (
			select a.id, a.id_card, a.agent_id, a.mobile
			from bs_user a where a.id_card is not null and a.is_bind_name = 1 and a.is_bind_bank = 1 and SUBSTRING(id_card,11,4) = #{birthday}
		) as a left join (
			select a.user_id, a.serial_no, a.id from bs_interest_ticket_info a where a.serial_no = #{serialNo}
		) as b on a.id = b.user_id
		where b.id is null
		limit #{start}, #{numPerPage}
	</select><!-- ========================= 七店用户信息同步通知统计数据 S ===========================-->	<resultMap type="com.pinting.business.model.vo.CustomerInfoSyncVO" id="customerInfoSyncResultMap" >
		<result column="franchisee_id" property="franchiseeId" jdbcType="VARCHAR" />
		<result column="customer_id" property="customerId" jdbcType="VARCHAR" />
		<result column="customer_name" property="customerName" jdbcType="VARCHAR" />
		<result column="customer_mobile" property="customerMobile" jdbcType="VARCHAR" />
		<result column="customer_level" property="customerLevel" jdbcType="VARCHAR" />
		<result column="real_name_status" property="realNameStatus" jdbcType="VARCHAR" />
		<result column="id_card_no" property="idCardNo" jdbcType="VARCHAR" />
		<result column="remain_invest" property="remainInvest" jdbcType="DOUBLE" />
		<result column="total_invest" property="totalInvest" jdbcType="DOUBLE" />
		<result column="register_time" property="registerTime" jdbcType="TIMESTAMP" />
		<result column="login_time" property="loginTime" jdbcType="TIMESTAMP" />
	</resultMap>
	<select id="customerInfoSyncRegister" resultMap="customerInfoSyncResultMap" parameterType="map">
	<![CDATA[
	SELECT 
		SUBSTRING(b.invite_code ,3) franchisee_id,
		c.id customer_id,
		CONCAT(LEFT(c.user_name,1), '**') customer_name,
		CONCAT(LEFT(c.mobile,3), '****', RIGHT(c.mobile,4)) customer_mobile,
		a.grade  customer_level,
		CASE WHEN c.user_name IS NULL THEN 'N' ELSE 'Y' END   real_name_status,
		(
				SELECT SUM(IFNULL(sa.open_balance,0)) FROM 
				bs_sub_account sa,bs_account sb 
				WHERE sa.account_id = sb.id AND sb.user_id = c.id AND sa.`status` = 2 
				AND sa.product_type IN ('AUTH_7','RED_7','AUTH_YUN','RED','AUTH_FREE','RED_FREE')
		) remain_invest,
		CONCAT(LEFT(c.id_card,3), '***********', RIGHT(c.id_card,4)) id_card_no,
		(
					SELECT SUM(IFNULL(sa.open_balance,0)) FROM 
						bs_sub_account sa,bs_account sb 
					WHERE sa.account_id = sb.id AND sb.user_id = c.id AND sa.`status` IN (2,5,7)
					AND sa.product_type IN ('AUTH_7','RED_7','AUTH_YUN','RED','AUTH_FREE','RED_FREE')
		) total_invest,
		DATE_FORMAT(c.register_time,'%Y-%m-%d %H:%i:%s') register_time,
		DATE_FORMAT(c.login_time,'%Y-%m-%d %H:%i:%s') login_time
	FROM bs_user_sales a,bs_sales b,bs_user c
	WHERE 
		a.sales_id = b.id
		AND a.user_id = c.id
		AND a.grade < 3 
		AND b.invite_code LIKE 'qd%' 
		AND c.register_time <= #{startTime}
	]]>
		<choose>
			<when test="queryStartTime != null and queryStartTime != ''">
				AND c.register_time > #{queryStartTime}
			</when>
			<otherwise>
				AND c.register_time > DATE_SUB(#{startTime},INTERVAL 2 HOUR)
			</otherwise>
		</choose>
	</select>

	<select id="findUserByIds" resultMap="BaseResultMap" parameterType="java.util.Map">
		select
			<include refid="Base_Column_List" />
		from bs_user
		where
			status = 1
			and	id in
		<foreach collection="userIds" item="userId" index="index" open="(" close=")" separator=",">
			#{userId}
		</foreach>
		limit #{start}, #{numPerPage}
	</select><select id="customerInfoSyncRealName" resultMap="customerInfoSyncResultMap" parameterType="map">
	<![CDATA[
SELECT 
		SUBSTRING(b.invite_code ,3) franchisee_id,
		c.id customer_id,
		CONCAT(LEFT(c.user_name,1), '**') customer_name,
		CONCAT(LEFT(c.mobile,3), '****', RIGHT(c.mobile,4)) customer_mobile,
		a.grade  customer_level,
		CASE WHEN c.user_name IS NULL THEN 'N' ELSE 'Y' END   real_name_status,
		(
				SELECT SUM(IFNULL(sa.open_balance,0)) FROM 
				bs_sub_account sa,bs_account sb 
				WHERE sa.account_id = sb.id AND sb.user_id = c.id AND sa.`status` = 2 
				AND sa.product_type IN ('AUTH_7','RED_7','AUTH_YUN','RED','AUTH_FREE','RED_FREE')
		) remain_invest,
		CONCAT(LEFT(c.id_card,3), '***********', RIGHT(c.id_card,4)) id_card_no,
		(
					SELECT SUM(IFNULL(sa.open_balance,0)) FROM 
						bs_sub_account sa,bs_account sb 
					WHERE sa.account_id = sb.id AND sb.user_id = c.id AND sa.`status` IN (2,5,7)
					AND sa.product_type IN ('AUTH_7','RED_7','AUTH_YUN','RED','AUTH_FREE','RED_FREE')
		) total_invest,
		DATE_FORMAT(c.register_time,'%Y-%m-%d %H:%i:%s') register_time,
		DATE_FORMAT(c.login_time,'%Y-%m-%d %H:%i:%s') login_time
	FROM bs_user_sales a,bs_sales b,bs_user c,bs_bank_card d
	WHERE 
		a.sales_id = b.id
		AND a.user_id = c.id
		AND c.id = d.user_id
		AND d.status = 1 AND d.is_first = 1
		AND a.grade < 3 
		AND b.invite_code LIKE 'qd%' 
		AND d.bind_time <= #{startTime}
		]]>
		<choose>
			<when test="queryStartTime != null and queryStartTime != ''">
				AND d.bind_time > #{queryStartTime}
			</when>
			<otherwise>
				AND d.bind_time > DATE_SUB(#{startTime},INTERVAL 2 HOUR)
			</otherwise>
		</choose>
	</select>
	<select id="customerInfoSyncLogin" resultMap="customerInfoSyncResultMap" parameterType="map">
	<![CDATA[
	SELECT 
		SUBSTRING(b.invite_code ,3) franchisee_id,
		c.id customer_id,
		CONCAT(LEFT(c.user_name,1), '**') customer_name,
		CONCAT(LEFT(c.mobile,3), '****', RIGHT(c.mobile,4)) customer_mobile,
		a.grade  customer_level,
		CASE WHEN c.user_name IS NULL THEN 'N' ELSE 'Y' END   real_name_status,
		(
				SELECT SUM(IFNULL(sa.open_balance,0)) FROM 
				bs_sub_account sa,bs_account sb 
				WHERE sa.account_id = sb.id AND sb.user_id = c.id AND sa.`status` = 2 
				AND sa.product_type IN ('AUTH_7','RED_7','AUTH_YUN','RED','AUTH_FREE','RED_FREE')
		) remain_invest,
		CONCAT(LEFT(c.id_card,3), '***********', RIGHT(c.id_card,4)) id_card_no,
		(
					SELECT SUM(IFNULL(sa.open_balance,0)) FROM 
						bs_sub_account sa,bs_account sb 
					WHERE sa.account_id = sb.id AND sb.user_id = c.id AND sa.`status` IN (2,5,7)
					AND sa.product_type IN ('AUTH_7','RED_7','AUTH_YUN','RED','AUTH_FREE','RED_FREE')
		) total_invest,
		DATE_FORMAT(c.register_time,'%Y-%m-%d %H:%i:%s') register_time,
		DATE_FORMAT(c.login_time,'%Y-%m-%d %H:%i:%s') login_time
	FROM bs_user_sales a,bs_sales b,bs_user c
	WHERE 
		a.sales_id = b.id
		AND a.user_id = c.id
		AND a.grade < 3 
		AND b.invite_code LIKE 'qd%' 
		AND c.login_time IS NOT NULL
		AND c.login_time <= #{startTime}
		]]>
		<choose>
			<when test="queryStartTime != null and queryStartTime != ''">
				AND c.login_time > #{queryStartTime}
			</when>
			<otherwise>
				AND c.login_time > DATE_SUB(#{startTime},INTERVAL 2 HOUR)
			</otherwise>
		</choose>
	</select>
	<!-- ========================= 七店用户信息同步通知统计数据 E ===========================-->    <select id="findCountBirthdayByDate" resultType="java.lang.Integer" parameterType="java.util.Map">
        SELECT
        count(1)
        FROM
        (
            SELECT
                IF (
                DATE_FORMAT(
                SUBSTRING(a.id_card, 7, 8),
                '%m-%d'
                ) > DATE_FORMAT(now(), '%m-%d'),
                DATE_FORMAT(
                CONCAT(
                YEAR (now()),
                SUBSTRING(a.id_card, 11, 4)
                ),
                '%Y-%m-%d'
                ),
                DATE_FORMAT(
                CONCAT(
                YEAR (
                DATE_ADD(now(), INTERVAL 1 YEAR)
                ),
                SUBSTRING(a.id_card, 11, 4)
                ),
                '%Y-%m-%d'
                )
                ) AS birthday
            FROM
              bs_user a
            WHERE
              a.id_card IS NOT NULL
            AND a.is_bind_name = 1
            AND a.`status` = 1
        ) b
        WHERE
        b.birthday &gt;= DATE_FORMAT(#{startTime}, '%Y-%m-%d')
        AND b.birthday &lt;= DATE_FORMAT(#{endTime}, '%Y-%m-%d')
    </select>
	
	<!--  申请更换安全卡 -->
	<select id="countUserChangeBindCardInfo" parameterType="com.pinting.business.model.vo.BsChangeBindCardVO" resultType="java.lang.Integer">
		SELECT count(a.id)
		FROM bs_user_police_verify a left join bs_user b on a.user_id = b.id
		<where>
			<if test="userName != null and userName != ''">   
				and b.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != ''">   
				and b.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="verifyResult != null and verifyResult != '' and verifyResult != 'all'">   
				and a.verify_result = #{verifyResult}
			</if>
			<if test="checkStatus != null and checkStatus != '' and checkStatus != 'ALL'">   
				and a.check_status = #{checkStatus}
			</if>
			
			<if test="applyStartTime != null and applyStartTime != ''"> 
				and date(a.create_time) &gt;= #{applyStartTime} 
			</if>
			<if test="applyEndTime != null and applyEndTime != ''">   
				and date(a.create_time) &lt;= #{applyEndTime}
			</if>
			<if test="checkStartTime != null and checkStartTime != ''"> 
				and date(a.check_time) &gt;= #{checkStartTime} 
			</if>
			<if test="checkEndTime != null and checkEndTime != ''">   
				and date(a.check_time) &lt;= #{checkEndTime}
			</if>
		</where>
		ORDER BY a.create_time desc 
	</select>
	
	<resultMap type="com.pinting.business.model.vo.BsChangeBindCardVO" id="changeBindCardResultMap" >
		<result column="id" property="id" jdbcType="INTEGER" />
		<result column="user_name" property="userName" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="id_card" property="idCard" jdbcType="VARCHAR" />
		<result column="verify_result" property="verifyResult" jdbcType="VARCHAR" />
		<result column="create_time" property="applyTime" jdbcType="TIMESTAMP" />
		<result column="check_time" property="checkTime" jdbcType="TIMESTAMP" />
		<result column="check_status" property="checkStatus" jdbcType="VARCHAR" />
		<result column="checker" property="checkUser" jdbcType="DOUBLE" />
		<result column="score" property="score" jdbcType="INTEGER" />
		<result column="feedback" property="feedback" jdbcType="VARCHAR" />
	</resultMap>
	
	<select id="selectUserChangeBindCardInfo" parameterType="com.pinting.business.model.vo.BsChangeBindCardVO" resultMap="changeBindCardResultMap">
		SELECT b.user_name, b.mobile, b.id_card, a.id, a.verify_result, a.create_time, a.check_time, a.check_status, 
			   a.score, substring_index(a.check_desc, ',', -1) as feedback, c.name as checker
		FROM bs_user_police_verify a 
		left join bs_user b on a.user_id = b.id
		left join m_user c on a.checker = c.id
		<where>
			<if test="userName != null and userName != ''">   
				and b.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != ''">   
				and b.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="verifyResult != null and verifyResult != '' and verifyResult != 'all'">   
				and a.verify_result = #{verifyResult}
			</if>
			<if test="checkStatus != null and checkStatus != '' and checkStatus != 'ALL'">   
				and a.check_status = #{checkStatus}
			</if>
			<if test="businessType != null and businessType != ''">   
				and a.business_type = #{businessType}
			</if>
			<if test="applyStartTime != null and applyStartTime != ''"> 
				and date(a.create_time) &gt;= #{applyStartTime} 
			</if>
			<if test="applyEndTime != null and applyEndTime != ''">   
				and date(a.create_time) &lt;= #{applyEndTime}
			</if>
			<if test="checkStartTime != null and checkStartTime != ''"> 
				and date(a.check_time) &gt;= #{checkStartTime} 
			</if>
			<if test="checkEndTime != null and checkEndTime != ''">   
				and date(a.check_time) &lt;= #{checkEndTime}
			</if>
		</where>
		ORDER BY a.create_time desc 
		<include refid="sql-global.pagination" />
	</select>
	
	<select id="countQhdAgentUser" parameterType="com.pinting.business.model.vo.BsQhdUserAgentVO" resultType="java.lang.Integer">
		SELECT COUNT(u.id)
			from bs_user u 
			where 1=1
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
				and u.agent_id = #{distributionChannel}
			</if>
			<if test="(distributionChannel != null and distributionChannel != '' and distributionChannel =='999') or distributionChannel == null">
				and u.agent_id IN (51, 52, 53, 54, 55)
			</if>
			<if test="mobile !=null and mobile !='' ">
				and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="userName!=null">
				and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="startRegisterTime != null ">
				and DATE(u.register_time) >= DATE(#{startRegisterTime})
			</if>
			<if test="endRegisterTime != null ">
				and DATE(#{endRegisterTime}) >= DATE(u.register_time)
			</if>
			<if test="regTerminal != null and regTerminal != '99' ">
				and u.reg_terminal = #{regTerminal}
			</if>
	</select>

	<select id="selectQhdAgentUserList" parameterType="com.pinting.business.model.vo.BsQhdUserAgentVO" resultMap="qhdUserAgentResult">
		SELECT u.*, a.*, (a.authBalance + a.jshBalance + u.current_interest + a.jljBalance) as total_balance from 
			(select u.id, u.mobile, u.user_name, u.current_interest, u.total_interest, u.register_time, u.reg_terminal
			from bs_user u 
			where 1=1
				<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
					and u.agent_id = #{distributionChannel}
				</if>
				<if test="(distributionChannel != null and distributionChannel != '' and distributionChannel =='999') or distributionChannel == null">
					and u.agent_id IN (51, 52, 53, 54, 55)
				</if>
			) u left join 
			(select sum(CASE WHEN a.product_type in ('AUTH_YUN', 'RED', 'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE') 
				THEN a.open_balance else 0 END) as authBalance,
			sum(CASE WHEN a.product_type in ('JSH', 'DEP_JSH') THEN a.balance else 0 END) as jshBalance,
			sum(CASE WHEN a.product_type in ('JSH', 'DEP_JSH') THEN a.can_withdraw else 0 END) as can_withdraw,
			CASE WHEN a.product_type ='JLJ' THEN a.balance else 0 END as jljBalance,
			b.user_id
			from bs_sub_account a	
			INNER JOIN bs_account b on a.account_id = b.id
			INNER JOIN bs_user user on user.id = b.user_id
 			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
  			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
  			where 1=1
	  			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
					and user.agent_id = #{distributionChannel}
				</if>
				<if test="(distributionChannel != null and distributionChannel != '' and distributionChannel =='999') or distributionChannel == null">
					and user.agent_id IN (51, 52, 53, 54, 55)
				</if>
				and a.`status` in(1, 2, 5, 7) GROUP BY a.account_id) a
				on a.user_id = u.id
			<where>	
				<if test="mobile !=null and mobile !='' ">
					and u.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
				</if>
				<if test="userName!=null">
					and u.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
				</if>
				<if test="startRegisterTime != null ">
					and DATE(u.register_time) >= DATE(#{startRegisterTime})
				</if>
				<if test="endRegisterTime != null ">
					and DATE(#{endRegisterTime}) >= DATE(u.register_time)
				</if>
				<if test="regTerminal != null and regTerminal != '99' ">
					and u.reg_terminal = #{regTerminal}
				</if>
			</where>
		<include refid="sql-global.pagination" />
	</select>
	
	<select id="countQhdAgentBuyMessage" parameterType="com.pinting.business.model.vo.BsQhdStatisticsInvestVO" resultType="java.lang.Integer">
		SELECT COUNT(a.id)
		FROM bs_sub_account a 
			INNER JOIN bs_account b ON a.account_id=b.id
			INNER JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			INNER JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			LEFT JOIN bs_pay_orders o ON o.sub_account_id=a.id
			LEFT JOIN bs_bank_card card ON c.id = card.user_id and card.`status` in (1, 5)				
		<where>
				((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE')))
			and o.trans_type ='BALANCE_BUY_PRODUCT'		
			<if test="userName != null and userName != '' ">
				and c.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="accountStatus == null or accountStatus == 0">
				and a.status in (2,5,7)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and a.status = #{accountStatus}
			</if>
			<if test="term != null and term != 0 ">
				and datediff(a.last_finish_interest_date, a.interest_begin_date) = #{term}		
			</if>
			<if test="settleAccountsBeginTime != null ">
				and DATE(a.last_finish_interest_date) >= DATE(#{settleAccountsBeginTime})
			</if>
			<if test="settleAccountsEndTime != null ">
				and DATE(#{settleAccountsEndTime}) >= DATE(a.last_finish_interest_date)
			</if>
			<if test="buyBeginTime != null ">
				and DATE(a.open_time) >= DATE(#{buyBeginTime})
			</if>
			<if test="buyEndTime != null ">
				and DATE(#{buyEndTime}) >= DATE(a.open_time)
			</if>
			<if test="beginBuyAmount != null ">
				and (a.open_balance + IFNULL(red.open_balance, 0)) >= #{beginBuyAmount}
			</if>
			<if test="endBuyAmount != null ">
				and #{endBuyAmount} >= (a.open_balance + IFNULL(red.open_balance, 0))
			</if>
			<if test="terminalType != null and terminalType != '99' ">
				and o.terminal_type = #{terminalType}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
				and c.agent_id = #{distributionChannel}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='51' ">
				and FIND_IN_SET('H5_QHD_JT', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='52' ">
				and FIND_IN_SET('H5_QHD_XW', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='53' ">
				and FIND_IN_SET('H5_QHD_TV', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='54' ">
				and (FIND_IN_SET('PC_QHD_ST', e.show_terminal) or FIND_IN_SET('H5_QHD_ST', e.show_terminal))
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='55' ">
				and FIND_IN_SET('H5_QHD_SJC', e.show_terminal)
			</if>
			<if test="(distributionChannel != null and distributionChannel != '' and distributionChannel =='999') or distributionChannel == null">
				and c.agent_id IN (51, 52, 53, 54, 55)
				and (FIND_IN_SET('H5_QHD_JT', e.show_terminal) or FIND_IN_SET('H5_QHD_XW', e.show_terminal)
					or FIND_IN_SET('H5_QHD_TV', e.show_terminal) or FIND_IN_SET('PC_QHD_ST', e.show_terminal)
					or FIND_IN_SET('H5_QHD_ST', e.show_terminal) or FIND_IN_SET('H5_QHD_SJC', e.show_terminal))
			</if>
		</where>
	</select>
	
	<select id="findQhdAgentUserMessageList" parameterType="com.pinting.business.model.vo.BsQhdStatisticsInvestVO" resultMap="qhdUserBuyMessageResult">
		SELECT c.mobile, c.user_name, a.product_name, c.agent_id, e.base_rate, 
			a.open_balance + IFNULL(red.open_balance, 0) as openBalance, card.bank_name,
			a.`status`, a.open_time, a.last_finish_interest_date, d.agent_name, o.terminal_type,
			CASE e.term
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 12 THEN 365 
			ELSE e.term END as term
			FROM bs_sub_account a 
			LEFT JOIN bs_account b ON a.account_id=b.id
			LEFT JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			LEFT JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			LEFT JOIN bs_pay_orders o ON o.sub_account_id=a.id
			LEFT JOIN bs_bank_card card ON c.id = card.user_id and card.`status` in (1, 5)
			WHERE 
				((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE')))
			and o.trans_type ='BALANCE_BUY_PRODUCT'		
			<if test="userName != null and userName != '' ">
				and c.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="accountStatus == null or accountStatus == 0">
				and a.status in (2,5,7)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and a.status = #{accountStatus}
			</if>
			<if test="term != null and term != 0 ">
				and datediff(a.last_finish_interest_date, a.interest_begin_date) = #{term}	
			</if>
			<if test="settleAccountsBeginTime != null ">
				and DATE(a.last_finish_interest_date) >= DATE(#{settleAccountsBeginTime})
			</if>
			<if test="settleAccountsEndTime != null ">
				and DATE(#{settleAccountsEndTime}) >= DATE(a.last_finish_interest_date)
			</if>
			<if test="buyBeginTime != null ">
				and DATE(a.open_time) >= DATE(#{buyBeginTime})
			</if>
			<if test="buyEndTime != null ">
				and DATE(#{buyEndTime}) >= DATE(a.open_time)
			</if>
			<if test="beginBuyAmount != null ">
				and (a.open_balance + IFNULL(red.open_balance, 0)) >= #{beginBuyAmount}
			</if>
			<if test="endBuyAmount != null ">
				and #{endBuyAmount} >= (a.open_balance + IFNULL(red.open_balance, 0))
			</if>
			<if test="terminalType != null and terminalType != '99' ">
				and o.terminal_type = #{terminalType}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
				and c.agent_id = #{distributionChannel}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='51' ">
				and FIND_IN_SET('H5_QHD_JT', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='52' ">
				and FIND_IN_SET('H5_QHD_XW', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='53' ">
				and FIND_IN_SET('H5_QHD_TV', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='54' ">
				and (FIND_IN_SET('PC_QHD_ST', e.show_terminal) or FIND_IN_SET('H5_QHD_ST', e.show_terminal))
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='55' ">
				and FIND_IN_SET('H5_QHD_SJC', e.show_terminal)
			</if>
			<if test="(distributionChannel != null and distributionChannel != '' and distributionChannel =='999') or distributionChannel == null">
				and c.agent_id IN (51, 52, 53, 54, 55)
				and (FIND_IN_SET('H5_QHD_JT', e.show_terminal) or FIND_IN_SET('H5_QHD_XW', e.show_terminal)
					or FIND_IN_SET('H5_QHD_TV', e.show_terminal) or FIND_IN_SET('PC_QHD_ST', e.show_terminal)
					or FIND_IN_SET('H5_QHD_ST', e.show_terminal) or FIND_IN_SET('H5_QHD_SJC', e.show_terminal))
			</if>
		<include refid="sql-global.pagination" />
	</select>
	
	<select id="findQhdAgentUserSumBalance" parameterType="com.pinting.business.model.vo.BsQhdStatisticsInvestVO" resultType="java.lang.Double">
		SELECT SUM(a.open_balance + IFNULL(red.open_balance, 0))
		FROM bs_sub_account a 
			INNER JOIN bs_account b ON a.account_id=b.id
			INNER JOIN bs_user c ON c.id=b.user_id
			LEFT JOIN bs_agent d ON d.id=c.agent_id
			INNER JOIN bs_product e ON e.id=a.product_id
			LEFT JOIN bs_property_info f ON e.property_id=f.id
			LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
			LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
			LEFT JOIN bs_pay_orders o ON o.sub_account_id=a.id
			LEFT JOIN bs_bank_card card ON c.id = card.user_id and card.`status` in (1, 5)				
		<where>
				((f.property_symbol='YUN_DAI_SELF' and a.product_type in ('AUTH_YUN', 'RED'))
				or
				(f.property_symbol='7_DAI_SELF' and a.product_type in ('AUTH_7', 'RED_7'))
				or
				(f.property_symbol='FREE' and a.product_type in ('AUTH_FREE', 'RED_FREE')))
			and o.trans_type ='BALANCE_BUY_PRODUCT'		
			<if test="userName != null and userName != '' ">
				and c.user_name like concat(concat('%', #{userName,jdbcType=VARCHAR}),'%')
			</if>
			<if test="mobile != null and mobile != '' ">
				and c.mobile like concat(concat('%', #{mobile,jdbcType=VARCHAR}),'%')
			</if>
			<if test="accountStatus == null or accountStatus == 0">
				and a.status in (2,5,7)
			</if>
			<if test="accountStatus != null and accountStatus > 0 ">
				and a.status = #{accountStatus}
			</if>
			<if test="term != null and term != 0 ">
				and datediff(a.last_finish_interest_date, a.interest_begin_date) = #{term}		
			</if>
			<if test="settleAccountsBeginTime != null ">
				and DATE(a.last_finish_interest_date) >= DATE(#{settleAccountsBeginTime})
			</if>
			<if test="settleAccountsEndTime != null ">
				and DATE(#{settleAccountsEndTime}) >= DATE(a.last_finish_interest_date)
			</if>
			<if test="buyBeginTime != null ">
				and DATE(a.open_time) >= DATE(#{buyBeginTime})
			</if>
			<if test="buyEndTime != null ">
				and DATE(#{buyEndTime}) >= DATE(a.open_time)
			</if>
			<if test="beginBuyAmount != null ">
				and (a.open_balance + IFNULL(red.open_balance, 0)) >= #{beginBuyAmount}
			</if>
			<if test="endBuyAmount != null ">
				and #{endBuyAmount} >= (a.open_balance + IFNULL(red.open_balance, 0))
			</if>
			<if test="terminalType != null and terminalType != '99' ">
				and o.terminal_type = #{terminalType}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel !='999' ">
				and c.agent_id = #{distributionChannel}
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='51' ">
				and FIND_IN_SET('H5_QHD_JT', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='52' ">
				and FIND_IN_SET('H5_QHD_XW', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='53' ">
				and FIND_IN_SET('H5_QHD_TV', e.show_terminal)
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='54' ">
				and (FIND_IN_SET('PC_QHD_ST', e.show_terminal) or FIND_IN_SET('H5_QHD_ST', e.show_terminal))
			</if>
			<if test="distributionChannel != null and distributionChannel != '' and distributionChannel =='55' ">
				and FIND_IN_SET('H5_QHD_SJC', e.show_terminal)
			</if>
			<if test="(distributionChannel != null and distributionChannel != '' and distributionChannel =='999') or distributionChannel == null">
				and c.agent_id IN (51, 52, 53, 54, 55)
				and (FIND_IN_SET('H5_QHD_JT', e.show_terminal) or FIND_IN_SET('H5_QHD_XW', e.show_terminal)
					or FIND_IN_SET('H5_QHD_TV', e.show_terminal) or FIND_IN_SET('PC_QHD_ST', e.show_terminal)
					or FIND_IN_SET('H5_QHD_ST', e.show_terminal) or FIND_IN_SET('H5_QHD_SJC', e.show_terminal))
			</if>
		</where>
	</select>
	
	<resultMap type="com.pinting.business.model.vo.BsQhdStatisticsInvestVO" id="qhdUserBuyMessageResult" extends="BaseResultMap">
		<result column="term" property="term" />
		<result column="base_rate" property="rate" />
		<result column="product_name" property="productName" />
		<result column="open_time" property="openTime" />
		<result column="last_finish_interest_date" property="lastFinishInterestDate" />
		<result column="status" property="accountStatus" />
		<result column="agent_name" property="agentName" />
		<result column="openBalance" property="openBalance" />
		<result column="bank_name" property="bankName" />
		<result column="agent_id" property="agentId" />
		<result column="mobile" property="mobile"/>
		<result column="user_name" property="userName" />
		<result column="terminal_type" property="terminalType" />
	</resultMap>
	
	<resultMap type="com.pinting.business.model.vo.BsQhdUserAgentVO" id="qhdUserAgentResult">
		<result column="user_name" property="userName" />
		<result column="mobile" property="mobile"/>
		<result column="total_balance" property="totalBalance" />
		<result column="can_withdraw" property="canWithdraw" />
		<result column="authBalance" property="authBalance" />
		<result column="jljBalance" property="jljBalance" />
		<result column="jshBalance" property="jshBalance" />
		<result column="current_interest" property="currentInterest" />
		<result column="current_banlace" property="currentBanlace" />
		<result column="total_interest" property="totalInterest" />
		<result column="register_time" property="registerTime" />
		<result column="reg_terminal" property="regTerminal" />
	</resultMap>
	
	<select id="findBirthdayBenefitUserList" parameterType="map" resultMap="BaseResultMap">
		SELECT a.* from (
			SELECT id, nick, user_name, mobile, email, id_card, status, recommend_id, register_time, agent_id from bs_user 
			WHERE status=1 and id_card is not null and SUBSTR(id_card, 11, 4) = #{birthday}
		) a left join (select a.user_id, a.serial_no, a.id from bs_red_packet_info a where a.serial_no = #{serialNo} and date(now()) = date(a.create_time)
		) b on a.id = b.user_id
		where b.id is null 
	</select>
	
</mapper>