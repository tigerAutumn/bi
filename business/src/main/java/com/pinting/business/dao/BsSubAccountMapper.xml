<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.pinting.business.dao.BsSubAccountMapper" >
  <resultMap id="BaseResultMap" type="com.pinting.business.model.BsSubAccount" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="product_id" property="productId" jdbcType="INTEGER" />
    <result column="product_type" property="productType" jdbcType="VARCHAR" />
    <result column="product_code" property="productCode" jdbcType="VARCHAR" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
    <result column="product_rate" property="productRate" jdbcType="DOUBLE" />
    <result column="bank_card" property="bankCard" jdbcType="VARCHAR" />
    <result column="extra_rate" property="extraRate" jdbcType="DOUBLE" />
    <result column="open_balance" property="openBalance" jdbcType="DOUBLE" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
    <result column="available_balance" property="availableBalance" jdbcType="DOUBLE" />
    <result column="can_withdraw" property="canWithdraw" jdbcType="DOUBLE" />
    <result column="freeze_balance" property="freezeBalance" jdbcType="DOUBLE" />
    <result column="left_plan_interest" property="leftPlanInterest" jdbcType="DOUBLE" />
    <result column="trans_status" property="transStatus" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="check_status" property="checkStatus" jdbcType="VARCHAR" />
    <result column="interest_begin_date" property="interestBeginDate" jdbcType="DATE" />
    <result column="last_trans_date" property="lastTransDate" jdbcType="DATE" />
    <result column="last_cal__interest_date" property="lastCalInterestDate" jdbcType="DATE" />
    <result column="last_finish_interest_date" property="lastFinishInterestDate" jdbcType="DATE" />
    <result column="accumulation_inerest" property="accumulationInerest" jdbcType="DOUBLE" />
    <result column="open_time" property="openTime" jdbcType="TIMESTAMP" />
    <result column="close_time" property="closeTime" jdbcType="TIMESTAMP" />
    <result column="transfer_time" property="transferTime" jdbcType="TIMESTAMP" />
    <result column="note" property="note" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="SubAc4InterestVOResultMap" type="com.pinting.business.model.vo.BsSubAc4InterestVO" >
    <result column="id" property="id" jdbcType="INTEGER" />
    <result column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="product_id" property="productId" jdbcType="INTEGER" />
    <result column="product_code" property="productCode" jdbcType="VARCHAR" />
    <result column="product_rate" property="productRate" jdbcType="DOUBLE" />
    <result column="extra_rate" property="extraRate" jdbcType="DOUBLE" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="accumulation_inerest" property="accumulationInerest" jdbcType="DOUBLE" />
    <result property="accountCode" column="account_code"/>
  	<result property="userId" column="user_id"/>
  	<result property="totalInterest" column="total_interest"/>
  	<result property="nick" column="nick"/>
  	<result property="mobile" column="mobile"/>
  	<result property="productAccuInterest" column="product_accu_interest"  />
    <result column="red_balance" property="redBalance" jdbcType="DOUBLE" />
    <result column="red_account_id" property="redAccountId" jdbcType="INTEGER" />
  	
  </resultMap>
  
  <resultMap id="TotalInvestGroupByMonthMap" type="com.pinting.business.model.vo.TotalInvestGroupByMonthVO" >
    <result column="total_invest" property="totalInvest" jdbcType="DOUBLE" />
    <result column="invest_month" property="investMonth" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="investTotalGroupByProductMap" type="com.pinting.business.model.vo.InvestTotalGroupByProductVO" >
    <result column="invest_total_group_by_product_amount" property="investTotalGroupByProductAmount" jdbcType="DOUBLE" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
  </resultMap>
  
   <resultMap id="InvestorTypeVOMap" type="com.pinting.business.model.vo.InvestorTypeVO" >
    <result column="investor_type_number" property="investorTypeNumber" jdbcType="INTEGER" />
    <result column="investor_type_name" property="investorTypeName" jdbcType="VARCHAR" />
    <result column="investor_type_rate" property="investorTypeRate" jdbcType="DOUBLE" />
    
  </resultMap>
  
  <resultMap id="DailyAmount4LoanVOMap" type="com.pinting.business.model.vo.DailyAmount4LoanVO" >
    <result column="term" property="term" jdbcType="INTEGER" />
    <result column="sum_amount" property="sumAmount" jdbcType="DOUBLE" />
  </resultMap>
  
  <resultMap id="CanMatch4ZanMap" type="com.pinting.business.model.vo.BsCanMatch4ZanSubAccountVO">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="product_id" property="productId" jdbcType="INTEGER" />
    <result column="product_type" property="productType" jdbcType="VARCHAR" />
    <result column="product_rate" property="productRate" jdbcType="DOUBLE" />
    <result column="open_balance" property="openBalance" jdbcType="DOUBLE" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
     <result column="available_balance" property="availableBalance" jdbcType="DOUBLE" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="interest_begin_date" property="interestBeginDate" jdbcType="DATE" />
	<result column="user_id" property="userId" jdbcType="INTEGER" />
	<result column="agent_id" property="agentId" jdbcType="INTEGER" />
	<result column="term" property="term" jdbcType="INTEGER" />

  </resultMap>
  
  <resultMap id="SubAc4ActivityMap" type="com.pinting.business.model.vo.BsSubAc4ActivityVO" >
    <result column="amount" property="amount" jdbcType="DOUBLE" />
    <result column="term" property="term" jdbcType="INTEGER" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
    <result column="serial_name" property="serialName" jdbcType="VARCHAR" />
    <result column="show_terminal" property="showTerminal" jdbcType="VARCHAR" />
  </resultMap>
  
  
  <resultMap id="InvestProportionVOMap" type="com.pinting.business.model.vo.BsInvestProportionVO" >
    <result column="product_type" property="productType" jdbcType="VARCHAR" />
    <result column="invest_amount" property="investAmount" jdbcType="DOUBLE" />
    <result column="invest_num" property="investNum" jdbcType="INTEGER" />
    <result column="proportion_rate" property="proportionRate" jdbcType="DOUBLE" />
  </resultMap>
  
  <resultMap id="Platform4ManageProductVOMap" type="com.pinting.business.model.vo.Platform4ManageProductVO" >
    <result column="product_term" property="productTerm" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, account_id, code, product_id, product_type, product_code, product_name, product_rate, 
    bank_card, extra_rate, open_balance, balance, available_balance, can_withdraw, freeze_balance, 
    left_plan_interest, trans_status, status, check_status, interest_begin_date, last_trans_date, last_cal__interest_date, 
    last_finish_interest_date, accumulation_inerest, open_time, close_time, transfer_time, 
    note
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.pinting.business.model.BsSubAccountExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bs_sub_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
  <resultMap id="VoResultMap" type="com.pinting.business.model.vo.BsSubAccountVO" extends="BaseResultMap">
  		<id column="id" property="id" jdbcType="INTEGER" />
  		<result column="balance" property="balance" jdbcType="DOUBLE" />
  		<result column="open_time" property="openTime" jdbcType="TIMESTAMP" />
  		<result column="product_rate" property="productRate" jdbcType="DOUBLE" />
  		<result column="term" property="term" />
  		<result column="investDay" property="investDay" />
  		<result column="investEndTime" property="investEndTime" />
  		<result column="product_id" property="productId" jdbcType="INTEGER" />
  		<result column="interest_begin_date" property="interestBeginDate" jdbcType="DATE" />
  		<result property="totalAmount" column="totalAmount"/>
  		<result property="investCount" column="investCount"/>
  		<result column="product_name" property="productName" jdbcType="VARCHAR" />
  		<result column="red_amount" property="redAmount" jdbcType="DOUBLE"/>
  		<result column="start_time" property="startTime" jdbcType="TIMESTAMP"/>
  		<result column="property_type" property="propertyType" jdbcType="VARCHAR"/>
  		<result column="user_id" property="userId" jdbcType="INTEGER" />
        <result column="return_balance" property="returnBalance" jdbcType="DOUBLE" />
        <result column="entrust_status" property="entrustStatus" jdbcType="VARCHAR" />
        <result column="return_type" property="returnType" jdbcType="VARCHAR" />
        <result column="return_amount" property="returnAmount" jdbcType="DOUBLE" />
  		<result column="receive_amount" property="receiveAmount" jdbcType="DOUBLE" />
  		<result column="receive_principal_amount" property="receivePrincipalAmount" jdbcType="DOUBLE" />
  		<result column="receive_interest_amount" property="receiveInterestAmount" jdbcType="DOUBLE" />
        <result column="product_type" property="productType" jdbcType="VARCHAR" />
  		<result column="last_finish_interest_date" property="lastFinishInterestDate" jdbcType="DATE" />
        <result column="property_id" property="propertyId" jdbcType="INTEGER" />
        <result column="ticket_apr" property="ticketApr" jdbcType="DOUBLE" />
        <result column="interest_amount" property="interestAmount" jdbcType="DOUBLE" />
  </resultMap>
  <select id="selectByExamplePage"   resultMap="VoResultMap" parameterType="java.util.Map" >
SELECT 
		*
FROM (      
        select
        	b.id id,p.`name` as product_name,p.property_id,
    		b.open_balance as balance,
	    	b.open_time openTime,
	    	b.interest_begin_date interestBeginDate,
	    	b.status,
	    	b.product_rate product_rate,
	    	p.id productId,
	    	p.term term,p.property_type propertyType,
	    	case when p.term = 12  then (365 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				when p.term = -7  then (7 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				else (p.term * 30 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				) end investDay,
			b.last_finish_interest_date investEndTime,
			c.amount AS red_amount, p.start_time,0 AS ticket_apr,0 AS interest_amount
	    	from bs_sub_account b 
    		,bs_account a,bs_product p,
	    	bs_pay_orders o LEFT JOIN bs_red_packet_info c ON o.order_no = c.order_no AND c.`status` = 'USED'
		<where>
			b.account_id = a.id and b.product_id = p.id and b.status != 1  and b.status != 6 
		  <if test="type == 'REG'">
            and b.product_type IN ('REG')
          </if>
          and (o.trans_type = 'CARD_BUY_PRODUCT' OR o.trans_type = 'BALANCE_BUY_PRODUCT') AND
		    a.user_id=#{userId , jdbcType=INTEGER} 
		    <if test="status != null and status > 0">
		    	and ( b.status = #{status} or b.status = 7 )
		    </if>
		    AND o.sub_account_id = b.id
		</where>
		UNION
		
		select
        	b.id id,p.`name` as product_name,p.property_id,
    		b.open_balance + IFNULL(red.open_balance,0) as balance,
	    	b.open_time openTime,
	    	b.interest_begin_date interestBeginDate,
	    	b.status,
	    	b.product_rate product_rate,
	    	p.id productId,
	    	p.term term,p.property_type propertyType,
	    	case when p.term = 12  then (365 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				when p.term = -7  then (7 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				else (p.term * 30 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				) end investDay,
			b.last_finish_interest_date investEndTime,
			red.open_balance AS red_amount, p.start_time,
			ifnull(ti.ticket_apr, '0') AS ticket_apr,
 			ifnull(ti.interest_amount, '0') AS interest_amount
	    	from bs_sub_account b LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = b.id 
	    	LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
	    	LEFT JOIN bs_interest_ticket_info ti ON b.id = ti.auth_account_id
    		,bs_account a,bs_product p
		<where>
			b.account_id = a.id and b.product_id = p.id and b.status != 1 and b.status != 6 
		  <if test="type == 'REG'">
            and b.product_type IN ('AUTH_YUN','AUTH_ZSD','AUTH_7', 'AUTH_FREE')
          </if>
          AND a.user_id=#{userId , jdbcType=INTEGER} 
    	  <if test="status != null and status > 0">
	    	 and ( b.status = #{status} or b.status = 7 )
	      </if>
		</where>
	) aa		
		order by aa.investEndTime desc , aa.openTime desc, aa.id desc
        limit #{start , jdbcType=INTEGER}, #{pageSize , jdbcType=INTEGER}
  </select>
  
  <select id="selectByExampleByUserIdAndId"   resultMap="VoResultMap" parameterType="java.util.Map" >
        select
        	b.id id,
	    	b.balance balance,
	    	b.interest_begin_date openTime,
	    	b.product_rate product_rate,
	    	b.product_id product_id,
	    	b.last_finish_interest_date,
	    	p.term term,
	    	datediff(now(), b.interest_begin_date) investDay,
			date_Add(b.interest_begin_date,INTERVAL p.term*30 DAY) investEndTime
	    	from bs_sub_account b,bs_account a,bs_product p
		<where>
			b.account_id = a.id and b.product_id = p.id and 
			b.id=#{id} and
		    a.user_id=#{userId , jdbcType=INTEGER} 
		</where>
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bs_sub_account
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from bs_sub_account
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.pinting.business.model.BsSubAccountExample" >
    delete from bs_sub_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.pinting.business.model.BsSubAccount" >
    insert into bs_sub_account (id, account_id, code, 
      product_id, product_type, product_code, 
      product_name, product_rate, bank_card, 
      extra_rate, open_balance, balance, 
      available_balance, can_withdraw, freeze_balance, 
      left_plan_interest, trans_status, status, check_status, 
      interest_begin_date, last_trans_date, last_cal__interest_date, 
      last_finish_interest_date, accumulation_inerest, 
      open_time, close_time, transfer_time, 
      note)
    values (#{id,jdbcType=INTEGER}, #{accountId,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, 
      #{productId,jdbcType=INTEGER}, #{productType,jdbcType=VARCHAR}, #{productCode,jdbcType=VARCHAR}, 
      #{productName,jdbcType=VARCHAR}, #{productRate,jdbcType=DOUBLE}, #{bankCard,jdbcType=VARCHAR}, 
      #{extraRate,jdbcType=DOUBLE}, #{openBalance,jdbcType=DOUBLE}, #{balance,jdbcType=DOUBLE}, 
      #{availableBalance,jdbcType=DOUBLE}, #{canWithdraw,jdbcType=DOUBLE}, #{freezeBalance,jdbcType=DOUBLE}, 
      #{leftPlanInterest,jdbcType=DOUBLE}, #{transStatus,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{checkStatus,jdbcType=VARCHAR}, 
      #{interestBeginDate,jdbcType=DATE}, #{lastTransDate,jdbcType=DATE}, #{lastCalInterestDate,jdbcType=DATE}, 
      #{lastFinishInterestDate,jdbcType=DATE}, #{accumulationInerest,jdbcType=DOUBLE}, 
      #{openTime,jdbcType=TIMESTAMP}, #{closeTime,jdbcType=TIMESTAMP}, #{transferTime,jdbcType=TIMESTAMP}, 
      #{note,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.pinting.business.model.BsSubAccount" useGeneratedKeys="true" keyProperty="id">
    insert into bs_sub_account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="code != null" >
        code,
      </if>
      <if test="productId != null" >
        product_id,
      </if>
      <if test="productType != null" >
        product_type,
      </if>
      <if test="productCode != null" >
        product_code,
      </if>
      <if test="productName != null" >
        product_name,
      </if>
      <if test="productRate != null" >
        product_rate,
      </if>
      <if test="bankCard != null" >
        bank_card,
      </if>
      <if test="extraRate != null" >
        extra_rate,
      </if>
      <if test="openBalance != null" >
        open_balance,
      </if>
      <if test="balance != null" >
        balance,
      </if>
      <if test="availableBalance != null" >
        available_balance,
      </if>
      <if test="canWithdraw != null" >
        can_withdraw,
      </if>
      <if test="freezeBalance != null" >
        freeze_balance,
      </if>
      <if test="leftPlanInterest != null">
        left_plan_interest,
      </if>
      <if test="transStatus != null" >
        trans_status,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="checkStatus != null" >
        check_status,
      </if>
      <if test="interestBeginDate != null" >
        interest_begin_date,
      </if>
      <if test="lastTransDate != null" >
        last_trans_date,
      </if>
      <if test="lastCalInterestDate != null" >
        last_cal__interest_date,
      </if>
      <if test="lastFinishInterestDate != null" >
        last_finish_interest_date,
      </if>
      <if test="accumulationInerest != null" >
        accumulation_inerest,
      </if>
      <if test="openTime != null" >
        open_time,
      </if>
      <if test="closeTime != null" >
        close_time,
      </if>
      <if test="transferTime != null" >
        transfer_time,
      </if>
      <if test="note != null" >
        note,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="accountId != null" >
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="productId != null" >
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="productType != null" >
        #{productType,jdbcType=VARCHAR},
      </if>
      <if test="productCode != null" >
        #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="productName != null" >
        #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productRate != null" >
        #{productRate,jdbcType=DOUBLE},
      </if>
      <if test="bankCard != null" >
        #{bankCard,jdbcType=VARCHAR},
      </if>
      <if test="extraRate != null" >
        #{extraRate,jdbcType=DOUBLE},
      </if>
      <if test="openBalance != null" >
        #{openBalance,jdbcType=DOUBLE},
      </if>
      <if test="balance != null" >
        #{balance,jdbcType=DOUBLE},
      </if>
      <if test="availableBalance != null" >
        #{availableBalance,jdbcType=DOUBLE},
      </if>
      <if test="canWithdraw != null" >
        #{canWithdraw,jdbcType=DOUBLE},
      </if>
      <if test="freezeBalance != null" >
        #{freezeBalance,jdbcType=DOUBLE},
      </if>
      <if test="leftPlanInterest != null" >
        #{leftPlanInterest,jdbcType=DOUBLE},
      </if>
      <if test="transStatus != null" >
        #{transStatus,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="checkStatus != null" >
        #{checkStatus,jdbcType=VARCHAR},
      </if>
      <if test="interestBeginDate != null" >
        #{interestBeginDate,jdbcType=DATE},
      </if>
      <if test="lastTransDate != null" >
        #{lastTransDate,jdbcType=DATE},
      </if>
      <if test="lastCalInterestDate != null" >
        #{lastCalInterestDate,jdbcType=DATE},
      </if>
      <if test="lastFinishInterestDate != null" >
        #{lastFinishInterestDate,jdbcType=DATE},
      </if>
      <if test="accumulationInerest != null" >
        #{accumulationInerest,jdbcType=DOUBLE},
      </if>
      <if test="openTime != null" >
        #{openTime,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTime != null" >
        #{closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transferTime != null" >
        #{transferTime,jdbcType=TIMESTAMP},
      </if>
      <if test="note != null" >
        #{note,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.pinting.business.model.BsSubAccountExample" resultType="java.lang.Integer">
    select count(*) from bs_sub_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update bs_sub_account
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.accountId != null" >
        account_id = #{record.accountId,jdbcType=INTEGER},
      </if>
      <if test="record.code != null" >
        code = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.productId != null" >
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.productType != null" >
        product_type = #{record.productType,jdbcType=VARCHAR},
      </if>
      <if test="record.productCode != null" >
        product_code = #{record.productCode,jdbcType=VARCHAR},
      </if>
      <if test="record.productName != null" >
        product_name = #{record.productName,jdbcType=VARCHAR},
      </if>
      <if test="record.productRate != null" >
        product_rate = #{record.productRate,jdbcType=DOUBLE},
      </if>
      <if test="record.bankCard != null" >
        bank_card = #{record.bankCard,jdbcType=VARCHAR},
      </if>
      <if test="record.extraRate != null" >
        extra_rate = #{record.extraRate,jdbcType=DOUBLE},
      </if>
      <if test="record.openBalance != null" >
        open_balance = #{record.openBalance,jdbcType=DOUBLE},
      </if>
      <if test="record.balance != null" >
        balance = #{record.balance,jdbcType=DOUBLE},
      </if>
      <if test="record.availableBalance != null" >
        available_balance = #{record.availableBalance,jdbcType=DOUBLE},
      </if>
      <if test="record.canWithdraw != null" >
        can_withdraw = #{record.canWithdraw,jdbcType=DOUBLE},
      </if>
      <if test="record.freezeBalance != null" >
        freeze_balance = #{record.freezeBalance,jdbcType=DOUBLE},
      </if>
      <if test="record.leftPlanInterest != null">
        left_plan_interest = #{record.leftPlanInterest,jdbcType=DOUBLE},
      </if>
      <if test="record.transStatus != null" >
        trans_status = #{record.transStatus,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.checkStatus != null" >
        check_status = #{record.checkStatus,jdbcType=VARCHAR},
      </if>
      <if test="record.interestBeginDate != null" >
        interest_begin_date = #{record.interestBeginDate,jdbcType=DATE},
      </if>
      <if test="record.lastTransDate != null" >
        last_trans_date = #{record.lastTransDate,jdbcType=DATE},
      </if>
      <if test="record.lastCalInterestDate != null" >
        last_cal__interest_date = #{record.lastCalInterestDate,jdbcType=DATE},
      </if>
      <if test="record.lastFinishInterestDate != null" >
        last_finish_interest_date = #{record.lastFinishInterestDate,jdbcType=DATE},
      </if>
      <if test="record.accumulationInerest != null" >
        accumulation_inerest = #{record.accumulationInerest,jdbcType=DOUBLE},
      </if>
      <if test="record.openTime != null" >
        open_time = #{record.openTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.closeTime != null" >
        close_time = #{record.closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.transferTime != null" >
        transfer_time = #{record.transferTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.note != null" >
        note = #{record.note,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update bs_sub_account
    set id = #{record.id,jdbcType=INTEGER},
      account_id = #{record.accountId,jdbcType=INTEGER},
      code = #{record.code,jdbcType=VARCHAR},
      product_id = #{record.productId,jdbcType=INTEGER},
      product_type = #{record.productType,jdbcType=VARCHAR},
      product_code = #{record.productCode,jdbcType=VARCHAR},
      product_name = #{record.productName,jdbcType=VARCHAR},
      product_rate = #{record.productRate,jdbcType=DOUBLE},
      bank_card = #{record.bankCard,jdbcType=VARCHAR},
      extra_rate = #{record.extraRate,jdbcType=DOUBLE},
      open_balance = #{record.openBalance,jdbcType=DOUBLE},
      balance = #{record.balance,jdbcType=DOUBLE},
      available_balance = #{record.availableBalance,jdbcType=DOUBLE},
      can_withdraw = #{record.canWithdraw,jdbcType=DOUBLE},
      freeze_balance = #{record.freezeBalance,jdbcType=DOUBLE},
      left_plan_interest = #{record.leftPlanInterest,jdbcType=DOUBLE},
      trans_status = #{record.transStatus,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      check_status = #{record.checkStatus,jdbcType=VARCHAR},
      interest_begin_date = #{record.interestBeginDate,jdbcType=DATE},
      last_trans_date = #{record.lastTransDate,jdbcType=DATE},
      last_cal__interest_date = #{record.lastCalInterestDate,jdbcType=DATE},
      last_finish_interest_date = #{record.lastFinishInterestDate,jdbcType=DATE},
      accumulation_inerest = #{record.accumulationInerest,jdbcType=DOUBLE},
      open_time = #{record.openTime,jdbcType=TIMESTAMP},
      close_time = #{record.closeTime,jdbcType=TIMESTAMP},
      transfer_time = #{record.transferTime,jdbcType=TIMESTAMP},
      note = #{record.note,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.pinting.business.model.BsSubAccount" >
    update bs_sub_account
    <set >
      <if test="accountId != null" >
        account_id = #{accountId,jdbcType=INTEGER},
      </if>
      <if test="code != null" >
        code = #{code,jdbcType=VARCHAR},
      </if>
      <if test="productId != null" >
        product_id = #{productId,jdbcType=INTEGER},
      </if>
      <if test="productType != null" >
        product_type = #{productType,jdbcType=VARCHAR},
      </if>
      <if test="productCode != null" >
        product_code = #{productCode,jdbcType=VARCHAR},
      </if>
      <if test="productName != null" >
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productRate != null" >
        product_rate = #{productRate,jdbcType=DOUBLE},
      </if>
      <if test="bankCard != null" >
        bank_card = #{bankCard,jdbcType=VARCHAR},
      </if>
      <if test="extraRate != null" >
        extra_rate = #{extraRate,jdbcType=DOUBLE},
      </if>
      <if test="openBalance != null" >
        open_balance = #{openBalance,jdbcType=DOUBLE},
      </if>
      <if test="balance != null" >
        balance = #{balance,jdbcType=DOUBLE},
      </if>
      <if test="availableBalance != null" >
        available_balance = #{availableBalance,jdbcType=DOUBLE},
      </if>
      <if test="canWithdraw != null" >
        can_withdraw = #{canWithdraw,jdbcType=DOUBLE},
      </if>
      <if test="freezeBalance != null" >
        freeze_balance = #{freezeBalance,jdbcType=DOUBLE},
      </if>
      <if test="leftPlanInterest != null">
        left_plan_interest = #{leftPlanInterest,jdbcType=DOUBLE},
      </if>
      <if test="transStatus != null" >
        trans_status = #{transStatus,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="checkStatus != null" >
        check_status = #{checkStatus,jdbcType=VARCHAR},
      </if>
      <if test="interestBeginDate != null" >
        interest_begin_date = #{interestBeginDate,jdbcType=DATE},
      </if>
      <if test="lastTransDate != null" >
        last_trans_date = #{lastTransDate,jdbcType=DATE},
      </if>
      <if test="lastCalInterestDate != null" >
        last_cal__interest_date = #{lastCalInterestDate,jdbcType=DATE},
      </if>
      <if test="lastFinishInterestDate != null" >
        last_finish_interest_date = #{lastFinishInterestDate,jdbcType=DATE},
      </if>
      <if test="accumulationInerest != null" >
        accumulation_inerest = #{accumulationInerest,jdbcType=DOUBLE},
      </if>
      <if test="openTime != null" >
        open_time = #{openTime,jdbcType=TIMESTAMP},
      </if>
      <if test="closeTime != null" >
        close_time = #{closeTime,jdbcType=TIMESTAMP},
      </if>
      <if test="transferTime != null" >
        transfer_time = #{transferTime,jdbcType=TIMESTAMP},
      </if>
      <if test="note != null" >
        note = #{note,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.pinting.business.model.BsSubAccount" >
    update bs_sub_account
    set account_id = #{accountId,jdbcType=INTEGER},
      code = #{code,jdbcType=VARCHAR},
      product_id = #{productId,jdbcType=INTEGER},
      product_type = #{productType,jdbcType=VARCHAR},
      product_code = #{productCode,jdbcType=VARCHAR},
      product_name = #{productName,jdbcType=VARCHAR},
      product_rate = #{productRate,jdbcType=DOUBLE},
      bank_card = #{bankCard,jdbcType=VARCHAR},
      extra_rate = #{extraRate,jdbcType=DOUBLE},
      open_balance = #{openBalance,jdbcType=DOUBLE},
      balance = #{balance,jdbcType=DOUBLE},
      available_balance = #{availableBalance,jdbcType=DOUBLE},
      can_withdraw = #{canWithdraw,jdbcType=DOUBLE},
      freeze_balance = #{freezeBalance,jdbcType=DOUBLE},
      left_plan_interest = #{leftPlanInterest,jdbcType=DOUBLE},
      trans_status = #{transStatus,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      check_status = #{checkStatus,jdbcType=VARCHAR},
      interest_begin_date = #{interestBeginDate,jdbcType=DATE},
      last_trans_date = #{lastTransDate,jdbcType=DATE},
      last_cal__interest_date = #{lastCalInterestDate,jdbcType=DATE},
      last_finish_interest_date = #{lastFinishInterestDate,jdbcType=DATE},
      accumulation_inerest = #{accumulationInerest,jdbcType=DOUBLE},
      open_time = #{openTime,jdbcType=TIMESTAMP},
      close_time = #{closeTime,jdbcType=TIMESTAMP},
      transfer_time = #{transferTime,jdbcType=TIMESTAMP},
      note = #{note,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectJSHSubAccountByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    	a.id, a.account_id, a.code, a.product_type, a.open_balance, a.balance, 
    	a.available_balance, a.can_withdraw, a.freeze_balance, 
	    a.trans_status, a.status, a.open_time, a.note
    from 
    	bs_sub_account a, bs_account b, bs_user c
    where 
    	a.account_id = b.id and 
    	b.user_id = c.id and 
    	c.id = #{userId} and 
    	a.status = '1' and
		a.product_type = 'JSH'
  </select>

  <select id="selectDepJSHSubAccountByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    a.id, a.account_id, a.code, a.product_type, a.open_balance, a.balance,
    a.available_balance, a.can_withdraw, a.freeze_balance,
    a.trans_status, a.status, a.open_time, a.note
    from
    bs_sub_account a, bs_account b, bs_user c
    where
    a.account_id = b.id and
    b.user_id = c.id and
    c.id = #{userId} and
    a.status = '1' and
    a.product_type = 'DEP_JSH'
  </select>

  <select id="selectDEPJSHSubAccountByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    a.id, a.account_id, a.code, a.product_type, a.open_balance, a.balance,
    a.available_balance, a.can_withdraw, a.freeze_balance,
    a.trans_status, a.status, a.open_time, a.note
    from
    bs_sub_account a, bs_account b, bs_user c
    where
    a.account_id = b.id and
    b.user_id = c.id and
    c.id = #{userId} and
    a.status = '1' and
    a.product_type = 'DEP_JSH'
  </select>

  <select id="selectJLJSubAccountByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    	a.id, a.account_id, a.code, a.product_type, a.open_balance, a.balance, 
    	a.available_balance, a.can_withdraw, a.freeze_balance, 
	    a.trans_status, a.status, a.open_time, a.note
    from 
    	bs_sub_account a, bs_account b, bs_user c
    where 
    	a.account_id = b.id and 
    	b.user_id = c.id and 
    	c.id = #{userId} and 
    	a.status = '1' and
		a.product_type = 'JLJ'
  </select>
  
  <select id="countMyInvestCount" parameterType="java.util.Map" resultType="java.lang.Integer">
  	select count(*)
  	from
  		 bs_sub_account s, bs_account a
  	where
  		s.account_id = a.id and a.user_id = #{userId} and s.status != 1 and s.status != 6
  		and s.product_type in ('REG','AUTH_YUN','AUTH_ZSD','AUTH_7', 'AUTH_FREE')
  </select>

  <select id="countMyInvestBGWByUserId" parameterType="java.util.Map" resultType="java.lang.Integer">
    select count(*)
    from
    bs_sub_account s, bs_account a
    where
    s.account_id = a.id and a.user_id = #{userId} and s.status != 1 and s.status != 6
    and s.product_type in ('REG','AUTH_YUN','AUTH_ZSD','AUTH_7', 'AUTH_FREE')
  </select>
  
  <select id="selectInterestForProduct" parameterType="java.util.Date" resultMap="SubAc4InterestVOResultMap">
  	<![CDATA[
   	select 
   		a.id,
   		a.product_code,
   		a.product_id,
   		a.`code`,
   		a.account_id, 
   		a.open_balance+ IFNULL(f.open_balance,0) as balance,
   		a.product_rate, 
   		a.extra_rate,
   		a.status,
		b.account_code, 
		b.user_id, 
		c.total_interest, 
		c.nick, 
		c.mobile,
		a.accumulation_inerest,
		(a.open_balance+ IFNULL(f.open_balance,0))*(a.product_rate+a.extra_rate)*(TIMESTAMPDIFF(DAY,a.interest_begin_date, NOW())+1)/36500 as product_accu_interest,
 	    f.red_account_id,
		f.open_balance as red_balance
 	from
 		bs_sub_account a
 		LEFT JOIN
		(SELECT d.auth_account_id, d.red_account_id,e.open_balance FROM bs_sub_account_pair d, bs_sub_account e WHERE d.red_account_id=e.id) f
		ON f.auth_account_id = a.id ,
 		bs_account b,
 		bs_user c
	where 
		a.account_id=b.id and 
		b.user_id=c.id and 
		a.product_type in ('REG','AUTH_YUN','AUTH_ZSD','AUTH_7','AUTH_FREE') and
		(a.`status`=2 or a.`status`=3)  and 
		a.interest_begin_date<=#{interestDate} and
		a.last_finish_interest_date>#{interestDate} and
		(a.last_cal__interest_date is NULL or a.last_cal__interest_date<#{interestDate})
 	]]>
  </select>
  
  <resultMap type="com.pinting.business.model.vo.BsDailyInterestVO" id="DailyInterestVOResult">
  	<result property="userId" column="user_id"/>
  	<result property="interest" column="daily_interest"/>
  	<result property="totalInterest" column="total_interest"/>
  	<result property="currentInterest" column="current_interest"/>
  	<result property="nick" column="nick"/>
  	<result property="mobile" column="mobile"/>
  </resultMap>
  <select id="selectUserDailyInterest" parameterType="java.util.Date" resultMap="DailyInterestVOResult">
   	<![CDATA[
   	select 
   		SUM(ROUND((a.open_balance+ IFNULL(f.open_balance,0))*(a.product_rate+a.extra_rate)*(TIMESTAMPDIFF(DAY,a.interest_begin_date, NOW())+1)/36500,2)
   			- case when a.accumulation_inerest is NULL THEN 0.0 else a.accumulation_inerest end) as daily_interest , 
   		b.user_id,
   		c.total_interest,
   		c.current_interest,
   		c.nick, 
		c.mobile
 	from 
 		bs_sub_account a
 		LEFT JOIN
		(SELECT d.auth_account_id, d.red_account_id,e.open_balance FROM bs_sub_account_pair d, bs_sub_account e WHERE d.red_account_id=e.id) f
		ON f.auth_account_id = a.id ,
 		bs_account b, 
 		bs_user c
	where 
		a.account_id=b.id and 
		b.user_id=c.id and
		a.product_type in ('REG','AUTH_YUN','AUTH_ZSD','AUTH_7','AUTH_FREE') and
		(a.`status`=2 or a.`status`=3) and 
		a.interest_begin_date<=#{interestDate} and
		a.last_finish_interest_date>#{interestDate} and
		(a.last_cal__interest_date is NULL or a.last_cal__interest_date<#{interestDate})
		GROUP BY b.user_id 
 	]]>
  </select>
  
  <update id="updateBalancesByIncrement" parameterType="com.pinting.business.model.BsSubAccount" >
    update bs_sub_account
    <set >
      <if test="balance != null" >
        balance = balance+#{balance},
      </if>
      <if test="availableBalance != null" >
        available_balance = available_balance+#{availableBalance},
      </if>
      <if test="openBalance != null" >
        open_balance = #{openBalance},
      </if>
      <if test="canWithdraw != null" >
        can_withdraw = can_withdraw+#{canWithdraw},
      </if>
      <if test="freezeBalance != null" >
        freeze_balance = freeze_balance+#{freezeBalance},
      </if>
      <if test="lastTransDate != null" >
        last_trans_date = #{lastTransDate},
      </if>
      <if test="status != null" >
        status = #{status},
      </if>
    </set>
    where id=#{id}
  </update>
  
  <select id="countProductNumByProductCode" parameterType="com.pinting.business.model.BsSubAccount" resultType="java.lang.Integer" >
			select 
				count(DISTINCT account_id)
			from bs_sub_account  where status in (2,4,5) 
			<if test="productCode != null and productCode != '' " >
				and product_code = #{productCode}
			</if>
			
  </select>
  
  <select id="countProductNumDayByProductCode" parameterType="com.pinting.business.model.vo.BsSubAccountVO" resultType="java.lang.Integer" >
				select 
					count(DISTINCT account_id)
				from bs_sub_account  where status in (2)  and open_time between  #{startTime} and #{endTime}
				<if test="productCode != null and productCode != '' " >
					and product_code = #{productCode}
				</if> 
  </select>
  
   <select id="countProductAmountByProductCode" parameterType="com.pinting.business.model.BsSubAccount" resultType="java.lang.Double" >
		select 	
			case when productAmount is null  then  0 else productAmount   end
		from 
		(
			SELECT
				sum(balance) productAmount
			from bs_sub_account where status in (2,3,5) and product_code = #{productCode} 
		)p
  </select>
  
  <select id="countProductSurplusAmountByProductId" parameterType="com.pinting.business.model.vo.BsSubAccountVO" resultType="java.lang.Double" >
			SELECT
				p.max_invest_amount - sum(s.balance) surplusAmount
			from 
				bs_product p,
				bs_account a, 
				bs_sub_account s 
			where 
				p.id = s.product_id and 
				a.id = s.account_id and 
				a.user_id = #{userId} and 
				p.id= #{productId}

  </select>
  
  
  <select id="countProductDayByProductCode" parameterType="com.pinting.business.model.vo.BsSubAccountVO" resultType="java.lang.Double" >
		
		select 
			sum(s.balance) productDay
		from
			bs_sub_account s 
		where 
			s.status = 2 and 
			DATE_FORMAT(s.open_time,'%Y-%m-%d')=DATE_FORMAT(#{startTime},'%Y-%m-%d') and  s.product_code= #{productCode}
			and not exists 
			(select 1 from bs_transfer t where s.id = t.sub_account_id2 and DATE_FORMAT(t.deal_time,'%Y-%m-%d') = DATE_FORMAT(#{startTime},'%Y-%m-%d')) 
		
  </select>
  
  <select id="sumPeriodCaptial"  resultType="java.lang.Double">
  	select
  		 sum(balance)
	from
	(
		select 
			sum(t.balance)balance
		from 
			bs_sub_account t where t.status in (2,3) and   DATE_FORMAT(now(),'%Y-%m-%d') >= DATE_FORMAT(interest_begin_date,'%Y-%m-%d') 
		UNION
		select 
			 sum(s.balance)  balance
		from 
			bs_sub_account s 
			where s.STATUS = 5 and DATE_FORMAT(now(),'%Y-%m') = DATE_FORMAT(last_finish_interest_date,'%Y-%m')
	)p
  </select>
  
  <select id="selectCaptialAndInvestInvesting"  parameterType="com.pinting.business.model.vo.BsSubAccountVO" resultMap="VoResultMap">
  		select 
			balance ,product_rate productRate, DAY(now())-1 investDay
		from 
  			bs_sub_account 
		where 
			status in(2,3) and DATE_FORMAT(open_time,'%Y-%m') != DATE_FORMAT(now(),'%Y-%m')
			<if test="productCode != null and productCode != ''">
				and product_code  = #{productCode} 
			</if>
  		
  </select> 
  
   <select id="selectCaptialAndInvestInvesting2"  parameterType="com.pinting.business.model.vo.BsSubAccountVO" resultMap="VoResultMap">
  		select 
			balance ,product_rate productRate,  DATEDIFF(now(),open_time) investDay
		from 
  			bs_sub_account 
		where 
			 status in(2,3) and DATE_FORMAT(interest_begin_date,'%Y-%m') = DATE_FORMAT(now(),'%Y-%m')
			 <if test="productCode != null and productCode != ''">
				and product_code  = #{productCode} 
			</if>
  		
  </select> 
  
  <select id="selectCaptialAndInvestTransfered"  parameterType="com.pinting.business.model.vo.BsSubAccountVO" resultMap="VoResultMap">
  		select 
			s.balance ,s.product_rate productRate, day(t.deal_time) investDay
		from 
		  	bs_sub_account s, bs_transfer t
		where 
			s.status = 4 and s.id = t.sub_account_id1 
			and  DATE_FORMAT(t.deal_time,'%Y-%m') = DATE_FORMAT(now(),'%Y-%m')
			 <if test="productCode != null and productCode != ''">
				and s.product_code  = #{productCode} 
			</if>
  </select> 
  
  <select id="selectCaptialAndInvestSettled"  parameterType="com.pinting.business.model.vo.BsSubAccountVO" resultMap="VoResultMap">
  		select 
			s.balance ,s.product_rate productRate, day(s.last_finish_interest_date)-1 investDay
		from 
		  	bs_sub_account s
		where 
			s.status = 5 
			and  DATE_FORMAT(s.last_finish_interest_date,'%Y-%m') = DATE_FORMAT(now(),'%Y-%m')
			<if test="productCode != null and productCode != ''">
				and s.product_code  = #{productCode} 
			</if>
  </select> 
  
  
  <select id="countProductBuyNumByProductId"  parameterType="com.pinting.business.model.vo.BsSubAccountVO" resultType="java.lang.Integer">
  		select 
  			count(*) 
  		from 
  			bs_sub_account s, 
  			bs_account a 
  		where  
  			s.account_id = a.id and s.status in (2,3) and
  			s.product_id = #{productId} 
  			and 
  			a.user_id = #{userId}
  </select> 
  <select id="sumMarkingCosts" resultType="java.lang.Double">
  			select 
				sum(amount) cash
			FROM
			(
			
				select 
					sum(balance) ,
					case when p.term = 12 then SUM(s.balance) * 0.02 when p.term = -7 then SUM(s.balance) * 7 * 0.02 / 365 else SUM(s.balance) * p.term * 30 * 0.02 / 365 end amount
				from 
					bs_sub_account s,bs_product p where s.status in (2,5) and s.product_id  = p.id and DATE_FORMAT(s.interest_begin_date,"%Y-%m") = DATE_FORMAT(now(),"%Y-%m")  and  DATE_FORMAT(now(),'%Y-%m-%d') > DATE_FORMAT(open_time,'%Y-%m-%d') 
				and 
					not EXISTS 
					(
						select 
							1 
						from 
							bs_transfer t 
						where 
							s.id = t.sub_account_id2 and
							DATE_FORMAT(t.deal_time,'%Y-%m') = DATE_FORMAT(now(),"%Y-%m")
					)
				group by s.product_code
			)p
  </select>
  
  <select id="sumTodayMarketingCosts" resultType="java.lang.Double">
  			select 
				sum(amount) cash
			FROM
			(
				select 
					sum(balance) ,
					case when p.term = 12 then SUM(s.balance) * 0.02 when p.term = -7 then SUM(s.balance) * 7 * 0.02 / 365 else SUM(s.balance) * p.term * 30 * 0.02 / 365 end amount
				from 
					bs_sub_account s,bs_product p where s.status = '2' and s.product_id  = p.id and DATE_FORMAT(s.interest_begin_date,"%Y-%m-%d") = DATE_FORMAT(now(),"%Y-%m-%d")
				group by s.product_code
			)p
    </select>
    
  <select id="selectSubAccount" resultMap="BaseResultMap">
  	SELECT
		s.*
	FROM
		bs_account a,
		bs_sub_account s
	WHERE
		a.user_id = #{userId}
	AND a.id = s.account_id
	<if test="productType != null">
		AND s.product_type = #{productType}
	</if>
	<if test="status != null">
		AND s.status = #{status}
	</if>
  </select>
  <select id="selectAvailableBalanceByUserId" parameterType="java.lang.Integer" resultType="java.lang.Double">
  	SELECT SUM(a.available_balance) FROM bs_sub_account a, bs_account b
  	WHERE a.account_id = b.id AND b.user_id = #{userId} AND a.product_type = 'DEP_JSH'
  </select>
  
  	<resultMap id="BsSubAc4BatchBuyVOResultMap" type="com.pinting.business.model.vo.BsSubAc4BatchBuyVO" >
        <result column="sub_account_id" property="subAccountId" />
  		<result column="product_code" property="productCode" />
  		<result column="term" property="term" />
  		<result column="product_amount" property="productAmount" />
  		<result column="sys_return_rate" property="sysReturnRate" />
  		<result column="interest_begin_date" property="interestBeginDate" />
  		<result column="last_finish_interest_date" property="lastFinishInterestDate" />
        <result column="user_id" property="userId" />
  	</resultMap>
  	<select id="selectBsSubAc4BatchBuy" resultMap="BsSubAc4BatchBuyVOResultMap">
  		select
			SUM(a.balance) as product_amount, 
			a.product_code, 
			b.term,
			b.sys_return_rate,
			a.interest_begin_date,
			a.last_finish_interest_date
		from 
			bs_sub_account a, bs_product b ,bs_property_info i
		where 
			a.product_id=b.id and a.`status` =2 and a.product_type='REG' and 
			a.interest_begin_date = #{currentDay} and
			(a.check_status = 'SUCCESS' or a.check_status = 'FAIL_2_SUCCESS')
			AND b.property_id=i.id
			AND i.property_symbol=#{propertySymbol}
		GROUP BY a.product_code
  	</select>
    <select id="selectBsSubAcDetail4BatchBuy" resultMap="BsSubAc4BatchBuyVOResultMap">
      select
          a.id as sub_account_id,
          a.balance as product_amount,
          a.product_code,
          b.term,
          b.base_rate as sys_return_rate,
          a.interest_begin_date,
          a.last_finish_interest_date,
          c.user_id
      from
          bs_sub_account a, bs_product b ,bs_property_info i,bs_account c
      where
          a.product_id=b.id and a.`status` =2 and a.product_type='REG' and
          a.interest_begin_date = #{currentDay} and
          (a.check_status = 'SUCCESS' or a.check_status = 'FAIL_2_SUCCESS')
          AND a.account_id=c.id
          AND b.property_id=i.id
          AND i.property_symbol=#{propertySymbol}
          AND a.product_code=#{productCode}
    </select>
  	<select id="selectBsSubAc4BatchBuyDetail" resultMap="SubAc4InterestVOResultMap">
  		select
			a.balance, 
			a.product_rate, 
			a.id, 
			c.user_id
		from 
			bs_sub_account a, bs_account c, bs_user d
		where 
			a.account_id=c.id and c.user_id=d.id and a.product_code=#{productCode} and
			a.`status` =2 and a.interest_begin_date = #{interestBeginDate} and a.product_type='REG' and 
			(a.check_status = 'SUCCESS' or a.check_status='FAIL_2_SUCCESS')
  	</select>
  	<select id="selectBsSubAc4BatchBuyDetailSingle" resultMap="SubAc4InterestVOResultMap">
  		select
			a.balance, 
			a.product_rate, 
			a.id, 
			c.user_id
		from 
			bs_sub_account a, bs_account c, bs_user d
		where 
			a.account_id=c.id and c.user_id=d.id and
			a.`status` =2 and a.id=#{subAccountId} and a.product_type='REG' and 
			(a.check_status = 'SUCCESS' or a.check_status='FAIL_2_SUCCESS')
  	</select>
  	
  	<select id="selectSingleSubActByUserAndType" resultMap="BaseResultMap">
  		SELECT
			s.*
		FROM
			bs_account a,
			bs_sub_account s
		WHERE
			a.user_id = #{userId}
		AND a.id = s.account_id
		AND s.product_type = #{productType}
  	</select>
  	
  	<select id="selectSubAccountByIdForLock" resultMap="BaseResultMap">
  		SELECT
			s.*
		FROM
			bs_sub_account s
		WHERE
		 	s.id = #{subActId}
		FOR UPDATE
  	</select>
  	
  	<!-- 
   	   统计投资用户、投资金额、成交笔数、年化金额
   	 @author yanwl
   	 @date 2015-12-03
    -->
  	<select id="countSubAccount" parameterType="java.util.Map" resultType="java.util.Map" >
  		select 
  		  		(select count(*) from bs_sub_account s1 where (s1.product_type = 'REG' OR s1.product_type = 'AUTH'  OR s1.product_type = 'AUTH_YUN' OR s1.product_type = 'AUTH_ZSD' OR s1.product_type = 'AUTH_7' OR s1.product_type = 'AUTH_FREE') and s1.status in (2,5,7) <if test="subAccountIdList != null" >  and s1.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if>  and s1.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day)) as tDealCount,
  		(select count(*) from bs_sub_account s2 where (s2.product_type = 'REG' OR s2.product_type = 'AUTH'  OR s2.product_type = 'AUTH_YUN' OR s2.product_type = 'AUTH_ZSD' OR s2.product_type = 'AUTH_7' OR s2.product_type = 'AUTH_FREE') and s2.status in (2,5,7) <if test="subAccountIdList != null" >  and s2.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if>  and s2.interest_begin_date = DATE_ADD(DATE_FORMAT(#{yesterdayTime},'%Y-%m-%d'), INTERVAL 1 day)) as yDealCount,
  		(select count(*) from bs_sub_account s  where (s.product_type = 'REG' OR s.product_type = 'AUTH' OR s.product_type = 'AUTH_YUN' OR s.product_type = 'AUTH_ZSD' OR s.product_type = 'AUTH_7' OR s.product_type = 'AUTH_FREE') and s.status in (2,5,7) <if test="subAccountIdList != null" > and s.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> ) as totalDealCount,
  		(select IFNULL(SUM(s3.open_balance),0) from bs_sub_account s3 where (s3.product_type = 'REG' OR s3.product_type = 'AUTH' OR s3.product_type = 'AUTH_YUN' OR s3.product_type = 'RED' OR s3.product_type = 'AUTH_ZSD' OR s3.product_type = 'RED_ZSD' OR s3.product_type = 'AUTH_7' OR s3.product_type = 'RED_7' OR s3.product_type = 'AUTH_FREE' OR s3.product_type = 'RED_FREE') and s3.status in (2,5,7) <if test="subAccountIdList != null" >  and s3.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if>   and s3.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day)) as tInvestAmount,
  		(select IFNULL(SUM(s4.open_balance),0) from bs_sub_account s4 where (s4.product_type = 'REG' OR s4.product_type = 'AUTH' OR s4.product_type = 'AUTH_YUN' OR s4.product_type = 'RED' OR s4.product_type = 'AUTH_ZSD' OR s4.product_type = 'RED_ZSD' OR s4.product_type = 'AUTH_7' OR s4.product_type = 'RED_7' OR s4.product_type = 'AUTH_FREE' OR s4.product_type = 'RED_FREE') and s4.status in (2,5,7) <if test="subAccountIdList != null" >  and s4.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if>   and s4.interest_begin_date = DATE_ADD(DATE_FORMAT(#{yesterdayTime},'%Y-%m-%d'), INTERVAL 1 day)) as yInvestAmount,
  		
  		<!-- 删除老云贷和老7贷数据 -->
		<!-- 云贷存管 -->	
		(select IFNULL(sum(sb0.balance),0) from bs_sub_account sb0,bs_product p0,bs_property_info pi0 where sb0.product_type in ('AUTH_YUN', 'RED') and sb0.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb0.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb0.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb0.product_id = p0.id and p0.term = -7
  			and pi0.id = p0.property_id and pi0.property_symbol = 'YUN_DAI_SELF'
  		) as t7DayAuthAmount,
  		(select IFNULL(sum(sb1.balance),0) from bs_sub_account sb1,bs_product p1,bs_property_info pi1 where sb1.product_type in ('AUTH_YUN', 'RED') and sb1.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb1.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb1.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb1.product_id = p1.id and p1.term = 1
  			and pi1.id = p1.property_id and pi1.property_symbol = 'YUN_DAI_SELF'
  		) as t1MonthAuthAmount,
  		(select IFNULL(sum(sb2.balance),0) from bs_sub_account sb2,bs_product p2,bs_property_info pi2 where sb2.product_type in ('AUTH_YUN', 'RED') and sb2.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb2.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb2.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb2.product_id = p2.id and p2.term = 3
  			and pi2.id = p2.property_id and pi2.property_symbol = 'YUN_DAI_SELF'
  		) as t3MonthAuthAmount,
  		(select IFNULL(sum(sb3.balance),0) from bs_sub_account sb3,bs_product p3,bs_property_info pi3 where sb3.product_type in ('AUTH_YUN', 'RED') and sb3.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb3.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb3.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb3.product_id = p3.id and p3.term = 6
  			and pi3.id = p3.property_id and pi3.property_symbol = 'YUN_DAI_SELF'
  		) as t6MonthAuthAmount,
  		(select IFNULL(sum(sb4.balance),0) from bs_sub_account sb4,bs_product p4,bs_property_info pi4 where sb4.product_type in ('AUTH_YUN', 'RED') and sb4.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb4.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb4.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb4.product_id = p4.id and p4.term = 12
  			and pi4.id = p4.property_id and pi4.property_symbol = 'YUN_DAI_SELF'
  		) as t1YearAuthAmount,
  		
  		<!-- 七贷存管 -->
  		(select IFNULL(sum(sb22.balance),0) from bs_sub_account sb22,bs_product p22,bs_property_info pi22 where sb22.product_type in ('AUTH_7', 'RED_7') and sb22.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb22.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb22.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb22.product_id = p22.id and p22.term = -7
  			and pi22.id = p22.property_id and pi22.property_symbol = '7_DAI_SELF'
  		) as t7DayAuthAmount7dai,
  		(select IFNULL(sum(sb9.balance),0) from bs_sub_account sb9,bs_product p9,bs_property_info pi9 where sb9.product_type in ('AUTH_7', 'RED_7') and sb9.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb9.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb9.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb9.product_id = p9.id and p9.term = 1
  			and pi9.id = p9.property_id and pi9.property_symbol = '7_DAI_SELF'
  		) as t1MonthAuthAmount7dai,
  		(select IFNULL(sum(sb10.balance),0) from bs_sub_account sb10,bs_product p10,bs_property_info pi10 where sb10.product_type in ('AUTH_7', 'RED_7') and sb10.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb10.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb10.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb10.product_id = p10.id and p10.term = 3
  			and pi10.id = p10.property_id and pi10.property_symbol = '7_DAI_SELF'
  		) as t3MonthAuthAmount7dai,
  		(select IFNULL(sum(sb11.balance),0) from bs_sub_account sb11,bs_product p11,bs_property_info pi11 where sb11.product_type in ('AUTH_7', 'RED_7') and sb11.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb11.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb11.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb11.product_id = p11.id and p11.term = 6
  			and pi11.id = p11.property_id and pi11.property_symbol = '7_DAI_SELF'
  		) as t6MonthAuthAmount7dai,
  		(select IFNULL(sum(sb12.balance),0) from bs_sub_account sb12,bs_product p12,bs_property_info pi12 where sb12.product_type in ('AUTH_7', 'RED_7') and sb12.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb12.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb12.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb12.product_id = p12.id and p12.term = 12
  			and pi12.id = p12.property_id and pi12.property_symbol = '7_DAI_SELF'
  		) as t1YearAuthAmount7dai,
  		
        <!-- 删除赞分期和赞时贷数据 -->
        <!-- 新增自由产品计划 -->
		(select IFNULL(sum(sb22.balance),0) from bs_sub_account sb22,bs_product p22,bs_property_info pi22 where sb22.product_type in ('AUTH_FREE', 'RED_FREE') and sb22.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb22.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb22.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb22.product_id = p22.id and p22.term = -7
  			and pi22.id = p22.property_id and pi22.property_symbol = 'FREE'
  		) as t7DayAuthAmount4Free,
  		(select IFNULL(sum(sb9.balance),0) from bs_sub_account sb9,bs_product p9,bs_property_info pi9 where sb9.product_type in ('AUTH_FREE', 'RED_FREE') and sb9.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb9.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb9.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb9.product_id = p9.id and p9.term = 1
  			and pi9.id = p9.property_id and pi9.property_symbol = 'FREE'
  		) as t1MonthAuthAmount4Free,
  		(select IFNULL(sum(sb10.balance),0) from bs_sub_account sb10,bs_product p10,bs_property_info pi10 where sb10.product_type in ('AUTH_FREE', 'RED_FREE') and sb10.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb10.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb10.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb10.product_id = p10.id and p10.term = 3
  			and pi10.id = p10.property_id and pi10.property_symbol = 'FREE'
  		) as t3MonthAuthAmount4Free,
  		(select IFNULL(sum(sb11.balance),0) from bs_sub_account sb11,bs_product p11,bs_property_info pi11 where sb11.product_type in ('AUTH_FREE', 'RED_FREE') and sb11.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb11.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb11.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb11.product_id = p11.id and p11.term = 6
  			and pi11.id = p11.property_id and pi11.property_symbol = 'FREE'
  		) as t6MonthAuthAmount4Free,
  		(select IFNULL(sum(sb12.balance),0) from bs_sub_account sb12,bs_product p12,bs_property_info pi12 where sb12.product_type in ('AUTH_FREE', 'RED_FREE') and sb12.status in (2,5,7) 
  			<if test="subAccountIdList != null" > and sb12.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
  			and sb12.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) and sb12.product_id = p12.id and p12.term = 12
  			and pi12.id = p12.property_id and pi12.property_symbol = 'FREE'
  		) as t1YearAuthAmount4Free,
  		
  		IFNULL(SUM(s.open_balance),0)  as totalInvestAmount,
  		( select count(*) from ( select s5.account_id from bs_sub_account s5 where (s5.product_type = 'REG' OR s5.product_type = 'AUTH' OR s5.product_type = 'AUTH_YUN' OR s5.product_type = 'AUTH_ZSD' OR s5.product_type = 'AUTH_7' OR s5.product_type = 'AUTH_FREE') <if test="subAccountIdList != null" > and s5.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if>   and s5.status in (2,5,7) and s5.interest_begin_date = DATE_ADD(DATE_FORMAT(#{todayTime},'%Y-%m-%d'), INTERVAL 1 day) group by s5.account_id ) a) as tInvestUserCount,
  		( select count(*) from ( select s6.account_id from bs_sub_account s6 where (s6.product_type = 'REG' OR s6.product_type = 'AUTH' OR s6.product_type = 'AUTH_YUN' OR s6.product_type = 'AUTH_ZSD' OR s6.product_type = 'AUTH_7' OR s6.product_type = 'AUTH_FREE') <if test="subAccountIdList != null" > and s6.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if>   and s6.status in (2,5,7) and s6.interest_begin_date = DATE_ADD(DATE_FORMAT(#{yesterdayTime},'%Y-%m-%d'), INTERVAL 1 day) group by s6.account_id ) b) as yInvestUserCount,
  		( select count(*) from ( select s7.account_id from bs_sub_account s7 where (s7.product_type = 'REG' OR s7.product_type = 'AUTH' OR s7.product_type = 'AUTH_YUN' OR s7.product_type = 'AUTH_ZSD' OR s7.product_type = 'AUTH_7' OR s7.product_type = 'AUTH_FREE') <if test="subAccountIdList != null" > and s7.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if>   and s7.status in (2,5,7) group by s7.account_id ) c) as totalInvestUserCount
  		from bs_sub_account s ,bs_product p
  		where (s.product_type = 'REG' OR s.product_type = 'AUTH' OR s.product_type = 'AUTH_YUN' OR s.product_type = 'RED' OR s.product_type = 'AUTH_ZSD' OR s.product_type = 'RED_ZSD' OR s.product_type = 'AUTH_7' OR s.product_type = 'RED_7' OR s.product_type = 'AUTH_FREE' OR s.product_type = 'RED_FREE') and s.status in (2,5,7) <if test="subAccountIdList != null" > and s.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if>  and s.product_id = p.id
  	</select>
  	
  	<!-- 
   	   公众号统计投资用户、投资金额、成交笔数
   	 @author zhangpeng
   	 @date 2018-06-27
    -->
  	<select id="countSubAccountByTime" parameterType="java.util.Map" resultType="java.util.Map" >
  		select 
  			( select count(*) from 
  				( select s5.account_id from bs_sub_account s5
  					 where s5.product_type IN ('REG','AUTH','AUTH_YUN','AUTH_ZSD','AUTH_7','AUTH_FREE')
  					 <if test="subAccountIdList != null" > 
  					 	and s5.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  
  					 </if>   and s5.status in (2,5,7) and s5.interest_begin_date = DATE_ADD(DATE_FORMAT(#{time},'%Y-%m-%d'), INTERVAL 1 day) 
  					 group by s5.account_id 
  				) a
  			) as investUserCount,
  			(select IFNULL(SUM(s3.open_balance),0) from bs_sub_account s3 
  				where s3.product_type IN('REG','AUTH','AUTH_YUN','RED','AUTH_ZSD','RED_ZSD','AUTH_7','RED_7','AUTH_FREE','RED_FREE')
  				 and s3.status in (2,5,7) 
  				 <if test="subAccountIdList != null" >  
  				 	and s3.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  
  				 </if>   and s3.interest_begin_date = DATE_ADD(DATE_FORMAT(#{time},'%Y-%m-%d'), INTERVAL 1 day)
  			) as investAmount,
  		  	(select count(*) from bs_sub_account s1 
  		  		where s1.product_type IN ('REG','AUTH','AUTH_YUN','AUTH_ZSD', 'AUTH_7','AUTH_FREE') 
  		  		and s1.status in (2,5,7) 
  		  		<if test="subAccountIdList != null" >  
  		  			and s1.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  
  		  		</if>  and s1.interest_begin_date = DATE_ADD(DATE_FORMAT(#{time},'%Y-%m-%d'), INTERVAL 1 day)
  		  	) as dealCount
  	</select>
  	
  	<!-- 
   	   公众号统计产品购买查询
   	 @author zhangpeng
   	 @date 2018-06-27
    -->
  	<select id="countSubAccountByPartner" parameterType="java.util.Map" resultType="java.util.Map" >
  		select 
  			(select IFNULL(sum(sb1.balance),0) from bs_sub_account sb1,bs_product p1,bs_property_info pi1 
  			where 
  			<if test="partner == 'AUTH_YUN'">
  				sb1.product_type in ('AUTH_YUN', 'RED') 
  			</if>
  			<if test="partner == 'AUTH_7'">
  				sb1.product_type in ('AUTH_7', 'RED_7')
  			</if>
  			<if test="partner == 'AUTH_FREE'">
  				sb1.product_type in ('AUTH_FREE', 'RED_FREE')
  			</if>
  			and sb1.status in (2,5,7) 
	 			<if test="subAccountIdList != null" > and sb1.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
	 			and sb1.interest_begin_date = DATE_ADD(DATE_FORMAT(Now(),'%Y-%m-%d'), INTERVAL 1 day) and sb1.product_id = p1.id and p1.term = 1
	 			and pi1.id = p1.property_id 
	 			<if test="partner == 'AUTH_YUN'">
  					and pi1.property_symbol = 'YUN_DAI_SELF'
	  			</if>
	  			<if test="partner == 'AUTH_7'">
	  				and pi1.property_symbol = '7_DAI_SELF'
	  			</if>
	  			<if test="partner == 'AUTH_FREE'">
	  				and pi1.property_symbol = 'FREE'
	  			</if>
	 		) as t1MonthAmount,
	 		(select IFNULL(sum(sb2.balance),0) from bs_sub_account sb2,bs_product p2,bs_property_info pi2 
	 		where 
	 			<if test="partner == 'AUTH_YUN'">
  					sb2.product_type in ('AUTH_YUN', 'RED') 
	  			</if>
	  			<if test="partner == 'AUTH_7'">
	  				sb2.product_type in ('AUTH_7', 'RED_7') 
	  			</if>
	  			<if test="partner == 'AUTH_FREE'">
	  				sb2.product_type in ('AUTH_FREE', 'RED_FREE') 
	  			</if>
	 		and sb2.status in (2,5,7) 
	 			<if test="subAccountIdList != null" > and sb2.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
	 			and sb2.interest_begin_date = DATE_ADD(DATE_FORMAT(Now(),'%Y-%m-%d'), INTERVAL 1 day) and sb2.product_id = p2.id and p2.term = 3
	 			and pi2.id = p2.property_id
	 			<if test="partner == 'AUTH_YUN'">
  					and pi2.property_symbol = 'YUN_DAI_SELF'
	  			</if>
	  			<if test="partner == 'AUTH_7'">
	  				and pi2.property_symbol = '7_DAI_SELF'
	  			</if>
	  			<if test="partner == 'AUTH_FREE'">
	  				and pi2.property_symbol = 'FREE'
	  			</if>
	 		) as t3MonthAmount,
	 		(select IFNULL(sum(sb3.balance),0) from bs_sub_account sb3,bs_product p3,bs_property_info pi3 
	 		where 
	 			<if test="partner == 'AUTH_YUN'">
  					sb3.product_type in ('AUTH_YUN', 'RED') 
	  			</if>
	  			<if test="partner == 'AUTH_7'">
	  				sb3.product_type in ('AUTH_7', 'RED_7') 
	  			</if> 
	  			<if test="partner == 'AUTH_FREE'">
	  				sb3.product_type in ('AUTH_FREE', 'RED_FREE') 
	  			</if> 
	 		and sb3.status in (2,5,7) 
	 			<if test="subAccountIdList != null" > and sb3.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
	 			and sb3.interest_begin_date = DATE_ADD(DATE_FORMAT(Now(),'%Y-%m-%d'), INTERVAL 1 day) and sb3.product_id = p3.id and p3.term = 6
	 			and pi3.id = p3.property_id
	 			<if test="partner == 'AUTH_YUN'">
  					and pi3.property_symbol = 'YUN_DAI_SELF'
	  			</if>
	  			<if test="partner == 'AUTH_7'">
	  				and pi3.property_symbol = '7_DAI_SELF'
	  			</if>
	  			<if test="partner == 'AUTH_FREE'">
	  				and pi3.property_symbol = 'FREE'
	  			</if>
	 		) as t6MonthAmount,
	 		(select IFNULL(sum(sb4.balance),0) from bs_sub_account sb4,bs_product p4,bs_property_info pi4 
	 		where 
	 			<if test="partner == 'AUTH_YUN'">
  					sb4.product_type in ('AUTH_YUN', 'RED') 
	  			</if>
	  			<if test="partner == 'AUTH_7'">
	  				sb4.product_type in ('AUTH_7', 'RED_7') 
	  			</if> 
	  			<if test="partner == 'AUTH_FREE'">
	  				sb4.product_type in ('AUTH_FREE', 'RED_FREE') 
	  			</if> 
	 		and sb4.status in (2,5,7) 
	 			<if test="subAccountIdList != null" > and sb4.id not in <foreach item="item" index="index" collection="subAccountIdList" open="(" separator="," close=")"> #{item}</foreach>  </if> 
	 			and sb4.interest_begin_date = DATE_ADD(DATE_FORMAT(Now(),'%Y-%m-%d'), INTERVAL 1 day) and sb4.product_id = p4.id and p4.term = 12
	 			and pi4.id = p4.property_id 
	 			<if test="partner == 'AUTH_YUN'">
  					and pi4.property_symbol = 'YUN_DAI_SELF'
	  			</if>
	  			<if test="partner == 'AUTH_7'">
	  				and pi4.property_symbol = '7_DAI_SELF'
	  			</if>
	  			<if test="partner == 'AUTH_FREE'">
	  				and pi4.property_symbol = 'FREE'
	  			</if>
	 		) as t1YearAmount
  	</select>
  	
  	<!-- 
   	   统计奖励金户余额
   	 @author yanwl
   	 @date 2015-12-07
    -->
  	<select id="countBonusAccBalance" resultType="java.lang.Double" >
  		select 
  		IFNULL(sum(s.balance),0) as bonusAccBalance
  		from bs_sub_account s 
  		where s.product_type = 'JLJ'
  	</select>
  	
  	<select id="countRedAccBalance" resultType="java.lang.Double" parameterType="Map">
  		select 
  		IFNULL(round(sum(s.balance),2), 0) as redAccBalance
  		from bs_sub_account s 
  		where s.product_type = 'RED' and s.status='2'
  	</select>
  	
  	<select id="countRed7AccBalance" resultType="java.lang.Double" parameterType="Map">
  		select 
  		IFNULL(round(sum(s.balance),2), 0) as red7AccBalance
  		from bs_sub_account s 
  		where s.product_type = 'RED_7' and s.status='2'
  	</select>
  	
  	<select id="countRedAccFreezeBalance" resultType="java.lang.Double" >
  		select 
  		IFNULL(round(sum(s.freeze_balance),2), 0) as redAccBalance
  		from bs_sub_account s 
  		where s.product_type = 'RED' and s.status='2'
  	</select>
  	
  	<select id="countRedAccBalanceByType" resultType="java.lang.Double" parameterType="Map">
  		select 
  		IFNULL(round(sum(s.available_balance),2), 0) as redAccBalance
  		from bs_sub_account s 
  		where s.status='2' and  s.product_type = #{productType}
  	</select>
  	
  	<select id="countRedAccFreezeBalanceByType" resultType="java.lang.Double" >
  		select 
  		IFNULL(round(sum(s.freeze_balance),2), 0) as redAccBalance
  		from bs_sub_account s 
  		where s.status='2' and  s.product_type = #{productType}
  	</select>
  	
  	<!-- 3、日终跑批：新增用户（没有投资过的） 当日投资笔数。当天存在投资，且之前没有投资过的数量，按渠道分组 -->
  	<select id="countCurrentNewInvestNumber" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT COUNT(*) AS count, e.agent_id, DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time 
		FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.interest_begin_date) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 = (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6) 
			AND DATE(c.interest_begin_date) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.interest_begin_date) = DATE(#{startTime})
		GROUP BY e.agent_id
  	</select>
  	
  	<!-- 4、日终跑批：新增用户（没有投资过的） 当日投资金额。当天存在投资，且之前没有投资过的金额，按渠道分组 -->
  	<select id="sumCurrentNewInvestBalance" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT SUM(a.balance) AS amount, e.agent_id, DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time 
			,SUM(
				CASE p.term WHEN -7 THEN a.balance/365*7
				WHEN 1 THEN a.balance/365*30
				WHEN 3 THEN a.balance/365*90
				WHEN 6 THEN a.balance/365*180
				WHEN 12 THEN a.balance
				END
			) AS year_invest_amount
		FROM bs_sub_account a, bs_account d, bs_user e, bs_product p WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.interest_begin_date) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 = (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6)
			AND DATE(c.interest_begin_date) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.interest_begin_date) = DATE(#{startTime})
		AND a.product_id = p.id 
		GROUP BY e.agent_id
  	</select>
  	
  	<!-- 5、日终跑批：老用户（当日之前又投资过）当日投资笔数：当日存在投资 且 之前有过投资的 用户 的今日投资笔数 -->
  	<select id="countCurrentOldInvestTimes" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT COUNT(*) AS count, e.agent_id, DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time 
		FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.interest_begin_date) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 &lt; (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6)
			AND DATE(c.interest_begin_date) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.interest_begin_date) = DATE(#{startTime})
		GROUP BY e.agent_id
  	</select>
  	
  	<!-- 6、日终跑批：老用户（当日之前又投资过）当日投资金额 -->
  	<select id="sumCurrentOldInvestBalance" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT SUM(a.balance) AS amount, e.agent_id, DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time 
		FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.interest_begin_date) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 &lt; (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6)
			AND DATE(c.interest_begin_date) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.interest_begin_date) = DATE(#{startTime})
		GROUP BY e.agent_id
  	</select>
  	
  	<!-- 7、日终跑批：当日全部投资笔数   -->
  	<select id="currentTotalInvestTimes" parameterType="java.util.Map" resultType="java.util.Map" >
  		SELECT COUNT(*) AS count,c.agent_id, DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time 
  		FROM bs_sub_account a, bs_account b, bs_user c 
  		WHERE a.account_id = b.id AND b.user_id = c.id
		AND a.product_type = 'REG' AND a.interest_begin_date BETWEEN #{startTime} AND #{endTime}
		AND a.status NOT IN (1,6)
		GROUP BY c.agent_id
  	</select>
  	
  	<!-- 8、日终跑批：当日全部投资金额按照 所有 bs_sub_acount product_type == REG 的balance 累加 -->
  	<select id="sumCurrentTotalInvestBalance" parameterType="java.util.Map" resultType="java.util.Map" >
  		SELECT SUM(a.balance) AS amount, c.agent_id, DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time 
	  		,SUM(
				CASE d.term WHEN -7 THEN a.balance/365*7
				WHEN 1 THEN a.balance/365*30
				WHEN 3 THEN a.balance/365*90
				WHEN 6 THEN a.balance/365*180
				WHEN 12 THEN a.balance
				END
			) AS year_invest_amount
  		FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
		WHERE a.product_type = 'REG' AND a.account_id = b.id AND b.user_id = c.id AND a.status NOT IN (1,6)
		AND DATE(a.interest_begin_date) = DATE(#{startTime})
		AND a.product_id = d.id 
		GROUP BY c.agent_id
  	</select>
  	
  	<!-- 14、日终跑批：新增投资用户数 -->
  	<select id="countNewInvestUser" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT COUNT(a.id) AS count, a.agent_id, b.open_time FROM bs_user a, (
			SELECT c.user_id, DATE_SUB(DATE(b.interest_begin_date),INTERVAL 1 DAY) AS open_time 
			FROM bs_sub_account b, bs_account c WHERE b.account_id = c.id 
			AND b.product_type = 'REG' AND b.status NOT IN (1,6)
			AND DATE(b.interest_begin_date) = DATE(#{endTime})
			GROUP BY c.user_id
		) AS b WHERE a.id = b.user_id 
		AND 0 = (
			SELECT COUNT(c.id) FROM bs_sub_account c, bs_account d
			WHERE c.account_id = d.id AND d.user_id = a.id 
			AND c.product_type = 'REG' AND c.status NOT IN (1,6)
			AND DATE(c.interest_begin_date) &lt; DATE(#{endTime})
		)
		GROUP BY a.agent_id
  	</select>
  	<!-- 15、日终跑批：投资用户数 -->
  	<select id="countInvestUser" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT COUNT(a.id) AS count, a.agent_id, b.open_time FROM bs_user a, (
			SELECT c.user_id, DATE_SUB(DATE(b.interest_begin_date),INTERVAL 1 DAY) AS open_time 
			FROM bs_sub_account b, bs_account c WHERE b.account_id = c.id 
			AND b.product_type = 'REG' AND b.status NOT IN (1,6)
			AND DATE(b.interest_begin_date) = DATE(#{endTime})
			GROUP BY c.user_id
		) AS b WHERE a.id = b.user_id
		GROUP BY a.agent_id
  	</select>
  	
  	
  	<!-- 累计投资人数 -->
  	<select id="countTotalInvestNumber" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT aa.open_time, aa.agent_id, sum(aa1.total_invest_user) count
		FROM (
			SELECT DATE(c1.open_time) open_time,c1.agent_id, COUNT(*) AS total_invest_user 
			FROM (
				SELECT DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time,c.agent_id 
				FROM bs_sub_account a, bs_account b, bs_user c
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
				GROUP BY a.account_id
			) c1
			GROUP BY DATE(c1.open_time), c1.agent_id
		) aa, (
			SELECT DATE(c1.open_time) open_time,c1.agent_id, COUNT(*) AS total_invest_user 
			FROM (
				SELECT DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time,c.agent_id 
				FROM bs_sub_account a, bs_account b, bs_user c
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
				GROUP BY a.account_id
			) c1
			GROUP BY DATE(c1.open_time), c1.agent_id
		) aa1
		WHERE ((
			aa.agent_id = aa1.agent_id AND DATE(aa.open_time) >= DATE(aa1.open_time)
		) OR (
			aa.agent_id IS NULL AND aa1.agent_id IS NULL AND DATE(aa.open_time) >= DATE(aa1.open_time)
		))
		<if test="startTime != null">
			AND DATE(aa.open_time) = DATE(#{startTime})
		</if>
		GROUP BY aa.open_time, aa.agent_id
  	</select>
  	
  	<!-- 参与复投人数 -->
  	<select id="countTotalRepeatNumber" parameterType="java.util.Map" resultType="java.util.Map" >
	  	SELECT COUNT(*) count, aa.agent_id FROM (
			SELECT a.account_id, c.agent_id FROM bs_sub_account a, bs_account b, bs_user c
			WHERE a.product_type = 'REG' AND b.id = a.account_id AND a.status NOT IN (1,6) AND c.id = b.user_id
			<if test="startTime != null">
				AND DATE(a.interest_begin_date) &lt;= DATE(#{startTime})
			</if>
			GROUP BY a.account_id HAVING COUNT(a.account_id) >= 2
		) AS aa
		GROUP BY aa.agent_id
  	</select>
  	
  	<!-- 累计投资金额 -->
  	<select id="sumTotalBalance" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT bb.open_time, bb.agent_id,bb.total_invest_amount, sum(bb1.total_invest_amount) AS count
		FROM (
			SELECT DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time, c.agent_id, 
				SUM(a.balance) AS total_invest_amount
			FROM bs_sub_account a, bs_account b, bs_user c
			WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
			GROUP BY DATE(a.interest_begin_date), c.agent_id
		) bb, (
			SELECT DATE_SUB(DATE(a.interest_begin_date),INTERVAL 1 DAY) AS open_time, c.agent_id, 
				SUM(a.balance) AS total_invest_amount
			FROM bs_sub_account a, bs_account b, bs_user c
			WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
			GROUP BY DATE(a.interest_begin_date), c.agent_id
		) bb1
		WHERE ((
			bb.agent_id = bb1.agent_id AND DATE(bb.open_time) >= DATE(bb1.open_time)
		) OR (
			bb.agent_id IS NULL AND bb1.agent_id is null AND DATE(bb.open_time) >= DATE(bb1.open_time)
		))
		<if test="startTime != null">
			AND DATE(bb.open_time) = DATE(#{startTime})
		</if>
		GROUP BY bb.open_time, bb.agent_id 
  	</select>
  	
  	<!-- 按时对比：新用户购买金额 -->
  	<select id="selectDailyNewUserInvestAmount" parameterType="java.util.Map" resultMap="BaseResultMap" >
  		SELECT a.open_time, a.balance 
		,CASE b.term WHEN -7 THEN a.balance/365*7
		WHEN 1 THEN a.balance/365*30
		WHEN 3 THEN a.balance/365*90
		WHEN 6 THEN a.balance/365*180
		WHEN 12 THEN a.balance
		END AS freeze_balance
  		FROM bs_sub_account a, bs_account d, bs_user e, bs_product b WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.open_time) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 = (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6)
			AND DATE(c.open_time) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND a.product_id = b.id
		AND DATE(a.open_time) = DATE(#{startTime})
  		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and e.agent_id in 
			<foreach collection="agentIds" item="agentId" index="index"
	            open="(" close=")" separator=",">
	            #{agentId}
	        </foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and e.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (e.agent_id in 
			<foreach collection="agentIds" item="agentId" index="index"
	            open="(" close=")" separator=",">
	            #{agentId}
	        </foreach>
	        or e.agent_id is null)
		</if>
  	</select>
  	
  	<!-- 按时对比：年化投资金额 -->
  	<select id="selectInvestAnnual" parameterType="java.util.Map" resultMap="BaseResultMap" >
  		SELECT a.open_time 
  		,CASE b.term WHEN -7 THEN a.balance/365*7
		WHEN 1 THEN a.balance/365*30
		WHEN 3 THEN a.balance/365*90
		WHEN 6 THEN a.balance/365*180
		WHEN 12 THEN a.balance
		END AS balance
  		FROM bs_sub_account a, bs_account d, bs_user e, bs_product b WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.open_time) = DATE(#{startTime}) AND a.account_id = b.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND a.product_id = b.id
		AND DATE(a.open_time) = DATE(#{startTime})
  		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and e.agent_id in 
			<foreach collection="agentIds" item="agentId" index="index"
	            open="(" close=")" separator=",">
	            #{agentId}
	        </foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and e.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (e.agent_id in 
			<foreach collection="agentIds" item="agentId" index="index"
	            open="(" close=")" separator=",">
	            #{agentId}
	        </foreach>
	        or e.agent_id is null)
		</if>
  	</select>
  	
  	<select id="selectDailyOldUserInvestAmount" parameterType="java.util.Map" resultMap="BaseResultMap" >
  		SELECT * FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.open_time) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 &lt; (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6)
			AND DATE(c.open_time) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.open_time) = DATE(#{startTime})
  		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
			and e.agent_id in 
			<foreach collection="agentIds" item="agentId" index="index"
	            open="(" close=")" separator=",">
	            #{agentId}
	        </foreach>
		</if>
		<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
			and e.agent_id is null
		</if>
		<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
			and (e.agent_id in 
			<foreach collection="agentIds" item="agentId" index="index"
	            open="(" close=")" separator=",">
	            #{agentId}
	        </foreach>
	        or e.agent_id is null)
		</if>
  	</select>
  	
  	<!-- 按时对比：当日新增投资用户数 -->
  	<select id="selectDailyNewInvestUser" parameterType="java.util.Map" resultMap="BaseResultMap" >
  		SELECT aaa.open_time FROM (
			SELECT a.open_time, e.id FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
				SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
					AND DATE(b.open_time) = DATE(#{startTime}) AND a.account_id = b.account_id
			) AND 0 = (
				SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6)
				AND DATE(c.open_time) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
			)
			AND a.product_type = 'REG' AND a.status NOT IN (1,6)
			AND a.account_id = d.id AND d.user_id = e.id
			AND DATE(a.open_time) = DATE(#{startTime})
			<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
				and e.agent_id in 
				<foreach collection="agentIds" item="agentId" index="index"
		            open="(" close=")" separator=",">
		            #{agentId}
		        </foreach>
			</if>
			<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
				and e.agent_id is null
			</if>
			<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
				and (e.agent_id in 
				<foreach collection="agentIds" item="agentId" index="index"
		            open="(" close=")" separator=",">
		            #{agentId}
		        </foreach>
		        or e.agent_id is null)
			</if>
			ORDER BY a.open_time ASC
		) AS aaa
		GROUP BY aaa.id
  	</select>
  	
  	<!-- 按时对比：当日投资用户数 -->
  	<select id="selectDailyInvestUser" parameterType="java.util.Map" resultMap="BaseResultMap" >
	  	SELECT aaa.open_time FROM (
			SELECT a.open_time, e.id FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
				SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
					AND DATE(b.open_time) = DATE(#{startTime}) AND a.account_id = b.account_id
			)
			AND a.product_type = 'REG' AND a.status NOT IN (1,6)
			AND a.account_id = d.id AND d.user_id = e.id
			AND DATE(a.open_time) = DATE(#{startTime})
	  		<if test="agentIds != null and agentIds !='' and (nonAgentId == null or nonAgentId == '')">
				and e.agent_id in 
				<foreach collection="agentIds" item="agentId" index="index"
		            open="(" close=")" separator=",">
		            #{agentId}
		        </foreach>
			</if>
			<if test="(agentIds == null or agentIds =='' ) and nonAgentId != null and nonAgentId != ''">
				and e.agent_id is null
			</if>
			<if test="agentIds != null and agentIds !='' and nonAgentId != null and nonAgentId != ''">
				and (e.agent_id in 
				<foreach collection="agentIds" item="agentId" index="index"
		            open="(" close=")" separator=",">
		            #{agentId}
		        </foreach>
		        or e.agent_id is null)
			</if>
		) AS aaa
		GROUP BY aaa.id
  	</select>
  	
  	<!-- 累计投资人数 -->
  	<select id="countTotalInvestUser" parameterType="java.util.Map" resultType="java.lang.Integer" >
  		SELECT COUNT(DISTINCT a.account_id) FROM bs_sub_account a WHERE a.product_type = 'REG' AND a.status NOT IN (1,6)
  	</select>
  	
  	<!-- 参与复投人数 -->
  	<select id="countTotalReInvestUser" parameterType="java.util.Map" resultType="java.lang.Integer" >
		SELECT COUNT(*) FROM (
			SELECT a.account_id AS invest_times FROM bs_sub_account a, bs_account b 
			WHERE a.product_type = 'REG' AND b.id = a.account_id AND a.status NOT IN (1,6)
			GROUP BY a.account_id HAVING COUNT(a.account_id) >= 2
		) AS a
  	</select>
  	
  	<!-- 累计投资金额 -->
  	<select id="sumTotalInvestAmount" parameterType="java.util.Map" resultType="java.lang.Double" >
  		SELECT SUM(a.balance) FROM bs_sub_account a WHERE a.product_type = 'REG' AND a.status NOT IN (1,6)
  	</select>
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	<!-- 新增用户当日投资笔数 -->
  <select id="countdailyNewInvestNumbers" parameterType="java.util.Map" resultType="java.lang.Integer" >
  		SELECT COUNT(*) AS count FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.interest_begin_date) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 = (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6) 
			AND DATE(c.interest_begin_date) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.interest_begin_date) = DATE(#{startTime})
  	</select>
  	
  	<!-- 新增用户当日投资额 -->
  	<select id="sumDailyNewInvestBalance" parameterType="java.util.Map" resultType="java.lang.Double" >
  		SELECT SUM(a.balance) AS count FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.interest_begin_date) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 = (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6) 
			AND DATE(c.interest_begin_date) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.interest_begin_date) = DATE(#{startTime})
  	</select>
  	
  	<!-- 当日老用户（第二次及以上投资的）投资笔数 -->
  	<select id="countDailyOldInvestTimes" parameterType="java.util.Map" resultType="java.lang.Integer" >
  		SELECT COUNT(*) AS count FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.interest_begin_date) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 &lt; (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6)
			AND DATE(c.interest_begin_date) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.interest_begin_date) = DATE(#{startTime}) 
  	</select>
  	
  	<!-- 当日老用户（第二次及以上投资的）投资金额 -->
  	<select id="sumDailyOldInvestBalance" parameterType="java.util.Map" resultType="java.lang.Double" >
  		SELECT SUM(a.balance) AS count FROM bs_sub_account a, bs_account d, bs_user e WHERE EXISTS(
			SELECT DISTINCT b.account_id FROM bs_sub_account b WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				AND DATE(b.interest_begin_date) = DATE(#{startTime}) AND a.account_id = b.account_id
		) AND 0 &lt; (
			SELECT COUNT(*) FROM bs_sub_account c WHERE c.product_type = 'REG' AND c.status NOT IN (1,6)
			AND DATE(c.interest_begin_date) &lt; DATE(#{startTime}) AND c.account_id = a.account_id
		)
		AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND a.account_id = d.id AND d.user_id = e.id
		AND DATE(a.interest_begin_date) = DATE(#{startTime}) 
  	</select>
  	
  	<!-- 当日全部投资笔数   -->
  	<select id="countDailyTotalInvestTimes" parameterType="java.util.Map" resultType="java.lang.Integer" >
  		SELECT COUNT(*) AS count FROM bs_sub_account a 
		WHERE a.product_type = 'REG' AND DATE(a.interest_begin_date) = DATE(#{startTime}) AND a.status NOT IN (1,6)
  	</select> 
  	
  	<!-- 当日全部投资金额   -->
  	<select id="sumDailyTotalInvestBalance" parameterType="java.util.Map" resultType="java.lang.Double" >
  		SELECT SUM(a.balance) AS amount FROM bs_sub_account a
		WHERE a.product_type = 'REG' AND a.status NOT IN (1,6)
		AND DATE(a.interest_begin_date) = DATE(#{startTime})
  	</select>
  	
  	
  	<!-- 历史数据：2、新增用户投资笔数 -->
  	<select id="dailyNewInvestNum" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT cc.open_time, dd.agent_id, SUM(cc.num) AS count
		FROM (
			SELECT aa.*, bb.first_open_time FROM (
				SELECT DATE(a.open_time) open_time, a.account_id, COUNT(*) num  FROM bs_sub_account a
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6)
				GROUP BY DATE(a.open_time), a.account_id 
			) aa, (
				<!-- 用户最早投资的日期 -->
				SELECT DATE(b.open_time) first_open_time, b.account_id, COUNT(*) num  FROM bs_sub_account b
				where b.product_type = 'REG' AND b.status NOT IN (1,6)
				GROUP BY b.account_id  ORDER BY DATE(b.open_time)
			) bb
			WHERE aa.account_id=bb.account_id AND aa.open_time=bb.first_open_time
		) cc, bs_user dd,bs_account ee
		WHERE cc.account_id=ee.id AND dd.id=ee.user_id
		<if test="startTime != null and startTime != ''">
			<!-- 只有startTime -->
			<if test="endTime == null and endTime == ''">
				AND DATE(cc.open_time) >= DATE(#{startTime})
			</if>
			<!-- startTime和endTime同时存在 -->
			<if test="endTime != null and endTime != ''">
				AND DATE(cc.open_time) >= DATE(#{startTime}) AND DATE(cc.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		<!-- 只有endTime -->
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND DATE(cc.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY dd.agent_id, cc.open_time
		ORDER BY cc.open_time DESC
  	</select>
  	
  	<!-- 历史数据：3、新增用户（没有投资过的）当日投资金额 -->
  	<select id="dailyNewInvestAmount" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT cc.open_time, dd.agent_id, sum(cc.num) as count FROM (
			<!-- 用户最早投资的投资金额 -->
			SELECT aa.*, bb.first_open_time FROM (
				<!-- 所有用户每一天的投资金额 -->
				SELECT DATE(a.open_time) open_time, a.account_id, SUM(a.balance) num  FROM bs_sub_account a
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6)
				GROUP BY DATE(a.open_time), a.account_id ORDER BY a.account_id
			) aa, (
				<!-- 用户最早投资的日期 -->
				SELECT DATE(b.open_time) first_open_time, b.account_id, SUM(b.balance) num  FROM bs_sub_account b
				WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				GROUP BY b.account_id  ORDER BY DATE(b.open_time)
			) bb
			WHERE aa.account_id=bb.account_id AND aa.open_time=bb.first_open_time
		) cc, bs_user dd,bs_account ee
		WHERE cc.account_id=ee.id AND dd.id=ee.user_id
		<if test="startTime != null and startTime != ''">
			<!-- 只有startTime -->
			<if test="endTime == null and endTime == ''">
				AND DATE(cc.open_time) >= DATE(#{startTime})
			</if>
			<!-- startTime和endTime同时存在 -->
			<if test="endTime != null and endTime != ''">
				AND DATE(cc.open_time) >= DATE(#{startTime}) AND DATE(cc.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		<!-- 只有endTime -->
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND DATE(cc.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY  dd.agent_id, cc.open_time
		ORDER BY cc.open_time DESC
  	</select>
  	
  	<!-- 历史数据：4、老用户（当日之前又投资过）当日投资笔数-->
  	<select id="dailyOldInvestNum" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT cc.open_time, dd.agent_id, sum(cc.num) as count FROM (
			<!-- 用户最早投资的投资笔数 -->
			SELECT aa.*, bb.first_open_time FROM (
				<!-- 所有用户每一天的投资笔数 -->
				SELECT DATE(a.open_time) open_time, a.account_id, COUNT(*) num  FROM bs_sub_account a
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6)
				GROUP BY DATE(a.open_time), a.account_id ORDER BY a.account_id
			) aa, (
				<!-- 用户最早投资的日期 -->
				SELECT DATE(b.open_time) first_open_time, b.account_id, COUNT(*) num  FROM bs_sub_account b
				where b.product_type = 'REG' AND b.status NOT IN (1,6)
				GROUP BY b.account_id ORDER BY DATE(b.open_time)
			) bb
			WHERE aa.account_id=bb.account_id AND aa.open_time>bb.first_open_time
		) cc, bs_user dd,bs_account ee
		WHERE cc.account_id=ee.id AND dd.id=ee.user_id 
		<if test="startTime != null and startTime != ''">
			<!-- 只有startTime -->
			<if test="endTime == null and endTime == ''">
				AND DATE(cc.open_time) >= DATE(#{startTime})
			</if>
			<!-- startTime和endTime同时存在 -->
			<if test="endTime != null and endTime != ''">
				AND DATE(cc.open_time) >= DATE(#{startTime}) AND DATE(cc.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		<!-- 只有endTime -->
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND DATE(cc.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY dd.agent_id, cc.open_time
		ORDER BY cc.open_time DESC
  	</select>
  	
  	<!-- 历史数据：5、老用户（当日之前又投资过）当日投资金额-->
  	<select id="dailyOldInvestAmount" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT cc.open_time, dd.agent_id, sum(cc.num) AS count FROM (
			<!-- 用户最早投资的投资金额 -->
			SELECT aa.*, bb.first_open_time FROM (
				<!-- 所有用户每一天的投资金额 -->
				SELECT DATE(a.open_time) open_time, a.account_id, SUM(a.balance) num  FROM bs_sub_account a
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6)
				GROUP BY DATE(a.open_time), a.account_id ORDER BY a.account_id
			) aa, (
				<!-- 用户最早投资的日期 -->
				SELECT DATE(b.open_time) first_open_time, b.account_id, SUM(b.balance) num  FROM bs_sub_account b
				WHERE b.product_type = 'REG' AND b.status NOT IN (1,6)
				GROUP BY b.account_id  ORDER BY DATE(b.open_time)
			) bb
			WHERE aa.account_id=bb.account_id AND aa.open_time>bb.first_open_time
		) cc, bs_user dd,bs_account ee
		WHERE cc.account_id=ee.id AND dd.id=ee.user_id
		<if test="startTime != null and startTime != ''">
			<!-- 只有startTime -->
			<if test="endTime == null and endTime == ''">
				AND DATE(cc.open_time) >= DATE(#{startTime})
			</if>
			<!-- startTime和endTime同时存在 -->
			<if test="endTime != null and endTime != ''">
				AND DATE(cc.open_time) >= DATE(#{startTime}) AND DATE(cc.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		<!-- 只有endTime -->
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND DATE(cc.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY dd.agent_id, cc.open_time
		ORDER BY cc.open_time ASC
  	</select>
  	
  	<!-- 历史数据：6、当日全部投资笔数 -->
  	<select id="dailyTotalInvestNum" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT DATE(a.open_time) AS open_time, c.agent_id, COUNT(*) AS count
		FROM bs_sub_account a, bs_account b, bs_user c 
		WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.status NOT IN (1,6) 
		<if test="startTime != null and startTime != ''">
			<!-- 只有startTime -->
			<if test="endTime == null and endTime == ''">
				AND DATE(a.open_time) >= DATE(#{startTime})
			</if>
			<!-- startTime和endTime同时存在 -->
			<if test="endTime != null and endTime != ''">
				AND DATE(a.open_time) >= DATE(#{startTime}) AND DATE(a.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		<!-- 只有endTime -->
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND DATE(a.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY c.agent_id, DATE(a.open_time)
		ORDER BY a.open_time ASC
  	</select>
  	<!-- 历史数据：7、当日全部投资金额 -->
  	<select id="dailyTotalInvestAmount" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT DATE(a.open_time) AS open_time, c.agent_id, SUM(a.balance) AS count
		FROM bs_sub_account a, bs_account b, bs_user c 
		WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.status NOT IN (1,6)
		<if test="startTime != null and startTime != ''">
			<!-- 只有startTime -->
			<if test="endTime == null and endTime == ''">
				AND DATE(a.open_time) >= DATE(#{startTime})
			</if>
			<!-- startTime和endTime同时存在 -->
			<if test="endTime != null and endTime != ''">
				AND DATE(a.open_time) >= DATE(#{startTime}) AND DATE(a.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		<!-- 只有endTime -->
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND DATE(a.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY c.agent_id, DATE(a.open_time)
		ORDER BY a.open_time ASC
  	</select>
  	
  	<!-- 历史数据：9、累计投资人数 -->
  	<select id="totalInvestUser" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT aa.open_time, aa.agent_id, SUM(aa1.total_invest_user) AS count
		FROM(
			SELECT DATE(c1.open_time) open_time,c1.agent_id, COUNT(*) AS total_invest_user FROM (
				SELECT DATE(a.open_time) open_time,c.agent_id FROM bs_sub_account a, bs_account b, bs_user c 
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
				GROUP BY a.account_id
			) c1
			GROUP BY DATE(c1.open_time), c1.agent_id
		) aa, (
			SELECT DATE(c1.open_time) open_time,c1.agent_id, COUNT(*) AS total_invest_user FROM (
				SELECT DATE(a.open_time) open_time,c.agent_id FROM bs_sub_account a, bs_account b, bs_user c
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
				GROUP BY a.account_id
			) c1
			GROUP BY DATE(c1.open_time), c1.agent_id
		) aa1
		where ((
			aa.agent_id = aa1.agent_id AND DATE(aa.open_time) >= DATE(aa1.open_time)
		) OR (
			aa.agent_id IS NULL AND aa1.agent_id IS NULL AND DATE(aa.open_time) >= DATE(aa1.open_time)
		))
		<if test="startTime != null and startTime != ''">
			<!-- 只有startTime -->
			<if test="endTime == null and endTime == ''">
				AND DATE(aa.open_time) >= DATE(#{startTime})
			</if>
			<!-- startTime和endTime同时存在 -->
			<if test="endTime != null and endTime != ''">
				AND DATE(aa.open_time) >= DATE(#{startTime}) AND DATE(aa.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		<!-- 只有endTime -->
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND DATE(aa.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY aa.open_time, aa.agent_id 
		ORDER BY aa.open_time ASC
  	</select>
  	
  	<!-- 历史数据：10、累计复投人数 -->
  	<select id="totalReInvestUser" parameterType="java.util.Map" resultType="java.util.Map" >
  		SELECT a1.open_time, a1.agent_id, SUM(a2.count) AS count FROM (
			SELECT aaaaa.open_time,aaaaa.agent_id, COUNT(*) AS count FROM (
				SELECT aaaa.open_time, aaaa.agent_id FROM (
					<!-- 每一个用户复投的日期 -->
					SELECT aaa.open_time, aaa.account_id, aaa.agent_id FROM (
							<!-- 每一个用户复投的日期（包含最开始投资日期） -->
							SELECT aa.open_time AS first_open_time, bb.open_time, aa.account_id, aa.agent_id FROM (
									<!-- 每一个用户每天购买的笔数 -->
									SELECT DATE(a.open_time) AS open_time, a.account_id, c.agent_id, COUNT(*) AS count 
									FROM bs_sub_account a, bs_account b, bs_user c 
									WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
									GROUP BY DATE(a.open_time), a.account_id
									ORDER BY a.account_id
							) aa, (
									<!--  每一个用户每天购买的笔数 -->
									SELECT DATE(a.open_time) AS open_time, a.account_id, c.agent_id, COUNT(*) AS count 
									FROM bs_sub_account a, bs_account b, bs_user c 
									WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
									GROUP BY DATE(a.open_time), a.account_id
									ORDER BY a.account_id
							) bb
							WHERE aa.account_id = bb.account_id AND aa.open_time &lt; bb.open_time
					) AS aaa
					WHERE aaa.first_open_time IN (
									<!-- 每一个用户复投的日期 -->
							SELECT bb.open_time FROM (
									<!-- 每一个用户每天购买的笔数 -->
									SELECT DATE(a.open_time) AS open_time, a.account_id, c.agent_id, COUNT(*) AS count 
									FROM bs_sub_account a, bs_account b, bs_user c 
									WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
									GROUP BY DATE(a.open_time), a.account_id
									ORDER BY a.account_id
							) aa, (
									<!-- 每一个用户每天购买的笔数 -->
									SELECT DATE(a.open_time) AS open_time, a.account_id, c.agent_id, COUNT(*) AS count 
									FROM bs_sub_account a, bs_account b, bs_user c 
									WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
									GROUP BY DATE(a.open_time), a.account_id
									ORDER BY a.account_id
							) bb
							WHERE aa.account_id = bb.account_id AND aa.open_time &lt; bb.open_time
					)
				) AS aaaa
				GROUP BY aaaa.account_id
			) aaaaa
			GROUP BY aaaaa.open_time, aaaaa.agent_id
		
		) a1, 
		(
			SELECT aaaaa.open_time,aaaaa.agent_id, COUNT(*) AS count FROM (
				SELECT aaaa.open_time, aaaa.agent_id FROM (
					<!-- 每一个用户复投的日期 -->
					SELECT aaa.open_time, aaa.account_id, aaa.agent_id FROM (
							<!-- 每一个用户复投的日期（包含最开始投资日期） -->
							SELECT aa.open_time AS first_open_time, bb.open_time, aa.account_id, aa.agent_id FROM (
									<!--  每一个用户每天购买的笔数 -->
									SELECT DATE(a.open_time) AS open_time, a.account_id, c.agent_id, COUNT(*) AS count 
									FROM bs_sub_account a, bs_account b, bs_user c 
									WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
									GROUP BY DATE(a.open_time), a.account_id
									ORDER BY a.account_id
							) aa, (
									<!-- 每一个用户每天购买的笔数 -->
									SELECT DATE(a.open_time) AS open_time, a.account_id, c.agent_id, COUNT(*) AS count 
									FROM bs_sub_account a, bs_account b, bs_user c 
									WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
									GROUP BY DATE(a.open_time), a.account_id
									ORDER BY a.account_id
							) bb
							WHERE aa.account_id = bb.account_id AND aa.open_time &lt; bb.open_time
					) AS aaa
					WHERE aaa.first_open_time IN (
									<!-- 每一个用户复投的日期 -->
							SELECT bb.open_time FROM (
									<!-- 每一个用户每天购买的笔数 -->
									SELECT DATE(a.open_time) AS open_time, a.account_id, c.agent_id, COUNT(*) AS count 
									FROM bs_sub_account a, bs_account b, bs_user c 
									WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
									GROUP BY DATE(a.open_time), a.account_id
									ORDER BY a.account_id
							) aa, (
									<!-- 每一个用户每天购买的笔数 -->
									SELECT DATE(a.open_time) AS open_time, a.account_id, c.agent_id, COUNT(*) AS count 
									FROM bs_sub_account a, bs_account b, bs_user c 
									WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
									GROUP BY DATE(a.open_time), a.account_id
									ORDER BY a.account_id
							) bb
							WHERE aa.account_id = bb.account_id AND aa.open_time &lt; bb.open_time
					)
				) AS aaaa
				GROUP BY aaaa.account_id
			) aaaaa
			GROUP BY aaaaa.open_time, aaaaa.agent_id
		) a2
		where ((
			a1.agent_id = a2.agent_id AND a1.open_time >= a2.open_time
		) OR (
			a1.agent_id IS NULL AND a2.agent_id IS NULL AND a1.open_time >= a2.open_time
		))
		AND a1.open_time >= DATE(#{startTime}) AND a1.open_time &lt;= DATE(#{endTime})
		GROUP BY a1.open_time, a1.agent_id 
		ORDER BY a1.open_time ASC
  	
	  	<!-- SELECT aaa.open_time, aaa.agent_id, SUM(bbb.count) AS count FROM (
			当天复投的个数，时间
			SELECT aa.agent_id, DATE(bb.open_time) AS open_time, COUNT(DISTINCT aa.account_id) AS count FROM (
				按用户分组，获得第一次投资的时间
				SELECT a.account_id, c.agent_id, a.open_time AS first_open_time FROM bs_sub_account a, bs_account b, bs_user c 
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
				GROUP BY a.account_id
			) aa, (
				所有用户投资
				SELECT a.account_id, c.agent_id, a.open_time FROM bs_sub_account a, bs_account b, bs_user c 
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
			) bb 
			WHERE aa.account_id = bb.account_id AND aa.first_open_time &lt; bb.open_time
			GROUP BY DATE(bb.open_time), aa.agent_id
			ORDER BY DATE(bb.open_time), aa.agent_id
		) AS aaa, (
			SELECT aa.agent_id, DATE(bb.open_time) AS open_time, COUNT(DISTINCT aa.account_id) AS count FROM (
				按用户分组，获得第一次投资的时间
				SELECT a.account_id, c.agent_id, a.open_time AS first_open_time FROM bs_sub_account a, bs_account b, bs_user c 
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
				GROUP BY a.account_id
			) aa, (
				所有用户投资
				SELECT a.account_id, c.agent_id, a.open_time FROM bs_sub_account a, bs_account b, bs_user c 
				WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
			) bb 
			WHERE aa.account_id = bb.account_id AND aa.first_open_time &lt; bb.open_time
			GROUP BY DATE(bb.open_time), aa.agent_id
			ORDER BY DATE(bb.open_time), aa.agent_id
		) bbb
		WHERE ((
			aaa.agent_id = bbb.agent_id AND aaa.open_time >= bbb.open_time
		) OR (
			aaa.agent_id IS NULL AND bbb.agent_id IS NULL AND aaa.open_time >= bbb.open_time
		))
		<if test="startTime != null and startTime != ''">
			只有startTime
			<if test="endTime == null and endTime == ''">
				AND aaa.open_time >= DATE(#{startTime})
			</if>
			startTime和endTime同时存在
			<if test="endTime != null and endTime != ''">
				AND aaa.open_time >= DATE(#{startTime}) AND aaa.open_time &lt;= DATE(#{endTime})
			</if>
		</if>
		只有endTime
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND aaa.open_time &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY aaa.open_time, aaa.agent_id 
		ORDER BY aaa.open_time ASC, aaa.agent_id ASC -->
  	</select>
  	
  	
  	<!-- 历史数据：11、累计投资金额 -->
  	<select id="totalInvestAmount" parameterType="java.util.Map" resultType="java.util.Map" >
		SELECT bb.open_time, bb.agent_id, SUM(bb1.total_invest_amount) AS count
		FROM (
			SELECT DATE(a.open_time) open_time, c.agent_id, SUM(a.balance) AS total_invest_amount
			FROM bs_sub_account a, bs_account b, bs_user c
			WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
			GROUP BY DATE(a.open_time), c.agent_id
		) bb, (
			SELECT DATE(a.open_time) open_time, c.agent_id, SUM(a.balance) AS total_invest_amount
			FROM bs_sub_account a, bs_account b, bs_user c
			WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.account_id = b.id AND b.user_id = c.id
			GROUP BY DATE(a.open_time), c.agent_id
		) bb1
		WHERE ((
			bb.agent_id = bb1.agent_id AND DATE(bb.open_time) >= DATE(bb1.open_time)
		) or (
			bb.agent_id IS NULL AND bb1.agent_id IS NULL AND DATE(bb.open_time) >= DATE(bb1.open_time)
		))
		<if test="startTime != null and startTime != ''">
			<!-- 只有startTime -->
			<if test="endTime == null and endTime == ''">
				AND DATE(bb.open_time) >= DATE(#{startTime})
			</if>
			<!-- startTime和endTime同时存在 -->
			<if test="endTime != null and endTime != ''">
				AND DATE(bb.open_time) >= DATE(#{startTime}) AND DATE(bb.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		<!-- 只有endTime -->
		<if test="startTime == null and startTime == ''">
			<if test="endTime != null and endTime != ''">
				AND DATE(bb.open_time) &lt;= DATE(#{endTime})
			</if>
		</if>
		GROUP BY bb.open_time, bb.agent_id
		ORDER BY bb.open_time ASC
  	</select>
  	
  <!-- 
	- 查询用户的加权投资期限
	- @auth yanwl
	- @date 2016-01-15
  -->
  <select id="selectWeightInvestTrem" resultType="java.util.Map" parameterType="java.util.Map">
	select CAST(sum(r.balance*r.term)/sum(r.balance) AS DECIMAL(3,2)) as weightInvestTrem,count(r.account_id) as totalTrans 
	from (
	select bsa.account_id,bsa.balance,p.term from bs_user u
	left join bs_account a on u.id = a.user_id 
	left join bs_sub_account bsa on a.id = bsa.account_id and bsa.product_type = 'REG' and bsa.status not in (1)
	left join bs_product p on bsa.product_code = p.code
	where u.id = #{userId}
	) r
  </select>
    
  <select id="getOldSubAccountREGList" parameterType="java.util.Map" resultMap="BaseResultMap" >
  select * from bs_sub_account 
	where `status` = '2' and product_type='REG' and interest_begin_date &lt;= '2015-12-01' 
	limit #{start , jdbcType=INTEGER}, #{pageSize , jdbcType=INTEGER}
  </select>
  
  <select id="getNewSubAccountREGList" parameterType="java.util.Map" resultMap="BaseResultMap" >    
  select * from (
	(select * from(select a1.id, a1.account_id, a1.code, a1.product_id, a1.product_type, a1.product_code, a1.product_name, a1.product_rate, 
	    a1.bank_card, a1.extra_rate, a1.open_balance, a1.balance, a1.available_balance, a1.can_withdraw, a1.freeze_balance, 
	    a1.trans_status, a1.status, a1.check_status, a1.interest_begin_date, a1.last_trans_date, a1.last_cal__interest_date, 
	    a1.last_finish_interest_date, a1.accumulation_inerest, a1.open_time, a1.close_time, a1.transfer_time,
	    b1.agent_id as note from bs_sub_account a1,bs_user b1, bs_account c1 ,bs_product d1, bs_property_info e1
		where a1.`status` = '2' and a1.product_type='REG' and a1.interest_begin_date between #{interestBeginDate} and #{today}
		and a1.account_id = c1.id and c1.user_id = b1.id and b1.agent_id='15'
		and a1.product_id = d1.id and d1.property_id = e1.id and e1.property_symbol = #{propertySymbol}
		order by a1.open_balance desc, a1.id asc)aa )UNION
	(select * from(select a.id, a.account_id, a.code, a.product_id, a.product_type, a.product_code, a.product_name, a.product_rate, 
	    a.bank_card, a.extra_rate, a.open_balance, a.balance, a.available_balance, a.can_withdraw, a.freeze_balance, 
	    a.trans_status, a.status, a.check_status, a.interest_begin_date, a.last_trans_date, a.last_cal__interest_date, 
	    a.last_finish_interest_date, a.accumulation_inerest, a.open_time, a.close_time, a.transfer_time,
	    b.agent_id as note from bs_sub_account a,bs_user b, bs_account c, bs_product d, bs_property_info e 
		where a.`status` = '2' and a.product_type='REG' and a.interest_begin_date between #{interestBeginDate} and #{today}
		and a.account_id = c.id and c.user_id = b.id and (b.agent_id != '15' or b.agent_id is null) 
		and a.product_id = d.id and d.property_id = e.id and e.property_symbol = #{propertySymbol}
		order by a.open_balance desc, a.id asc)bb)
	)t limit #{start , jdbcType=INTEGER}, #{pageSize , jdbcType=INTEGER}
  </select>

  
  <select id="getNewSubAccountREGReturnList" parameterType="java.util.Map" resultMap="BaseResultMap" >
  select * from bs_sub_account 
	where (`status` = '5' or `status` = '7')  
	and product_type='REG' and interest_begin_date > '2015-12-01' order by open_balance desc 
	limit #{start , jdbcType=INTEGER}, #{pageSize , jdbcType=INTEGER}
  </select>
  
  <select id="countOldSubAccountREGList" parameterType="java.util.Map" resultType="java.lang.Integer" >
  select count(*) from bs_sub_account 
	where `status` = '2' and product_type='REG' and interest_begin_date &lt;= '2015-12-01' 
  </select>
  
  <select id="countNewSubAccountREGList" parameterType="java.util.Map" resultType="java.lang.Integer" >
  select count(a.id) from bs_sub_account a,bs_product b, bs_property_info c
	where a.`status` = '2' and a.product_type='REG' and a.interest_begin_date between #{interestBeginDate} and #{today}
	and a.product_id = b.id and b.property_id = c.id and c.property_symbol = #{propertySymbol}
  </select>

  
  <select id="countNewSubAccountREGReturnList" parameterType="java.util.Map" resultType="java.lang.Integer" >
  select count(*) from bs_sub_account 
	where (`status` = '5' or `status` = '7')  
	and product_type='REG' and interest_begin_date > '2015-12-01'
  </select>

  
  <!-- 
  	活动（砸金蛋） 相关开始
  -->
  <!-- 统计当前用户在活动时间之前投资的数量 -->
  <select id="countOpenTimeLessThenActivityTime" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT COUNT(*) FROM bs_sub_account a, bs_account b
	WHERE a.account_id = b.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
	AND b.user_id = #{userId} AND a.open_time &lt; #{startTime}
  </select>
  
  <!-- 统计当前用户在活动期间投资的数量 -->
  <select id="countOpenTimeBetweenActivityTime" resultType="java.lang.Integer" parameterType="java.util.Map">
  	<if test="percent == 25">
		SELECT COUNT(a.id) AS count FROM bs_sub_account a, bs_account b
		WHERE a.account_id = b.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
		AND a.open_time >= #{startTime} AND a.open_time &lt;= #{endTime}
		AND a.balance >= 100 AND a.balance &lt; 10000
		AND b.user_id = #{userId}
  	</if>
  	<if test="percent == 100">
  		SELECT COUNT(*) as count FROM bs_sub_account a, bs_account b, bs_product c
		WHERE a.account_id = b.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
		AND a.open_time >= #{startTime} AND a.open_time &lt;= #{endTime}
		AND c.id = a.product_id AND c.term = 1 AND a.balance >= 10000
		AND b.user_id = #{userId}
  	</if>
  </select>
  
  <!-- 统计当前用户的在活动期间邀请的用户投资的人数 -->
  <select id="countRecommendInvitedUsers" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT COUNT(*) FROM bs_user a, (
		<!-- 每个用户在活动期间的投资产品的笔数(不论期限) -->
		SELECT COUNT(*) as count, b.user_id FROM bs_sub_account a, bs_account b
		WHERE a.account_id = b.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
		AND a.open_time >= #{startTime} AND a.open_time &lt;= #{endTime}
		GROUP BY b.user_id
	) AS bb
	WHERE a.recommend_id = #{userId} AND a.register_time >= #{startTime} AND a.register_time &lt;= #{endTime}
	AND a.id = bb.user_id
  </select>
  
  <!-- 单次投资1个月1万（及以上）的个数 -->
  <select id="countGreaterThanOrEqualToAmount" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT COUNT(*) FROM bs_sub_account a, bs_product b, bs_account c
	WHERE a.product_type = 'REG' AND a.`status` NOT IN (1,6)
	AND a.open_time >= #{startTime} AND a.open_time &lt;= #{endTime}
	AND a.product_id = b.id AND b.term = #{term} AND a.balance >= #{amount}
	AND a.account_id = c.id AND c.user_id = #{userId}
  </select>
  
  <!-- （活动期间）单次投资12个月1万-5万获得1次“镶钻金蛋”抽奖机会 -->
  <select id="countBetweenInvestAmount" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT COUNT(*) FROM bs_sub_account a, bs_product b, bs_account c
	WHERE a.product_type = 'REG' AND a.`status` NOT IN (1,6)
	AND a.open_time >= #{startTime} AND a.open_time &lt;= #{endTime}
	AND a.product_id = b.id AND b.term = #{term} AND a.balance >= #{bottomAmount} AND a.balance &lt; #{topAmount}
	AND a.account_id = c.id AND c.user_id = #{userId}
  </select>
  
  <!-- 
	 1、活动期间购买[100,10000)1个月+12个月的投资数量或已投资老用户的投资数量（25%）
     2、活动期间购买1万元1个月及以上的用户的投资数量（100%）
  -->
  <select id="countNormalEggBetweenActivityTime" resultType="java.lang.Integer" parameterType="java.util.Map">
  	<if test="percent == 25">
		SELECT SUM(count) AS count FROM (
			(
				<!-- 用户在活动期间的投资[100,10000)1个月+12个月笔数 -->
				SELECT COUNT(a.id) AS count, b.user_id FROM bs_sub_account a, bs_account b, bs_product c
				WHERE a.account_id = b.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
				AND a.open_time >= #{startTime} AND a.open_time &lt;= #{endTime}
				AND c.id = a.product_id AND (c.term = 1 OR c.term = 12) AND a.balance >= 100 AND a.balance &lt; 10000
				AND b.user_id = #{userId}
			) UNION (
				<!-- 用户在活动之前的投资的笔数 -->
				SELECT COUNT(a.id) AS count, b.user_id FROM bs_sub_account a, bs_account b
				WHERE a.product_type = 'REG' AND a.`status` NOT IN(1,6) AND a.account_id = b.id
				AND a.open_time &lt; #{startTime}
				AND b.user_id = #{userId}
			) 
		)AS aa
  	</if>
  	<if test="percent == 100">
  		SELECT COUNT(*) as count FROM bs_sub_account a, bs_account b, bs_product c
		WHERE a.account_id = b.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
		AND a.open_time >= #{startTime} AND a.open_time &lt;= #{endTime}
		AND c.id = a.product_id AND c.term = 1 AND a.balance >= 10000
		AND b.user_id = #{userId}
  	</if>
  </select>
  
  <select id="selectSuperMeInvest" resultMap="BaseResultMap" parameterType="java.util.Map">
	SELECT a.* FROM bs_sub_account a, bs_account b, bs_product c
	WHERE a.account_id = b.id AND a.product_type = 'REG' AND a.`status` NOT IN (1,6)
	AND a.open_time >= #{startTime} AND a.open_time &lt;= #{endTime}
	AND c.id = a.product_id AND c.term = 12 
	<if test="moreAmount == null">
		AND a.balance >= #{lessAmount} 
	</if>
	<if test="moreAmount != null">
		AND a.balance >= #{lessAmount} AND a.balance &lt; #{moreAmount}
	</if>
	AND b.user_id = #{userId}
  </select>
  
  
  <!-- 
  	活动（砸金蛋） 相关结束
  -->

  <resultMap id="FinancialAccountVOResultMap" type="com.pinting.business.model.vo.FinancialAccountVO" >
    <result column="sub_account_id" property="subAccountId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="term" property="term" jdbcType="INTEGER" />
    <result column="base_rate" property="baseRate" jdbcType="DOUBLE" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
    <result column="need_interest_days" property="needInterestDays" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="open_time" property="openTime" jdbcType="DATE" />
    <result column="interest_begin_date" property="interestBeginDate" jdbcType="DATE" />
    <result column="return_money_days" property="returnMoneyDays" jdbcType="DATE" />
    <result column="agent_name" property="agentName" jdbcType="VARCHAR" />
    <result column="dafy_return_balance" property="dafyReturnBalance" jdbcType="DOUBLE" />
    <result column="user_interest_balance" property="userInterestBalance" jdbcType="DOUBLE" />
    <result column="user_bonus_balance" property="userBonusBalance" jdbcType="DOUBLE" />
  </resultMap>

  <select id="selectFinancialAccount2" resultMap="FinancialAccountVOResultMap" parameterType="java.util.Map">
    SELECT * FROM (
    SELECT c.mobile, c.user_name, d.term, d.base_rate, a.balance,
    CASE d.term
    WHEN 1 THEN 30
    WHEN 3 THEN 90
    WHEN 6 THEN 180
    WHEN 12 THEN 365
    END AS need_interest_days,
    CASE a.`status`
    WHEN 2 THEN '投资中'
    WHEN 5 THEN '已结算'
    WHEN 7 THEN '结算中'
    END AS `status`, a.open_time, a.interest_begin_date, a.last_finish_interest_date AS return_money_days, e.agent_name, (
    CASE
    WHEN a.`product_code` IN ('1413','1411','1412','1414') THEN
    CASE d.term
    WHEN 1 THEN a.balance*30/365*0.2
    WHEN 3 THEN a.balance*90/365*0.2
    WHEN 6 THEN a.balance*180/365*0.2
    WHEN 12 THEN a.balance*0.2
    END
    WHEN SUBSTR(a.`product_code`,1,2) IN('24') THEN
    CASE d.term
    WHEN 1 THEN a.balance*30/365*0.18
    WHEN 3 THEN a.balance*90/365*0.18
    WHEN 6 THEN a.balance*180/365*0.18
    WHEN 12 THEN a.balance*0.18
    END
    ELSE
    CASE d.term
    WHEN 1 THEN a.balance*30/365*0.24
    WHEN 3 THEN a.balance*90/365*0.24
    WHEN 6 THEN a.balance*180/365*0.24
    WHEN 12 THEN a.balance*0.24
    END
    END

    ) AS dafy_return_balance,
    (
    CASE d.term
    WHEN 1 THEN a.balance*30/365*(d.base_rate/100)
    WHEN 3 THEN a.balance*90/365*(d.base_rate/100)
    WHEN 6 THEN a.balance*180/365*(d.base_rate/100)
    WHEN 12 THEN a.balance*(d.base_rate/100)
    END
    ) AS user_interest_balance, (
    CASE d.term
    WHEN 1 THEN
    CASE
    WHEN agent_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1MONTH')*a.balance/100
    ELSE
    CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE2')*a.balance/100
    END
    END
    WHEN 3 THEN
    CASE
    WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_3MONTH')*a.balance/100
    ELSE CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE')*a.balance/100
    END
    END
    WHEN 6 THEN
    CASE
    WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_6MONTH')*a.balance/100
    ELSE CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE3')*a.balance/100
    END
    END
    WHEN 12 THEN
    CASE
    WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1YEAR')*a.balance/100
    ELSE CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE4')*a.balance/100
    END
    END
    END
    ) AS user_bonus_balance
    FROM bs_sub_account a, bs_account b, bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d
    WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id
    AND a.interest_begin_date BETWEEN '2015-12-2 00:00:00' AND '2016-2-1 23:59:59'
    ORDER BY return_money_days ASC
    ) AS aaa
    <if test="type == 'day'">
      WHERE DATE(aaa.return_money_days) = #{startTime}
    </if>
    <if test="type == 'month'">
      WHERE DATE(aaa.return_money_days) >= #{startTime} AND DATE(aaa.return_money_days) &lt; #{endTime}
    </if>
    <if test="type == 'year'">
      WHERE YEAR(aaa.return_money_days) = #{startTime}
    </if>
    LIMIT #{start}, #{numPerPage}
  </select>
  
  <select id="countFinancialAccount2" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT COUNT(*) FROM (
		SELECT c.mobile, c.user_name, d.term, d.base_rate, a.balance,
		CASE d.term 
			WHEN 1 THEN 30
			WHEN 3 THEN 90
			WHEN 6 THEN 180
			WHEN 12 THEN 365
		END AS need_interest_days,
		CASE a.`status`
			WHEN 2 THEN '投资中'
			WHEN 5 THEN '已结算'
			WHEN 7 THEN '结算中'
		END AS `status`, a.open_time, a.interest_begin_date, a.last_finish_interest_date AS return_money_days, e.agent_name, (
			CASE d.term
				WHEN 1 THEN a.balance*30/365*0.24
				WHEN 3 THEN a.balance*90/365*0.24
				WHEN 6 THEN a.balance*180/365*0.24
				WHEN 12 THEN a.balance*0.24
			END
		) AS dafy_return_balance,
		(
			CASE d.term
				WHEN 1 THEN a.balance*30/365*(d.base_rate/100)
				WHEN 3 THEN a.balance*90/365*(d.base_rate/100)
				WHEN 6 THEN a.balance*180/365*(d.base_rate/100)
				WHEN 12 THEN a.balance*(d.base_rate/100)
			END
		) AS user_interest_balance, (
			CASE d.term
				WHEN 1 THEN 
				CASE 
					WHEN agent_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1MONTH')*a.balance/100
					ELSE 
					CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE2')*a.balance/100
					END
				END
				WHEN 3 THEN 
				CASE 
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_3MONTH')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE')*a.balance/100
					END
				END
				WHEN 6 THEN 
				CASE 
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_6MONTH')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0		
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE3')*a.balance/100
					END
				END
				WHEN 12 THEN 
				CASE
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1YEAR')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE4')*a.balance/100
					END
				END
			END
		) AS user_bonus_balance
		FROM bs_sub_account a, bs_account b, bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d
		WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id
		AND a.interest_begin_date BETWEEN '2015-12-2 00:00:00' AND '2016-2-1 23:59:59'
		ORDER BY return_money_days ASC
	) AS count_query
	<if test="type == 'day'">
		WHERE DATE(count_query.return_money_days) = #{startTime}
	</if>
	<if test="type == 'month'">
		WHERE DATE(count_query.return_money_days) >= #{startTime} AND DATE(count_query.return_money_days) &lt; #{endTime}
	</if>
	<if test="type == 'year'">
		WHERE YEAR(count_query.return_money_days) = #{startTime}
	</if>
  </select>
  
  <select id="sumTotalInvestAmountFinancialAccount2" resultType="java.lang.Double" parameterType="java.util.Map">
  	SELECT SUM(a.balance) FROM bs_sub_account a 
	WHERE a.product_type = 'REG' AND a.`status` IN(2,5,7)
	AND a.interest_begin_date BETWEEN '2015-12-2 00:00:00' AND '2016-2-1 23:59:59'
  </select>
  <select id="sumCurrentMonthInterestReturnAmount" resultType="java.lang.Double" parameterType="java.util.Map">
  	SELECT SUM(aa.dafy_return_balance) FROM (
	SELECT a.id, (
		CASE
         WHEN d.`code` IN ('1413','1411','1412','1414') THEN
            CASE d.term
              WHEN 1 THEN a.balance*30/365*0.2
              WHEN 3 THEN a.balance*90/365*0.2
              WHEN 6 THEN a.balance*180/365*0.2
              WHEN 12 THEN a.balance*0.2
            END
          WHEN SUBSTR(d.`code`,1,2) IN('24') THEN
            CASE d.term
              WHEN 1 THEN a.balance*30/365*0.18
              WHEN 3 THEN a.balance*90/365*0.18
              WHEN 6 THEN a.balance*180/365*0.18
              WHEN 12 THEN a.balance*0.18
            END
         ELSE
           CASE d.term
              WHEN 1 THEN a.balance*30/365*0.24
              WHEN 3 THEN a.balance*90/365*0.24
              WHEN 6 THEN a.balance*180/365*0.24
              WHEN 12 THEN a.balance*0.24
           END
        END
	) AS dafy_return_balance FROM bs_sub_account a, bs_product d
	WHERE a.product_type = 'REG' AND a.`status` IN(2,5,7)
	AND a.interest_begin_date BETWEEN '2015-12-2 00:00:00' AND '2016-2-1 23:59:59'
	AND YEAR(a.last_finish_interest_date) = YEAR(NOW()) AND MONTH(a.last_finish_interest_date) = MONTH(NOW())
	) AS aa
  </select>
  
  
  
  	
  <select id="selectFinancialAccount1" resultMap="FinancialAccountVOResultMap" parameterType="java.util.Map">
	SELECT 
	u.mobile,u.user_name, b.term,b.base_rate,a.balance,
	case when month(
		last_finish_interest_date
	) = month(NOW()) then DAYOFMONTH(
		 DATE_ADD(last_finish_interest_date, INTERVAL -1 DAY)
	)
	else 
	   DAYOFMONTH(last_day(NOW()))
	end need_interest_days,
	a.status,	a.open_time,a.interest_begin_date, 
	CASE b.term 
		WHEN 1 THEN ADDDATE(a.interest_begin_date, 30)
		WHEN 3 THEN ADDDATE(a.interest_begin_date, 90)
		WHEN 6 THEN ADDDATE(a.interest_begin_date, 180)
		WHEN 12 THEN ADDDATE(a.interest_begin_date, 365)
	END AS return_money_days, 
	case when term = 12  then (a.balance*(22-b.base_rate)/100) 
	else (a.balance*(22-b.base_rate)/100*(b.term*30/365)) end dafy_return_balance
	FROM 
	bs_sub_account a 
	LEFT JOIN bs_account c ON a.account_id = c.id
	LEFT JOIN bs_user u ON c.user_id = u.id,
	bs_product b 
	where a.product_id=b.id and a.status in(2,5,7) and a.product_type='REG' 
	and a.interest_begin_date &lt;= '2015-12-01'
	and a.last_finish_interest_date >= #{startTime}
	and a.last_finish_interest_date &lt; #{endTime}
	LIMIT #{start}, #{numPerPage}
  </select>
  
  <select id="countFinancialAccount1" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT 
		count(*)
	FROM 
	bs_sub_account a 
	LEFT JOIN bs_account c ON a.account_id = c.id
	LEFT JOIN bs_user u ON c.user_id = u.id,
	bs_product b 
	where a.product_id=b.id and a.status in(2,5,7) and a.product_type='REG' 
	and a.interest_begin_date &lt;= '2015-12-01'
	and a.last_finish_interest_date >= #{startTime}
	and a.last_finish_interest_date &lt; #{endTime}
  </select>
  
  <!-- 3.0删选条件精确到日 -->
  <select id="selectFinancialAccount3Day" resultMap="FinancialAccountVOResultMap" parameterType="java.util.Map">
  select a.id sub_account_id,c.mobile,c.user_name, 
  	CASE WHEN d.term &lt; 0 THEN ABS(d.term)ELSE d.term END AS term,
  		 d.base_rate, a.balance, CASE a.`status`
		WHEN 2 THEN '投资中'
		WHEN 5 THEN '已结算'
		WHEN 7 THEN '结算中'END AS `status` ,
	CASE when d.term = -7 and a.last_finish_interest_date = #{endTime} then 7 else
		CASE when d.term = 12 and a.last_finish_interest_date = #{endTime} then 35 else 30 end 
	end as need_interest_days,
	CASE when d.term = -7 and a.last_finish_interest_date = #{endTime} then 7*a.balance*0.2/365 else
		CASE when d.term = 12 and a.last_finish_interest_date = #{endTime} 
			then 35*a.balance*0.24/365 else 30*a.balance*0.24/365 end
	end as dafy_return_balance,
	CASE when d.term = -7 and a.last_finish_interest_date = #{endTime} then 7*a.balance*d.base_rate/36500 else
		CASE when d.term = 12 and a.last_finish_interest_date = #{endTime} 
			then 35*a.balance*d.base_rate/36500 else 30*a.balance*d.base_rate/36500 end 
	end as user_interest_balance,
a.open_time, a.interest_begin_date, a.last_finish_interest_date as return_money_days,
e.agent_name , (
			CASE d.term
				WHEN 7 THEN 
				CASE 
					WHEN agent_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_7DAY')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE_7DAY')*a.balance/100
					END
				END
				WHEN 1 THEN 
				CASE 
					WHEN agent_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1MONTH')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE2')*a.balance/100
					END
				END
				WHEN 3 THEN 
				CASE 
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_3MONTH')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE')*a.balance/100
					END
				END
				WHEN 6 THEN 
				CASE 
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_6MONTH')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0		
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE3')*a.balance/100
					END
				END
				WHEN 12 THEN 
				CASE
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1YEAR')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE4')*a.balance/100
					END
				END
			END
		) AS user_bonus_balance 
	from bs_sub_account a,bs_account b,bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d 
	where a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id 
	and a.account_id = b.id and b.user_id = c.id
	and a.interest_begin_date >= '2016-2-2' and a.interest_begin_date &lt;=  #{endTime} 
	and ((a.interest_begin_date in(SUBDATE(#{endTime},30),SUBDATE(#{endTime},60),
		SUBDATE(#{endTime},90),SUBDATE(#{endTime},120),SUBDATE(#{endTime},150),SUBDATE(#{endTime},180),
		SUBDATE(#{endTime},210),SUBDATE(#{endTime},240),SUBDATE(#{endTime},270),
		SUBDATE(#{endTime},300),SUBDATE(#{endTime},330),SUBDATE(#{endTime},365)) and d.term >0)
		or (a.interest_begin_date = SUBDATE(#{endTime}, 7) and d.term = - 7)
		)
	LIMIT #{start}, #{pageSize}
  </select>
  
  
   <select id="countFinancialAccount3Day" resultType="java.lang.Integer" parameterType="java.util.Map">
   select count(*) from (select a.id sub_account_id,c.mobile,c.user_name, d.term, d.base_rate, a.balance 
   from bs_sub_account a,bs_account b,bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d 
	where a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id 
	and a.account_id = b.id and b.user_id = c.id
	and a.interest_begin_date >= '2016-2-2' and a.interest_begin_date &lt;=  #{endTime} 
	and ((a.interest_begin_date in(SUBDATE(#{endTime},30),SUBDATE(#{endTime},60),
		SUBDATE(#{endTime},90),SUBDATE(#{endTime},120),SUBDATE(#{endTime},150),SUBDATE(#{endTime},180),
		SUBDATE(#{endTime},210),SUBDATE(#{endTime},240),SUBDATE(#{endTime},270),
		SUBDATE(#{endTime},300),SUBDATE(#{endTime},330),SUBDATE(#{endTime},365)) and d.term >0 )
		or (a.interest_begin_date = SUBDATE(#{endTime}, 7) and d.term = - 7)
		)
	)t 
   </select>
   
   <select id="sumInvestAmountDay3" resultType="java.lang.Double" parameterType="java.util.Map">
  	select sum(balance) from(select a.id , a.balance 
	from bs_sub_account a,bs_account b,bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d 
	where a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id 
	and a.account_id = b.id and b.user_id = c.id
	and a.interest_begin_date >= '2016-2-2' and a.interest_begin_date &lt;=  #{endTime} 
	and ((a.interest_begin_date in(SUBDATE(#{endTime},30),SUBDATE(#{endTime},60),
		SUBDATE(#{endTime},90),SUBDATE(#{endTime},120),SUBDATE(#{endTime},150),SUBDATE(#{endTime},180),
		SUBDATE(#{endTime},210),SUBDATE(#{endTime},240),SUBDATE(#{endTime},270),
		SUBDATE(#{endTime},300),SUBDATE(#{endTime},330),SUBDATE(#{endTime},365)) and d.term >0 )
		or (a.interest_begin_date = SUBDATE(#{endTime}, 7) and d.term = - 7)
		)
	)t 
  </select>

  <select id="sumReturnAmountDay3" resultType="java.lang.Double" parameterType="java.util.Map">
  	select sum(dafy_return_balance) from(select a.id , a.balance,
	CASE when d.term = -7 and a.last_finish_interest_date = #{endTime} then 7 else
		CASE when d.term = 12 and a.last_finish_interest_date = #{endTime} then 35 else 30 end 
	end as need_interest_days,
	CASE
 WHEN d.`code` IN ('1413','1411','1412','1414') THEN
 CASE when d.term = -7 and a.last_finish_interest_date = #{endTime} then 7*a.balance*0.2/365 else
		CASE when d.term = 12 and a.last_finish_interest_date = #{endTime}
			then 35*a.balance*0.2/365 else 30*a.balance*0.2/365 end
	end
  WHEN SUBSTR(d.`code`,1,2) IN('24') THEN
  CASE when d.term = -7 and a.last_finish_interest_date = #{endTime} then 7*a.balance*0.18/365 else
      CASE when d.term = 12 and a.last_finish_interest_date = #{endTime}
          then 35*a.balance*0.18/365 else 30*a.balance*0.18/365 end
  end
 ELSE
 CASE when d.term = -7 and a.last_finish_interest_date = #{endTime} then 7*a.balance*0.2/365 else
		CASE when d.term = 12 and a.last_finish_interest_date = #{endTime}
			then 35*a.balance*0.24/365 else 30*a.balance*0.24/365 end
	end
END as dafy_return_balance
	from bs_sub_account a,bs_account b,bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d 
	where a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id 
	and a.account_id = b.id and b.user_id = c.id
	and a.interest_begin_date >= '2016-2-2' and a.interest_begin_date &lt;=  #{endTime} 
	and ((a.interest_begin_date in(SUBDATE(#{endTime},30),SUBDATE(#{endTime},60),
		SUBDATE(#{endTime},90),SUBDATE(#{endTime},120),SUBDATE(#{endTime},150),SUBDATE(#{endTime},180),
		SUBDATE(#{endTime},210),SUBDATE(#{endTime},240),SUBDATE(#{endTime},270),
		SUBDATE(#{endTime},300),SUBDATE(#{endTime},330),SUBDATE(#{endTime},365)) and d.term >0 )
		or (a.interest_begin_date = SUBDATE(#{endTime}, 7) and d.term = - 7)
		)
	)t 
  </select>
  
  <!-- 3.0删选条件精确到月 -->
  <select id="selectFinancialAccount3Month" resultMap="FinancialAccountVOResultMap" parameterType="java.util.Map">
  select *,
CASE
 WHEN t.`code` IN ('1413','1411','1412','1414') THEN
   CASE WHEN term = 7 THEN need_interest_days*balance*0.2/365 ELSE
    need_interest_days*balance*0.2/365 END
	WHEN SUBSTR(t.`code`,1,2) IN('24') THEN
   CASE WHEN term = 7 THEN need_interest_days*balance*0.18/365 ELSE
    need_interest_days*balance*0.18/365 END
 ELSE
  CASE WHEN term = 7 THEN need_interest_days*balance*0.2/365 ELSE
  need_interest_days*balance*0.24/365 END
END
 as dafy_return_balance,

need_interest_days*balance*base_rate/36500 as user_interest_balance
from (select a.id sub_account_id,c.mobile,c.user_name,  d.`code`,
CASE WHEN d.term &lt; 0 THEN ABS(d.term) ELSE d.term END AS term, d.base_rate,
a.balance,CASE a.`status`
		WHEN 2 THEN '投资中' WHEN 5 THEN '已结算'
		WHEN 7 THEN '结算中'END AS `status` ,
(CASE WHEN d.term = -7 and a.last_finish_interest_date>=#{endTime} and a.last_finish_interest_date &lt;= (SELECT LAST_DAY(#{endTime})FROM DUAL)
	THEN 7 ELSE
	CASE WHEN  a.last_finish_interest_date>=#{endTime} and a.last_finish_interest_date&lt;= (SELECT LAST_DAY(#{endTime})FROM DUAL)
		THEN
			CASE WHEN d.term = 12 THEN 35 
				ELSE CASE WHEN (SELECT day(LAST_DAY(#{endTime})))= 31
						THEN CASE WHEN a.last_finish_interest_date = (SELECT LAST_DAY(#{endTime})FROM DUAL) 
									THEN CASE WHEN d.term =1 THEN 30 ELSE 60 END
									ELSE 30 END
						ELSE 30 END
			END
		ELSE
			CASE WHEN ADDDATE(a.interest_begin_date ,30) = #{endTime} OR ADDDATE(a.interest_begin_date ,60) = #{endTime}
							OR ADDDATE(a.interest_begin_date ,90) = #{endTime} OR ADDDATE(a.interest_begin_date ,120) = #{endTime}
							OR ADDDATE(a.interest_begin_date ,150) = #{endTime} OR ADDDATE(a.interest_begin_date ,180) = #{endTime}
							OR ADDDATE(a.interest_begin_date ,210) = #{endTime} OR ADDDATE(a.interest_begin_date ,240) = #{endTime}
							OR ADDDATE(a.interest_begin_date ,270) = #{endTime} OR ADDDATE(a.interest_begin_date ,300) = #{endTime}
							OR ADDDATE(a.interest_begin_date ,330) = #{endTime} THEN 
							CASE WHEN (SELECT day(LAST_DAY(#{endTime})))=31 THEN 60 ELSE 30 END
					WHEN (ADDDATE(a.interest_begin_date ,30) > #{endTime} AND ADDDATE(a.interest_begin_date ,30)&lt;(SELECT LAST_DAY(#{endTime})FROM DUAL)) 
							OR ADDDATE(a.interest_begin_date ,60) > #{endTime} OR ADDDATE(a.interest_begin_date ,90) > #{endTime}
							OR ADDDATE(a.interest_begin_date ,120) > #{endTime} OR ADDDATE(a.interest_begin_date ,150) > #{endTime}
							OR ADDDATE(a.interest_begin_date ,180) > #{endTime} OR ADDDATE(a.interest_begin_date ,210) > #{endTime}
							OR ADDDATE(a.interest_begin_date ,240) > #{endTime} OR ADDDATE(a.interest_begin_date ,270) > #{endTime}
							OR ADDDATE(a.interest_begin_date ,300) > #{endTime} OR ADDDATE(a.interest_begin_date ,330) > #{endTime}
					THEN 30
			END
		END
	END
)as need_interest_days,a.open_time, a.interest_begin_date, a.last_finish_interest_date as return_money_days,
e.agent_name , (
			CASE d.term
				WHEN -7 THEN 
				CASE 
					WHEN agent_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_7DAY')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE_7DAY')*a.balance/100
					END
				END
				WHEN 1 THEN 
				CASE 
					WHEN agent_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1MONTH')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE2')*a.balance/100
					END
				END
				WHEN 3 THEN 
				CASE 
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_3MONTH')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE')*a.balance/100
					END
				END
				WHEN 6 THEN 
				CASE 
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_6MONTH')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0		
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE3')*a.balance/100
					END
				END
				WHEN 12 THEN 
				CASE
					WHEN recommend_id = 31 THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1YEAR')*a.balance/100
					ELSE CASE WHEN recommend_id IS NULL THEN 0
						ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE4')*a.balance/100
					END
				END
			END
		) AS user_bonus_balance
	from bs_sub_account a,bs_account b,bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d 
	where a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id and
a.account_id = b.id and b.user_id = c.id and 
a.interest_begin_date >= '2016-2-2' and (
	(a.interest_begin_date &lt;= SUBDATE((SELECT LAST_DAY(#{endTime})FROM DUAL),30) and d.term >0) 
  or(a.interest_begin_date &lt;= SUBDATE((SELECT LAST_DAY(#{endTime})FROM DUAL),7) and d.term = -7) )
and a.last_finish_interest_date >= #{endTime} 
ORDER BY term,a.interest_begin_date LIMIT #{start}, #{pageSize})t;
  </select>
  
  
   <select id="countFinancialAccount3Month" resultType="java.lang.Integer" parameterType="java.util.Map">
  select count(*) from(select a.id sub_account_id from bs_sub_account a,bs_account b,bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d 
	where a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id and
	a.account_id = b.id and b.user_id = c.id and 
	a.interest_begin_date >= '2016-2-2' and (
		(a.interest_begin_date &lt;= SUBDATE((SELECT LAST_DAY(#{endTime})FROM DUAL),30) and d.term >0) 
  	  or(a.interest_begin_date &lt;= SUBDATE((SELECT LAST_DAY(#{endTime})FROM DUAL),7) and d.term = -7) ) 
	and a.last_finish_interest_date >= #{endTime})t 
   </select>
   
   <select id="sumInvestAmountMonth3" resultType="java.lang.Double" parameterType="java.util.Map">
   	select sum(a.balance)
	from bs_sub_account a,bs_account b,bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d 
	where a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id and
	a.account_id = b.id and b.user_id = c.id and 
	a.interest_begin_date >= '2016-2-2' and (
		(a.interest_begin_date &lt;= SUBDATE((SELECT LAST_DAY(#{endTime})FROM DUAL),30) and d.term >0) 
  	  or(a.interest_begin_date &lt;= SUBDATE((SELECT LAST_DAY(#{endTime})FROM DUAL),7) and d.term = -7) ) 
	and a.last_finish_interest_date >= #{endTime}
  </select>

  <select id="sumReturnAmountMonth3" resultType="java.lang.Double" parameterType="java.util.Map">
  	select sum(dafy_return_balance) from(
		select *,
CASE
 WHEN t.`code` IN ('1413','1411','1412','1414') THEN
 CASE WHEN term = 7 THEN need_interest_days*balance*0.2/365 ELSE
		need_interest_days*balance*0.24/365 END
 WHEN SUBSTR(t.`code`,1,2) IN('24') THEN
 CASE WHEN term = 7 THEN need_interest_days*balance*0.18/365 ELSE
  need_interest_days*balance*0.18/365 END
 ELSE
 CASE WHEN term = 7 THEN need_interest_days*balance*0.2/365 ELSE
		need_interest_days*balance*0.24/365 END
END  as dafy_return_balance

		from (select a.id sub_account_id,c.mobile,c.user_name, d.code,
		CASE WHEN d.term &lt; 0 THEN ABS(d.term) ELSE d.term END AS term, d.base_rate,  
		a.balance,
		(CASE WHEN d.term = -7 and a.last_finish_interest_date>=#{endTime} and a.last_finish_interest_date &lt;= (SELECT LAST_DAY(#{endTime})FROM DUAL)
		THEN 7 ELSE
			CASE WHEN  a.last_finish_interest_date>=#{endTime} and a.last_finish_interest_date&lt;= (SELECT LAST_DAY(#{endTime})FROM DUAL)
			THEN
				CASE WHEN d.term = 12 THEN 35 
					ELSE CASE WHEN (SELECT day(LAST_DAY(#{endTime})))= 31
							THEN CASE WHEN a.last_finish_interest_date = (SELECT LAST_DAY(#{endTime})FROM DUAL) 
										THEN CASE WHEN d.term =1 THEN 30 ELSE 60 END
										ELSE 30 END
							ELSE 30 END
				END
			ELSE
				CASE WHEN ADDDATE(a.interest_begin_date ,30) = #{endTime} OR ADDDATE(a.interest_begin_date ,60) = #{endTime}
					OR ADDDATE(a.interest_begin_date ,90) = #{endTime} OR ADDDATE(a.interest_begin_date ,120) = #{endTime}
					OR ADDDATE(a.interest_begin_date ,150) = #{endTime} OR ADDDATE(a.interest_begin_date ,180) = #{endTime}
					OR ADDDATE(a.interest_begin_date ,210) = #{endTime} OR ADDDATE(a.interest_begin_date ,240) = #{endTime}
					OR ADDDATE(a.interest_begin_date ,270) = #{endTime} OR ADDDATE(a.interest_begin_date ,300) = #{endTime}
					OR ADDDATE(a.interest_begin_date ,330) = #{endTime} THEN 
					CASE WHEN (SELECT day(LAST_DAY(#{endTime})))=31 THEN 60 ELSE 30 END
				WHEN (ADDDATE(a.interest_begin_date ,30) > #{endTime} AND ADDDATE(a.interest_begin_date ,30)&lt;(SELECT LAST_DAY(#{endTime})FROM DUAL)) 
					OR ADDDATE(a.interest_begin_date ,60) > #{endTime} OR ADDDATE(a.interest_begin_date ,90) > #{endTime}
					OR ADDDATE(a.interest_begin_date ,120) > #{endTime} OR ADDDATE(a.interest_begin_date ,150) > #{endTime}
					OR ADDDATE(a.interest_begin_date ,180) > #{endTime} OR ADDDATE(a.interest_begin_date ,210) > #{endTime}
					OR ADDDATE(a.interest_begin_date ,240) > #{endTime} OR ADDDATE(a.interest_begin_date ,270) > #{endTime}
					OR ADDDATE(a.interest_begin_date ,300) > #{endTime} OR ADDDATE(a.interest_begin_date ,330) > #{endTime}
				THEN 30
			END
		END
	END
)as need_interest_days,a.open_time, a.interest_begin_date,e.agent_name 
	from bs_sub_account a,bs_account b,bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d 
	where a.product_type = 'REG' AND a.`status` IN(2,5,7) AND d.id = a.product_id and
	a.account_id = b.id and b.user_id = c.id and 
	a.interest_begin_date >= '2016-2-2' and (
		(a.interest_begin_date &lt;= SUBDATE((SELECT LAST_DAY(#{endTime})FROM DUAL),30) and d.term >0) 
  	  or(a.interest_begin_date &lt;= SUBDATE((SELECT LAST_DAY(#{endTime})FROM DUAL),7) and d.term = -7) ) 
	and a.last_finish_interest_date >= #{endTime} )t
)tt
  </select>
  
  <!-- 
  	财务对账结束
  -->
  <select id="sumTotalInvestAmountFinancialAccount1" resultType="java.lang.Double" parameterType="java.util.Map">
  	SELECT SUM(a.balance) FROM bs_sub_account a 
	WHERE a.product_type = 'REG' AND a.`status` IN(2,5,7)
	AND a.interest_begin_date &lt; '2015-12-2 00:00:00'
  </select>
  
  
  <!-- 销售应收查询开始 -->
  <resultMap id="SaleReceivableVOResultMap" type="com.pinting.business.model.vo.SaleReceivableVO" >
    <result column="sub_account_id" property="bsSubAccountId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="term" property="term" jdbcType="INTEGER" />
    <result column="interest_days" property="interestDays" jdbcType="INTEGER" />
    <result column="base_rate" property="baseRate" jdbcType="DOUBLE" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="open_time" property="openTime" jdbcType="DATE" />
    <result column="interest_begin_date" property="interestBeginDate" jdbcType="DATE" />
    <result column="last_finish_interest_date" property="lastFinishInterestDate" jdbcType="DATE" />
    <result column="agent_name" property="agentName" jdbcType="VARCHAR" />
    <result column="total_interest_amount" property="totalInterestAmount" jdbcType="DOUBLE" />
    <result column="user_interest_amount" property="userInterestAmount" jdbcType="DOUBLE" />
    <result column="user_bonus_balance" property="userBonusBalance" jdbcType="DOUBLE" />
  </resultMap>

  <select id="selectSaleReceivables" resultMap="SaleReceivableVOResultMap" parameterType="java.util.Map">
    SELECT * FROM (
    SELECT a.id AS sub_account_id, c.id AS user_id, c.mobile, c.user_name, d.term,
    CASE
    WHEN d.term = 12 THEN 365
    WHEN d.term > 0 AND d.term != 12 THEN d.term*30
    WHEN d.term &lt; 0 THEN -d.term
    END AS interest_days, d.base_rate, a.balance,
    CASE a.`status`
    WHEN 2 THEN '投资中'
    WHEN 5 THEN '已结算'
    WHEN 7 THEN '结算中'
    END AS `status`, a.open_time, a.interest_begin_date, a.last_finish_interest_date, e.agent_name,
    CASE
    WHEN d.`code` IN ('1413','1411','1412','1414') AND h.property_symbol = 'YUN_DAI' THEN
    CASE d.term
    WHEN 1 THEN a.balance * 0.2 * 30 / 365
    WHEN 3 THEN a.balance * 0.2 * 90 / 365
    WHEN 6 THEN a.balance * 0.2 * 180 / 365
    WHEN 12 THEN a.balance * 0.2
    WHEN -7 THEN a.balance * 0.20 * 7 / 365
    END
    WHEN SUBSTR(d.`code`,1,2) IN('24') AND h.property_symbol = '7_DAI' THEN
    CASE d.term
    WHEN 1 THEN a.balance * 0.18 * 30 / 365
    WHEN 3 THEN a.balance * 0.18 * 90 / 365
    WHEN 6 THEN a.balance * 0.18 * 180 / 365
    WHEN 12 THEN a.balance * 0.18
    WHEN -7 THEN a.balance * 0.20 * 7 / 365
    END
    ELSE
    CASE d.term
    WHEN 1 THEN a.balance * 0.24 * 30 / 365
    WHEN 3 THEN a.balance * 0.24 * 90 / 365
    WHEN 6 THEN a.balance * 0.24 * 180 / 365
    WHEN 12 THEN a.balance * 0.24
    WHEN -7 THEN a.balance * 0.20 * 7 / 365
    END
    END
    AS total_interest_amount,
    CASE
    WHEN d.term > 0 AND d.term != 12 THEN a.balance * d.base_rate * d.term * 30 / 365 / 100
    WHEN d.term = 12 THEN a.balance * d.base_rate / 100
    WHEN d.term &lt; 0 THEN -d.term * a.balance * d.base_rate / 365 / 100

    END AS user_interest_amount,
    CASE d.term
    WHEN 1 THEN
    CASE
    WHEN f.grant_type = 'RECOMMEND_USER_TAKE_ALL' THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE2')*a.balance/100
    ELSE
    CASE agent_id
    WHEN 31 THEN
    (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1MONTH')*a.balance/100
    ELSE
    CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE2')*a.balance/100
    END
    END
    END
    WHEN 3 THEN
    CASE
    WHEN f.grant_type = 'RECOMMEND_USER_TAKE_ALL' THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE')*a.balance/100
    ELSE
    CASE agent_id
    WHEN 31 THEN
    (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_3MONTH')*a.balance/100
    ELSE
    CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE')*a.balance/100
    END
    END
    END
    WHEN 6 THEN
    CASE
    WHEN f.grant_type = 'RECOMMEND_USER_TAKE_ALL' THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE3')*a.balance/100
    ELSE
    CASE agent_id
    WHEN 31 THEN
    (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_6MONTH')*a.balance/100
    ELSE
    CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE3')*a.balance/100
    END
    END
    END
    WHEN 12 THEN
    CASE
    WHEN f.grant_type = 'RECOMMEND_USER_TAKE_ALL' THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE4')*a.balance/100
    ELSE
    CASE agent_id
    WHEN 31 THEN
    (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_1YEAR')*a.balance/100
    ELSE
    CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE4')*a.balance/100
    END
    END
    END
    WHEN -7 THEN
    CASE
    WHEN f.grant_type = 'RECOMMEND_USER_TAKE_ALL' THEN (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE_7DAY')*a.balance/100
    ELSE
    CASE agent_id
    WHEN 31 THEN
    (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'BONUS_RATE_4_SELF_7DAY')*a.balance/100
    ELSE
    CASE WHEN recommend_id IS NULL THEN 0
    ELSE (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'PUSH_MONEY_RATE_7DAY')*a.balance/100
    END
    END
    END
    END AS user_bonus_balance
    FROM
    bs_account b, bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d LEFT JOIN bs_property_info h ON d.property_id = h.id,
    bs_sub_account a LEFT JOIN bs_bonus_grant_plan f ON f.sub_account_id = a.id
    WHERE a.product_type = 'REG' AND a.`status` IN(2,5,7)
    AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
    ) AS aaa
    WHERE 1=1
    <if test="startTime != null and startTime !=''">
      and DATE(aaa.last_finish_interest_date) &gt;= #{startTime}
    </if>
    <if test="startTime != null and startTime !=''">
      and DATE(aaa.last_finish_interest_date) &lt;= #{endTime}
    </if>
    <!-- DATE(aaa.last_finish_interest_date) >= #{startTime} AND DATE(aaa.last_finish_interest_date) &lt;= #{endTime} -->
    LIMIT #{start}, #{numPerPage}
  </select>
  
  <select id="countSaleReceivables" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT COUNT(*) FROM (
  		SELECT a.last_finish_interest_date
		FROM 
			bs_account b, bs_user c LEFT JOIN bs_agent e ON e.id = c.agent_id, bs_product d,
			bs_sub_account a LEFT JOIN bs_bonus_grant_plan f ON f.sub_account_id = a.id
		WHERE a.product_type = 'REG' AND a.`status` IN(2,5,7)
		AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
  	) AS aaa
  	where 1=1
  	<if test="startTime != null and startTime !=''">
		and DATE(aaa.last_finish_interest_date) &gt;= #{startTime}
	</if>
	<if test="startTime != null and startTime !=''">
		and DATE(aaa.last_finish_interest_date) &lt;= #{endTime}
	</if>
	<!-- <if test="type == 'day'">
		WHERE DATE(aaa.last_finish_interest_date) = #{startTime}
	</if>
	<if test="type == 'month'">
		WHERE DATE(aaa.last_finish_interest_date) >= #{startTime} AND DATE(aaa.last_finish_interest_date) &lt; #{endTime}
	</if>
	<if test="type == 'year'">
		WHERE YEAR(aaa.last_finish_interest_date) = #{startTime}
	</if> -->
  </select>
  <!-- 销售应收查询结束 -->
  
  <!-- 销售渠道结算查询开始 -->
  <resultMap id="SaleAgentDataVOResultMap" type="com.pinting.business.model.vo.SaleAgentDataVO" >
    <result column="agent_id" property="agentId" jdbcType="INTEGER" />
    <result column="agent_name" property="agentName" jdbcType="VARCHAR" />
    <result column="term" property="term" jdbcType="INTEGER" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
    <result column="base_rate" property="baseRate" jdbcType="DOUBLE" />
    <result column="cp" property="cp" jdbcType="DOUBLE" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
  </resultMap>
  
  <select id="selectSaleAgentData" resultMap="SaleAgentDataVOResultMap" parameterType="java.util.Map">
   SELECT d.id AS agent_id, d.agent_name, e.term, (a.open_balance + ifnull(g.open_balance, 0)) as balance,
    ROUND(CASE
      WHEN e.term > 0 AND e.term != 12 THEN (a.open_balance + ifnull(g.open_balance, 0)) * e.term * 30 / 365
      WHEN e.term = 12 THEN (a.open_balance + ifnull(g.open_balance, 0)) * 365 / 365
      WHEN e.term &lt; 0 THEN -e.term * (a.open_balance + ifnull(g.open_balance, 0)) / 365
      END, 2) AS cp, e.`name` AS product_name, e.base_rate
	FROM bs_sub_account a LEFT JOIN bs_sub_account_pair f ON a.id = f.auth_account_id LEFT JOIN bs_sub_account g ON f.red_account_id = g.id
      , bs_account b, bs_user c LEFT JOIN bs_agent d ON d.id = c.agent_id, bs_product e
	WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_id = e.id AND a.product_type IN ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'AUTH_FREE')
      AND a.`status` NOT IN(1,6)
	<if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
		AND DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime})
	</if>
	<if test="agentId != null">
		AND c.agent_id = #{agentId}
	</if>
	LIMIT #{start}, #{numPerPage}
  </select>
  <select id="countSaleAgentData" resultType="java.lang.Integer" parameterType="java.util.Map">
  	SELECT count(a.id)
	FROM bs_sub_account a, bs_account b, bs_user c LEFT JOIN bs_agent d ON d.id = c.agent_id, bs_product e
	WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_id = e.id AND a.product_type IN ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'AUTH_FREE') AND a.`status` NOT IN(1,6)
	<if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
		AND DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime})
	</if>
	<if test="agentId != null">
		AND c.agent_id = #{agentId}
	</if>
  </select>
  <!-- 销售渠道结算查询结束 -->
  
    <select id="sumCPSaleAgentData" resultType="java.lang.Double" parameterType="java.util.Map">
	SELECT sum(toatlCp.cp) FROM (
	SELECT 
	CASE e.term
		WHEN 1 THEN a.open_balance * 30 / 365
		WHEN 3 THEN a.open_balance * 90 / 365
		WHEN 6 THEN a.open_balance * 180 / 365
		WHEN 12 THEN a.open_balance * 365 / 365
	END AS cp
	FROM bs_sub_account a, bs_account b, bs_user c LEFT JOIN bs_agent d ON d.id = c.agent_id, bs_product e
	WHERE a.account_id = b.id AND b.user_id = c.id AND a.product_id = e.id AND a.product_type IN ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'RED', 'RED_ZSD', 'RED_7', 'AUTH_FREE', 'RED_FREE') AND a.`status` NOT IN(1,6)
	<if test="startTime != null and startTime != '' and endTime != null and endTime != ''">
		AND DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime})
	</if>
	<if test="agentId != null">
		AND c.agent_id = #{agentId}
	</if>
	) as toatlCp
	
  </select>
  
    
    <!-- 
   	   查询希财渠道用户投资总金额
    -->
  	<select id="countCsaiUserBuyAccount" resultType="java.lang.Double" parameterType="java.util.Map"  >
		SELECT sum(s.balance) 
		FROM bs_sub_account s
		LEFT JOIN bs_account a ON s.account_id = a.id
		LEFT JOIN bs_user u ON a.user_id = u.id
		WHERE s.product_type = 'REG'  
		AND  s.status IN (2,3,4,5,7)
		AND  u.agent_id = #{agentId}
		AND  s.product_id = #{productId}
  	</select>
  	
  	<!-- 
   	   查询希财渠道投资的用户总数
    -->
  	<select id="countCsaiBuyUser" resultType="java.lang.Integer" parameterType="java.util.Map"  >
		SELECT COUNT(*)  FROM (
		SELECT  sum(s.balance)  FROM  bs_user u 
		LEFT JOIN bs_account a ON  u.id  = a.user_id        
		LEFT JOIN bs_sub_account s ON   a.id= s.account_id 
		WHERE s.product_type = 'REG'  
		AND  s.status IN (2,3,4,5,7)
		AND  u.agent_id = #{agentId}
		AND  s.product_id = #{productId}
		GROUP BY u.id ) user_buy_count
  	</select>
  	
  	<!-- 
   	   统计投资用户、投资金额、成交笔数、年化金额
   	 @author yanwl
   	 @date 2016-03-22
    -->
  	<select id="statisticSubAccount" parameterType="java.util.Map" resultType="java.util.Map" >
  		select tab1.tDealCount,tab2.newDealCount,tab3.tInvestAmount,tab4.newInvestAmount,
  		tab5.tInvestUserCount,tab6.newInvestUserCount,tab7.t1MonthAmount,tab8.t3MonthAmount,
  		tab9.t6MonthAmount,tab10.t1YearAmount,tab11.new1MonthAmount,tab12.new3MonthAmount,
  		tab13.new6MonthAmount,tab14.new1YearAmount,tab15.t7DayAmount,tab16.new7DayAmount
  		from 
  		(select count(*) as tDealCount from bs_sub_account s1 where s1.product_type in ('REG','AUTH_YUN','AUTH_7', 'AUTH_FREE') and s1.status in (2,5,7) and s1.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d')) tab1,
  		(select count(*) as newDealCount from bs_sub_account s2,bs_account a2,bs_user u2 
  		 where s2.account_id = a2.id and a2.user_id = u2.id and DATE_FORMAT(u2.first_buy_time,'%Y-%m-%d') = DATE_SUB(DATE_FORMAT(#{todayTime},'%Y-%m-%d'),INTERVAL 1 day)
  		 and s2.product_type in ('REG','AUTH_YUN','AUTH_7', 'AUTH_FREE') and s2.status in (2,5,7) and s2.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d')
  		 ) tab2,
  		(select IFNULL(sum(s3.open_balance),0) as tInvestAmount from bs_sub_account s3 where s3.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and s3.status in (2,5,7) and s3.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d')) tab3,
  		(select IFNULL(sum(s4.open_balance),0) as newInvestAmount from bs_sub_account s4,bs_account a4,bs_user u4 
  		 where s4.account_id = a4.id and a4.user_id = u4.id and DATE_FORMAT(u4.first_buy_time,'%Y-%m-%d') = DATE_SUB(DATE_FORMAT(#{todayTime},'%Y-%m-%d'),INTERVAL 1 day)
  		 and s4.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and s4.status in (2,5,7) and s4.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d')
  		) tab4,
  		( select count(*) as tInvestUserCount from ( select s5.account_id from bs_sub_account s5 where s5.product_type in ('REG','AUTH_YUN','AUTH_7', 'AUTH_FREE') and s5.status in (2,5,7) and s5.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') group by s5.account_id ) a) tab5,
  		( select count(*) as newInvestUserCount from ( 
  			select s6.account_id from bs_sub_account s6,bs_account a6,bs_user u6  
  			where s6.account_id = a6.id and a6.user_id = u6.id and DATE_FORMAT(u6.first_buy_time,'%Y-%m-%d') = DATE_SUB(DATE_FORMAT(#{todayTime},'%Y-%m-%d'),INTERVAL 1 day)
  			and s6.product_type in ('REG','AUTH_YUN','AUTH_7', 'AUTH_FREE') and s6.status in (2,5,7) and s6.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') group by s6.account_id ) b
  		) tab6,
  		(select IFNULL(sum(sb1.open_balance),0) as t1MonthAmount  from bs_sub_account sb1,bs_product p1 where sb1.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb1.status in (2,5,7) 
  			and sb1.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') and sb1.product_id = p1.id and p1.term = 1
  		) tab7,
  		(select IFNULL(sum(sb2.open_balance),0) as t3MonthAmount from bs_sub_account sb2,bs_product p2 where sb2.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb2.status in (2,5,7) 
  			and sb2.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') and sb2.product_id = p2.id and p2.term = 3
  		) tab8,
  		(select IFNULL(sum(sb3.open_balance),0) as t6MonthAmount from bs_sub_account sb3,bs_product p3 where sb3.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb3.status in (2,5,7) 
  			and sb3.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') and sb3.product_id = p3.id and p3.term = 6
  		) tab9,
  		(select IFNULL(sum(sb4.open_balance),0) as t1YearAmount from bs_sub_account sb4,bs_product p4 where sb4.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb4.status in (2,5,7) 
  			and sb4.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') and sb4.product_id = p4.id and p4.term = 12
  		) tab10,
  		(select IFNULL(sum(sb5.open_balance),0) as new1MonthAmount from bs_sub_account sb5,bs_product p5,bs_account ba5,bs_user bu5
  		 where sb5.account_id = ba5.id and ba5.user_id = bu5.id and DATE_FORMAT(bu5.first_buy_time,'%Y-%m-%d') = DATE_SUB(DATE_FORMAT(#{todayTime},'%Y-%m-%d'),INTERVAL 1 day)
  		 and sb5.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb5.status in (2,5,7) and sb5.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') 
  		 and sb5.product_id = p5.id and p5.term = 1
  		) tab11,
  		(select IFNULL(sum(sb6.open_balance),0) as new3MonthAmount from bs_sub_account sb6,bs_product p6,bs_account ba6,bs_user bu6
  		 where sb6.account_id = ba6.id and ba6.user_id = bu6.id and DATE_FORMAT(bu6.first_buy_time,'%Y-%m-%d') = DATE_SUB(DATE_FORMAT(#{todayTime},'%Y-%m-%d'),INTERVAL 1 day)
  		 and sb6.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb6.status in (2,5,7) and sb6.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') 
  		 and sb6.product_id = p6.id and p6.term = 3
  		) tab12,
  		(select IFNULL(sum(sb7.open_balance),0) as new6MonthAmount from bs_sub_account sb7,bs_product p7,bs_account ba7,bs_user bu7
  		 where sb7.account_id = ba7.id and ba7.user_id = bu7.id and DATE_FORMAT(bu7.first_buy_time,'%Y-%m-%d') = DATE_SUB(DATE_FORMAT(#{todayTime},'%Y-%m-%d'),INTERVAL 1 day)
  		 and sb7.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb7.status in (2,5,7) and sb7.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') 
  		 and sb7.product_id = p7.id and p7.term = 6
  		) tab13,
  		(select IFNULL(sum(sb8.open_balance),0) as new1YearAmount from bs_sub_account sb8,bs_product p8,bs_account ba8,bs_user bu8
  		 where sb8.account_id = ba8.id and ba8.user_id = bu8.id and DATE_FORMAT(bu8.first_buy_time,'%Y-%m-%d') = DATE_SUB(DATE_FORMAT(#{todayTime},'%Y-%m-%d'),INTERVAL 1 day)
  		 and sb8.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb8.status in (2,5,7) and sb8.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') 
  		 and sb8.product_id = p8.id and p8.term = 12
  		) tab14,
  		(select IFNULL(sum(sb9.open_balance),0) as t7DayAmount from bs_sub_account sb9,bs_product p9 where sb9.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb9.status in (2,5,7) 
  			and sb9.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') and sb9.product_id = p9.id and p9.term = -7
  		) tab15,
  		(select IFNULL(sum(sb10.open_balance),0) as new7DayAmount from bs_sub_account sb10,bs_product p10,bs_account ba10,bs_user bu10
  		 where sb10.account_id = ba10.id and ba10.user_id = bu10.id and DATE_FORMAT(bu10.first_buy_time,'%Y-%m-%d') = DATE_SUB(DATE_FORMAT(#{todayTime},'%Y-%m-%d'),INTERVAL 1 day)
  		 and sb10.product_type in ('REG','AUTH_YUN','AUTH_7','RED','RED_7', 'AUTH_FREE', 'RED_FREE') and sb10.status in (2,5,7) and sb10.interest_begin_date = DATE_FORMAT(#{todayTime},'%Y-%m-%d') 
  		 and sb10.product_id = p10.id and p10.term = -7
  		) tab16
  	</select>
  	
  	<!-- 
   	   按月分组查询用户投资总金额
    -->
  	<select id="selectTotalInvestGroupByMonth" resultMap="TotalInvestGroupByMonthMap" parameterType="java.util.Map"  >
		SELECT 
		SUM(a.balance) total_invest,MONTH(DATE_ADD(a.interest_begin_date,INTERVAL -1 DAY)) invest_month  
		FROM bs_sub_account a
		WHERE 
		a.`status` IN (2,3,5,7) AND a.product_type = 'REG'
		AND YEAR(DATE_ADD(a.interest_begin_date,INTERVAL -1 DAY)) = YEAR(NOW())
		GROUP BY MONTH(DATE_ADD(a.interest_begin_date,INTERVAL -1 DAY))
  	</select>
  	
  	
  	    <!-- 
   	   查询用户待获取的收益
    -->
  	<select id="investInterestWill" resultType="java.lang.Double" parameterType="java.util.Map"  >
		SELECT(
			(
					SELECT 
						SUM(
							CASE WHEN  b.term = 12 THEN a.open_balance*b.base_rate/100 
							WHEN  b.term = -7 THEN a.open_balance*b.base_rate*7/36500
							ELSE  a.open_balance*b.base_rate* b.term*30/36500
							END
						)
					FROM 
					bs_sub_account a
					LEFT JOIN bs_product b ON a.product_id = b.id
					WHERE 
					a.`status` IN (2,5,7) AND a.product_type IN ('REG','AUTH_YUN', 'RED','AUTH_ZSD','RED_ZSD', 'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE')
			)+(
			        SELECT
			          SUM(tab.plan_interest)
                    FROM (
                        SELECT
                            IFNULL(c.plan_interest, 0) AS plan_interest
                        FROM bs_sub_account a
                        LEFT JOIN ln_loan_relation b ON a.id = b.bs_sub_account_id
                        LEFT JOIN ln_finance_repay_schedule c ON b.id = c.relation_id
                        WHERE c.`status` IN ('INIT', 'REPAYING', 'REPAIED') AND a.product_type = 'REG_D'
                    ) tab
			)-(
					select sum(total_interest) as totalIncome from bs_user  
			)+IFNULL((
      SELECT SUM(c.amount) FROM bs_bonus_grant_plan c WHERE  c.status = 'INIT'
      ), 0)

		) 
  	</select>
  	
  	
  	
  	<!-- 
   	   按照产品类型查新投资总金额
    -->
  	<select id="investTotalGroupByProduct" resultMap="investTotalGroupByProductMap" parameterType="java.util.Map"  >
			SELECT 
			CASE 
			WHEN a.term = 1 THEN '短期乐' 
			WHEN a.term = 3 THEN '稳定收'
			WHEN a.term = 6 THEN '安心投'
			WHEN a.term = 12 THEN '长安赢'
			END product_name,
			SUM(a.curr_total_amount) invest_total_group_by_product_amount  FROM `bs_product` a
			WHERE a.term != 9
			GROUP BY a.term
  	</select>
  	
  <select id="selectMyInvestment" resultMap="VoResultMap" >
 	 select t.*,rp.amount red_amount from 
        (select
        	b.id id,
        	p.name product_name,
	    	b.balance balance,
	    	b.open_time open_time,
	    	b.interest_begin_date interest_begin_date,
	    	b.status status,
	    	b.product_rate product_rate,
	    	p.id product_id,
	    	p.term term,
	    	p.start_time start_time,
	    	case when term = 12  then (365 - 
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				) 
				when term = -7  then (7 - 
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				else (term * 30 - 
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				) end investDay,
			b.last_finish_interest_date investEndTime,
			o.order_no order_no,
			p.property_type property_type
	    	from bs_sub_account b,bs_account a,bs_product p,bs_pay_orders o
		where
			b.account_id = a.id and b.product_id = p.id and b.status != 1 and b.status != 6 and o.sub_account_id = b.id and
			b.product_type='REG' and (o.trans_type = 'CARD_BUY_PRODUCT' OR o.trans_type = 'BALANCE_BUY_PRODUCT') and
		    a.user_id=#{userId , jdbcType=INTEGER} 
		    <if test="status != null">
		    	and b.status = #{status}
		    </if>
		) t left join (select r.order_no,r.amount from bs_red_packet_info r where r.status = 'USED') rp on t.order_no = rp.order_no 
	 order by t.investEndTime desc , t.open_time desc, t.id desc
     limit #{start , jdbcType=INTEGER}, #{pageSize , jdbcType=INTEGER}
  </select>
  	
  	
  	  	    <!-- 
   	  查询当月累计投资总金额
    -->
  	<select id="investMentOverDateMonth" resultType="java.lang.Double" parameterType="java.util.Map"  >
		SELECT 
		SUM(a.open_balance) total_invest
		FROM bs_sub_account a
		WHERE 
		a.`status` NOT IN (1,6) AND  a.product_type in ('REG', 'AUTH', 'AUTH_YUN', 'AUTH_ZSD', 'RED', 'RED_ZSD', 'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE')
		AND date(a.open_time) &lt; date(#{dateTime})
  	</select>
  
  
  	  <!-- 
   	  按照产品投资期限长短类型查投资总金额
    -->
  	<select id="investTotalGroupByProductTerm" resultMap="investTotalGroupByProductMap" parameterType="java.util.Map"  >
		SELECT 
			CASE 
			WHEN 2>= a.term  THEN '短期计划' 
			WHEN a.term >=3 AND 6>= a.term THEN '中期计划'
			WHEN a.term > 6  THEN '长期计划'
			END product_name,
			SUM(a.curr_total_amount) invest_total_group_by_product_amount  FROM `bs_product` a
			WHERE 1=1 and a.status in (6,7)
			GROUP BY (			CASE 
			WHEN 2>= a.term  THEN '短期计划' 
			WHEN a.term >=3 AND 6>= a.term THEN '中期计划'
			WHEN a.term > 6  THEN '长期计划'
			END )
		ORDER BY a.term
  	</select>
  	
  	
  	 <!-- 
   	  查询投资人性别比例
    -->
  	<select id="investorTypeSex" resultMap="InvestorTypeVOMap" parameterType="java.util.Map"  >
		SELECT 
	COUNT(a.id) investor_type_number,CASE  WHEN SUBSTR(a.id_card,17,1)%2 = 1 THEN '男'
				ELSE  '女'
				END investor_type_name,COUNT(a.id)/(SELECT COUNT(id) FROM bs_bank_card WHERE `status` = 1)*100 investor_type_rate
  FROM bs_bank_card a
WHERE a.`status` = 1
GROUP BY (
CASE  WHEN SUBSTR(a.id_card,17,1)%2 = 1 THEN '男'
				ELSE  '女'
				END )
		
  	</select>
  	
  	
  	  	 <!-- 
   	  查询投资人年龄段比例
    -->
  	<select id="investorTypeAge" resultMap="InvestorTypeVOMap" parameterType="java.util.Map"  >
	SELECT 
	COUNT(a.id) investor_type_number,CASE WHEN 28 >= YEAR(NOW())- SUBSTR(a.id_card,7,4) THEN '18-28岁'
	WHEN YEAR(NOW())- SUBSTR(a.id_card,7,4) >= 29 AND 39>=  YEAR(NOW())- SUBSTR(a.id_card,7,4) THEN '29-39岁'
	WHEN YEAR(NOW())- SUBSTR(a.id_card,7,4) >= 40 AND 50>=  YEAR(NOW())- SUBSTR(a.id_card,7,4) THEN '40-50岁'
	WHEN YEAR(NOW())- SUBSTR(a.id_card,7,4) > 50 THEN '50岁以上'
	END  investor_type_name,COUNT(a.id)/(SELECT COUNT(id) FROM bs_bank_card WHERE `status` = 1)*100 investor_type_rate
  FROM bs_bank_card a
WHERE a.`status` = 1
GROUP BY (CASE WHEN 28 >= YEAR(NOW())- SUBSTR(a.id_card,7,4) THEN '18-28岁'
	WHEN YEAR(NOW())- SUBSTR(a.id_card,7,4) >= 29 AND 39>=  YEAR(NOW())- SUBSTR(a.id_card,7,4) THEN '29-39岁'
	WHEN YEAR(NOW())- SUBSTR(a.id_card,7,4) >= 40 AND 50>=  YEAR(NOW())- SUBSTR(a.id_card,7,4) THEN '40-50岁'
	WHEN YEAR(NOW())- SUBSTR(a.id_card,7,4) > 50 THEN '50岁以上'
	END ) 
		
  	</select>
  	
  	
  <resultMap id="FinancialUserInvestDetailVOMap" type="com.pinting.business.model.vo.FinancialUserInvestDetailVO" >
    <result column="rowno" property="rowno" jdbcType="INTEGER" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
	<result column="balance" property="balance" jdbcType="DOUBLE" />
	<result column="term" property="term" jdbcType="INTEGER" />
    <result column="today_income" property="todayIncome" jdbcType="DOUBLE" />
    <result column="return_day" property="returnDay" jdbcType="TIMESTAMP" />
    <result column="day_num" property="dayNum" jdbcType="INTEGER" />
    <result column="accumulation_inerest" property="accumulationInerest" jdbcType="DOUBLE" />
  </resultMap>
  
  	<select id="selectFinancialUserInvestDetail" resultMap="FinancialUserInvestDetailVOMap" parameterType="java.util.Map"  >
		
  	SELECT
		(@rowNO := @rowNo + 1) rowno,
		t.*,CASE WHEN TO_DAYS(t.return_day) > TO_DAYS(NOW())  AND  TO_DAYS(t.interest_begin_date ) > TO_DAYS(t.return_day)  THEN t.day_income
				ELSE 0 END today_income 
	FROM
		(SELECT @rowNO := 0) b,
		(
				SELECT 
					CONCAT(SUBSTRING(c.mobile FROM 1 FOR 7),"****") mobile,
					c.user_name,
					e.`name` product_name,
					a.balance,
					CASE WHEN e.term > 0 AND e.term =12 THEN 365
						 WHEN e.term > 0 AND e.term != 12 THEN 30*e.term
						 WHEN e.term &lt;0 THEN -e.term END term,
					a.balance*(e.base_rate/100)/365 day_income,
					a.interest_begin_date,
					CASE WHEN e.term &lt; 0 AND e.term THEN
					DATE_ADD(a.interest_begin_date,INTERVAL -e.term DAY) 
					WHEN e.term > 0 AND e.term = 12 THEN DATE_ADD(a.interest_begin_date,INTERVAL 365 DAY) 
					WHEN e.term > 0 AND e.term != 12 THEN DATE_ADD(a.interest_begin_date,INTERVAL e.term*30 DAY) END
					return_day,
					DATEDIFF(NOW(),a.open_time) day_num,
					a.accumulation_inerest
					FROM 
				bs_sub_account a,
				bs_account b ,
				bs_user c,
				bs_product e
				WHERE 
				a.account_id = b.id
				AND b.user_id = c.id
				AND a.product_id = e.id
				AND a.id = #{subAccountId}
		) t
  	</select>
  	
  	
  	
  <resultMap id="FinancialRechargeRecordVOMap" type="com.pinting.business.model.vo.FinancialRechargeRecordVO" >
    <result column="rowno" property="rowno" jdbcType="INTEGER" />
    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="recharge_times" property="rechargeTimes" jdbcType="INTEGER" />
    <result column="recharge_total_times" property="rechargeTotalTimes" jdbcType="INTEGER" />
    <result column="channel_trans_type" property="channelTransType" jdbcType="VARCHAR" />
	<result column="trans_amount" property="transAmount" jdbcType="DOUBLE" />
	<result column="trans_code" property="transCode" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  
  	<select id="financialRechargeRecord" resultMap="FinancialRechargeRecordVOMap" parameterType="java.util.Map"  >
		
  	SELECT
		(@rowNO := @rowNo + 1) rowno,
		t.*
	FROM
		(SELECT @rowNO := 0) b,
		(
				SELECT 
					CONCAT(SUBSTRING(c.mobile FROM 1 FOR 7),"****") mobile,
					c.user_name,
					1 recharge_times,
					1 recharge_total_times,
					f.channel_trans_type,
					f.trans_amount,
					f.trans_code,
					g.create_time,
					g.update_time
				FROM 
				bs_sub_account a
				LEFT JOIN  bs_pay_orders_jnl f ON  f.trans_code = 'SUCCESS' AND a.id = f.sub_account_id
				LEFT JOIN bs_pay_orders g on a.id = g.sub_account_id  AND (g.trans_type = 'BALANCE_BUY_PRODUCT' OR g.trans_type = 'CARD_BUY_PRODUCT') ,
				bs_account b ,
				bs_user c
				WHERE 
				a.account_id = b.id
				AND b.user_id = c.id
				AND  a.id = #{subAccountId}
		) t
  	</select>


  <select id="selectSubAccountByUserIdAndOpenTime" resultMap="BaseResultMap"
          parameterType="java.util.Map">
    SELECT
    sa.id
    FROM bs_sub_account sa
    LEFT JOIN bs_account a ON  sa.account_id=a.id
    LEFT JOIN bs_user u ON u.id=a.user_id
    where sa.product_type='REG'
    <if test="resultsTime != null">
      AND sa.open_time &gt;= #{resultsTime}
    </if>
    AND  sa.status NOT IN (1,6)
    AND u.id=#{userId}

  </select>
  	
  	<select id="getNoMatchList" parameterType="java.util.Map" resultType="java.util.Map">
  		select t4.interest_begin_date as interestBeginDate,t4.sumAmount as sumAmount ,t4.sumBalance as sumBalance
		from (
			SELECT *,sum(t3.amount)as sumAmount,sum(t3.balance)as sumBalance from (
				select *, case WHEN t1.s2 is not null then t1.balance-t1.s2 else t1.balance end amount from 
				(
					select a.id, a.balance, a.interest_begin_date,sum(bm.left_principal) s2 from bs_sub_account a
					LEFT JOIN bs_match bm ON a.id = bm.sub_account_id, bs_product b, bs_property_info c 
					where a.product_type='REG' and a.interest_begin_date>='2016-05-12' and a.status=2 
					and a.interest_begin_date &lt;= #{interestBeginDate} and a.product_id = b.id and b.property_id = c.id
					and c.property_symbol = #{propertySymbol}
					GROUP BY a.id
				) t1
			) t3 where t3.amount > 0 GROUP BY t3.interest_begin_date 
		)t4 where t4.sumAmount>100;
  	
	</select>
	
  	<select id="sumInvestBalanceByDate" parameterType="java.util.Map" resultType="java.lang.Double" >
  		select sum(a.balance) from bs_sub_account a, bs_product b, bs_property_info c 
  		where a.product_type='REG'and a.interest_begin_date = #{interestBeginDate}  and a.`status`=2
  		and a.product_id = b.id and b.property_id = c.id
		and c.property_symbol = #{propertySymbol}
  	</select>
  	
  	<select id="getMatchedList" parameterType="java.util.Map" resultType="java.util.Map">
  	SELECT * from (
		select *, case WHEN t1.matched_amount is not null then t1.balance-t1.matched_amount else t1.balance end amount from 
		(
			select a.id, a.balance, a.interest_begin_date,sum(bm.left_principal) matched_amount 
			from bs_sub_account a
			LEFT JOIN bs_match bm ON a.id = bm.sub_account_id,
			bs_product b, bs_property_info c 
			where a.product_type='REG' and a.interest_begin_date=#{interestBeginDate} and a.status=2 
			and a.product_id = b.id and b.property_id = c.id
			and c.property_symbol = #{propertySymbol}
			GROUP BY a.id
		) t1
	) t3 where t3.id is not null 
	and t3.matched_amount/t3.balance >=#{percent} and t3.matched_amount >= #{topBalance} order by t3.balance desc
  	</select>
  	
  	<select id="getNeedMatchList" parameterType="java.util.Map" resultType="java.util.Map">
  	SELECT
	t3.*, b.id AS user_id
	FROM
		(
			SELECT
				*, CASE
			WHEN t1.s2 IS NOT NULL THEN
				t1.balance - t1.s2
			ELSE
				t1.balance
			END amount
			FROM
				(
					SELECT
						a.id,
						a.balance,
						a.interest_begin_date,
						a.account_id,
						bm.sub_account_id,
						SUM(bm.left_principal) s2
					FROM
						bs_sub_account a
					LEFT JOIN bs_match bm ON a.id = bm.sub_account_id
					,
					bs_product b,
					bs_property_info c
				WHERE
					a.product_type = 'REG'
				AND a.interest_begin_date = #{interestBeginDate}
				AND a.STATUS = 2
				AND a.product_id = b.id
				AND b.property_id = c.id
				AND c.property_symbol = #{propertySymbol}
				GROUP BY
					a.id
				) t1 
		) t3,
		bs_account a,
		bs_user b
	WHERE
		b.id = a.user_id
	AND a.id = t3.account_id
	AND t3.amount > 0
	AND (
		(
			t3.balance &lt;= 5000
			AND CASE
			WHEN t3.s2 IS NULL THEN
				0
			ELSE
				t3.s2 / t3.balance
			END &lt; #{minPercent}
		)
		OR (
			t3.balance > 5000
			AND CASE
			WHEN t3.s2 IS NULL THEN
				0
			ELSE
				t3.s2 / t3.balance
			END &lt; #{maxPercent}
		)
	)
	ORDER BY
		balance;
		
  	</select>
  	
  	<select id="getNeedMatchCount" parameterType="java.util.Map" resultType="java.lang.Integer">
  		SELECT COUNT(t3.id) from (
			SELECT
				*, CASE
			WHEN t1.s2 IS NOT NULL THEN
				t1.balance - t1.s2
			ELSE
				t1.balance
			END amount
			FROM
				(
					SELECT
						a.id,
						a.balance,
						a.interest_begin_date,
						a.account_id,
						bm.sub_account_id,
						SUM(bm.left_principal) s2
					FROM
						bs_sub_account a
					LEFT JOIN bs_match bm ON a.id = bm.sub_account_id
					,
					bs_product b,
					bs_property_info c
				WHERE
					a.product_type = 'REG'
				AND a.interest_begin_date = #{interestBeginDate}
				AND a.STATUS = 2
				AND a.product_id = b.id
				AND b.property_id = c.id
				AND c.property_symbol = #{propertySymbol}
				GROUP BY
					a.id
				) t1 
		) t3
		
	WHERE
	t3.amount > 0
	AND (
		(
			t3.balance &lt;= 5000
			AND CASE
			WHEN t3.s2 IS NULL THEN
				0
			ELSE
				t3.s2 / t3.balance
			END &lt; #{minPercent}
		)
		OR (
			t3.balance > 5000
			AND CASE
			WHEN t3.s2 IS NULL THEN
				0
			ELSE
				t3.s2 / t3.balance
			END &lt; #{maxPercent}
		)
		); 
		
  	</select>
  	
  	<!-- 查询起息日在规定时间内，投资成功的投资总金额（站岗） -->
  	<select id="getSumBalanceByProductType"  resultMap="DailyAmount4LoanVOMap">
  	select b.term,sum(a.available_balance) as sum_amount from bs_sub_account a,bs_product b,bs_property_info c,bs_account d
	where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id 
	<if test="matchLimitAmount != null and matchLimitAmount != ''"> 
		and a.available_balance >=#{matchLimitAmount} 
	</if>
	<if test="productType != null and productType != ''"> 
		and a.product_type=#{productType} 
	</if>
	<if test="propertySymbol != null and propertySymbol != ''">
		and c.property_symbol=#{propertySymbol}
	</if>
	<if test="minInterestBeginDate != null and minInterestBeginDate != ''">
		and  a.interest_begin_date > #{minInterestBeginDate} and a.interest_begin_date &lt; now()
	</if>
	<if test="outUserId != null and outUserId !=''">
		and d.user_id != #{outUserId}
	</if>
	<if test="userIdList != null and userIdList !='' and isSuper == 'yes'">
		and d.user_id in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	<if test="userIdList != null and userIdList !='' and isSuper == 'no'">
		and d.user_id not in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	<if test="isSuper == 'no'">
	 	GROUP BY b.term;
	</if>
  	</select>

  <select id="getSumBalanceByProductTypeSmall"  resultMap="DailyAmount4LoanVOMap">
    select b.term,ifnull(sum(a.available_balance),0) as sum_amount from bs_sub_account a,bs_product b,bs_property_info c,bs_account d
    where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id
    <if test="matchLimitAmount != null and matchLimitAmount != ''">
      and a.available_balance &lt; #{matchLimitAmount}
    </if>
    <if test="productType != null and productType != ''">
      and a.product_type=#{productType}
    </if>
    <if test="propertySymbol != null and propertySymbol != ''">
      and c.property_symbol=#{propertySymbol}
    </if>
    <if test="minInterestBeginDate != null and minInterestBeginDate != ''">
      and  a.interest_begin_date > #{minInterestBeginDate} and a.interest_begin_date &lt; now()
    </if>
    <if test="userIdList != null and userIdList !='' and isSuper == 'yes'">
      and d.user_id in
      <foreach collection="userIdList" item="userId" index="index"
               open="(" close=")" separator=",">
        #{userId}
      </foreach>
    </if>
    <if test="userIdList != null and userIdList !='' and isSuper == 'no'">
      and d.user_id not in
      <foreach collection="userIdList" item="userId" index="index"
               open="(" close=")" separator=",">
        #{userId}
      </foreach>
    </if>
    <if test="isSuper == 'no'">
      GROUP BY b.term;
    </if>
  </select>
  	
  	<!-- 债权匹配时查询可以匹配的AUTH户列表 -->
  	<select id="canMatch4ZanList"  resultMap="CanMatch4ZanMap">
  	select b.term,e.id as user_id,e.agent_id ,a.id,a.balance,a.available_balance,a.open_balance,a.account_id,a.product_type,
  	a.status,a.interest_begin_date,a.product_rate  
  	from bs_sub_account a,bs_product b,bs_property_info c,bs_account d,bs_user e
	where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id 
	and e.id=d.user_id
	<if test="matchLimitAmount != null and matchLimitAmount != ''"> 
		and a.available_balance >=#{matchLimitAmount} 
	</if>
	<if test="term != null and term != ''"> 
		and b.term =#{term} 
	</if>
	<if test="productType != null and productType != ''"> 
		and a.product_type=#{productType} 
	</if>
	<if test="propertySymbol != null and propertySymbol != ''">
		and c.property_symbol=#{propertySymbol}
	</if>
	<if test="interestBeginDate != null and interestBeginDate != ''">
		and a.interest_begin_date=#{interestBeginDate}
	</if>
	<if test="userIdList != null and userIdList !='' and isSuper == 'yes'">
		and d.user_id in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	<if test="userIdList != null and userIdList !='' and isSuper == 'no'">
		and d.user_id not in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	  order by a.open_balance desc
</select>

  <select id="canSmallMatch4ZanList"  resultMap="CanMatch4ZanMap">
    select b.term,e.id as user_id,e.agent_id ,a.id,a.balance,a.available_balance,a.open_balance,a.account_id,a.product_type,
    a.status,a.interest_begin_date,a.product_rate
    from bs_sub_account a,bs_product b,bs_property_info c,bs_account d,bs_user e
    where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id
    and e.id=d.user_id
    <if test="matchLimitAmount != null and matchLimitAmount != ''">
      and a.available_balance &lt; #{matchLimitAmount} and a.available_balance > 0
    </if>
    <if test="term != null and term != ''">
      and b.term =#{term}
    </if>
    <if test="productType != null and productType != ''">
      and a.product_type=#{productType}
    </if>
    <if test="propertySymbol != null and propertySymbol != ''">
      and c.property_symbol=#{propertySymbol}
    </if>
    <if test="interestBeginDate != null and interestBeginDate != ''">
      and a.interest_begin_date=#{interestBeginDate}
    </if>
    <if test="userIdList != null and userIdList !='' and isSuper == 'yes'">
      and d.user_id in
      <foreach collection="userIdList" item="userId" index="index"
               open="(" close=")" separator=",">
        #{userId}
      </foreach>
    </if>
    <if test="userIdList != null and userIdList !='' and isSuper == 'no'">
      and d.user_id not in
      <foreach collection="userIdList" item="userId" index="index"
               open="(" close=")" separator=",">
        #{userId}
      </foreach>
    </if>
    order by a.available_balance asc
  </select>

<!-- 债权转让时查询可以接收债权的AUTH户金额最大的 -->
<select id="getCanMatch4Zan2Transfer"  resultMap="CanMatch4ZanMap">
  	select b.term,e.id as user_id,e.agent_id ,a.id,a.balance,a.available_balance,a.open_balance,a.account_id,a.product_type,
  	a.status,a.interest_begin_date,a.product_rate  
  	from bs_sub_account a,bs_product b,bs_property_info c,bs_account d,bs_user e
	where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id 
	and e.id=d.user_id
	<if test="matchLimitAmount != null and matchLimitAmount != ''"> 
		and a.available_balance >=#{matchLimitAmount} 
	</if>
	<if test="term != null and term != ''"> 
		and b.term =#{term} 
	</if>
	<if test="productType != null and productType != ''"> 
		and a.product_type=#{productType} 
	</if>
	<if test="propertySymbol != null and propertySymbol != ''">
		and c.property_symbol=#{propertySymbol}
	</if>
	<if test="interestBeginDate != null and interestBeginDate != ''">
		and a.interest_begin_date=#{interestBeginDate}
	</if>
	<if test="userIdList != null and userIdList !='' ">
		and d.user_id not in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	<if test="orderByType == 'asc' ">
		order by a.balance asc limit 1
	</if>
	<if test="orderByType == 'desc' ">
		order by a.balance desc limit 1
	</if>
</select>

  <select id="getCanMatch4Zan2TransferNew"  resultMap="DepStageCanMatch4ZanMap">
    select b.term,e.id as user_id,e.agent_id ,a.id,a.balance,a.available_balance,a.open_balance,a.account_id,a.product_type,
    a.status,a.interest_begin_date,a.product_rate,hfu.hf_user_id
    from bs_sub_account a,bs_product b,bs_property_info c,bs_account d,bs_user e,bs_hfbank_user_ext hfu
    where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id
    and e.id=d.user_id and hfu.user_id = e.id
    <if test="matchLimitAmount != null and matchLimitAmount != ''">
      and a.available_balance >=#{matchLimitAmount}
    </if>
    <if test="term != null and term != ''">
      and b.term =#{term}
    </if>
    <if test="productType != null and productType != ''">
      and a.product_type=#{productType}
    </if>
    <if test="propertySymbol != null and propertySymbol != ''">
      and c.property_symbol=#{propertySymbol}
    </if>
    <if test="interestBeginDate != null and interestBeginDate != ''">
      and a.interest_begin_date=#{interestBeginDate}
    </if>
    <if test="outUserId != null or outUserId !=''">
			AND d.user_id != #{outUserId}
		</if>
    <if test="userIdList != null and userIdList !='' ">
      and d.user_id not in
      <foreach collection="userIdList" item="userId" index="index"
               open="(" close=")" separator=",">
        #{userId}
      </foreach>
    </if>
    <if test="orderByType == 'asc' ">
      order by a.open_balance asc limit 1
    </if>
    <if test="orderByType == 'desc' ">
      order by a.open_balance desc limit 1
    </if>
  </select>


  <select id="selectCommissionPlanList" resultMap="VoResultMap" parameterType="java.util.Map" >
    SELECT aa.*,aa.receive_amount - aa.receive_principal_amount receive_interest_amount FROM ((
    <!--委托中-->
    SELECT auth.id,auth.product_id, p.`name` as product_name, p.base_rate as product_rate, auth.open_balance, p.term, auth.open_time, regd.balance, NULL AS return_balance, auth.interest_begin_date, regd.`status`, "ENTRUSTING" as entrust_status,p.return_type, 1 AS order_no
    ,(SELECT CASE WHEN SUM(aa.plan_principal + aa.plan_interest) IS NULL THEN 0 ELSE SUM(aa.plan_principal + aa.plan_interest) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND aa.`status` = 'REPAIED') return_amount
	,(SELECT CASE WHEN SUM(aa.plan_principal + aa.plan_interest) IS NULL THEN 0 ELSE SUM(aa.plan_principal + aa.plan_interest) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND (aa.`status` = 'INIT' OR aa.`status` = 'REPAYING' )) receive_amount
    ,(SELECT CASE WHEN SUM(aa.plan_principal) IS NULL THEN 0 ELSE SUM(aa.plan_principal) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND (aa.`status` = 'INIT' OR aa.`status` = 'REPAYING' )) receive_principal_amount
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 6)
    AND p.id = auth.product_id AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) &lt; 0
    AND b.user_id = #{userId}
    ) UNION (
    <!-- 回款中 -->
    SELECT auth.id,auth.product_id, p.`name` as product_name, p.base_rate as product_rate, auth.open_balance, p.term, auth.open_time, regd.balance, c.trans_amount  AS return_balance, auth.interest_begin_date, regd.`status`, "RETURNING" as entrust_status,p.return_type, 2 AS order_no
    ,(SELECT CASE WHEN SUM(aa.plan_principal + aa.plan_interest) IS NULL THEN 0 ELSE SUM(aa.plan_principal + aa.plan_interest) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND aa.`status` = 'REPAIED')+ CASE WHEN c.trans_amount IS NULL THEN 0 ELSE c.trans_amount END  return_amount
	,(SELECT CASE WHEN SUM(aa.plan_principal + aa.plan_interest) IS NULL THEN 0 ELSE SUM(aa.plan_principal + aa.plan_interest) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND (aa.`status` = 'INIT' OR aa.`status` = 'REPAYING' ))  receive_amount
	,(SELECT CASE WHEN SUM(aa.plan_principal) IS NULL THEN 0 ELSE SUM(aa.plan_principal) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND (aa.`status` = 'INIT' OR aa.`status` = 'REPAYING' )) receive_principal_amount
    FROM bs_sub_account auth LEFT JOIN bs_account_jnl c ON c.sub_account_id1 = auth.id AND c.trans_code = 'AUTH_BACK', bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 5, 6, 7)
    AND p.id = auth.product_id AND regd.balance > 0 AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND b.user_id = #{userId}
    ) UNION (
    <!-- 回款结束-->
    SELECT auth.id,auth.product_id, p.`name` as product_name, p.base_rate as product_rate, auth.open_balance, p.term, auth.open_time, regd.balance, c.trans_amount AS return_balance, auth.interest_begin_date, regd.`status`, "RETURN_OVER" as entrust_status,p.return_type, 3 AS order_no
    ,(SELECT CASE WHEN SUM(aa.plan_principal + aa.plan_interest) IS NULL THEN 0 ELSE SUM(aa.plan_principal + aa.plan_interest) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND aa.`status` = 'REPAIED')+ CASE WHEN c.trans_amount IS NULL THEN 0 ELSE c.trans_amount END return_amount
	,(SELECT CASE WHEN SUM(aa.plan_principal + aa.plan_interest) IS NULL THEN 0 ELSE SUM(aa.plan_principal + aa.plan_interest) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND (aa.`status` = 'INIT' OR aa.`status` = 'REPAYING' )) receive_amount
	,(SELECT CASE WHEN SUM(aa.plan_principal) IS NULL THEN 0 ELSE SUM(aa.plan_principal) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND (aa.`status` = 'INIT' OR aa.`status` = 'REPAYING' )) receive_principal_amount
    FROM bs_sub_account auth LEFT JOIN bs_account_jnl c ON c.sub_account_id1 = auth.id AND c.trans_code = 'AUTH_BACK', bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND auth.account_id = b.id
    AND p.id = auth.product_id AND regd.`status` IN (5, 7)
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND (SELECT COUNT(lr.id) FROM ln_loan_relation lr WHERE lr.bs_sub_account_id = regd.id ) > 0
    AND b.user_id = #{userId}
    ) UNION (
    <!--委托结束-->
    SELECT auth.id,auth.product_id, p.`name` as product_name, p.base_rate as product_rate, auth.open_balance, p.term, auth.open_time, regd.balance, auth.open_balance AS return_balance, auth.interest_begin_date, regd.`status`,"ENTRUST_OVER" as entrust_status,p.return_type, 4 AS order_no
    ,auth.open_balance return_amount
	,0 receive_amount
	,0 receive_principal_amount
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` = 5 AND regd.`status` = 5 AND auth.balance = 0
    AND p.id = auth.product_id AND regd.balance = 0 AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND (SELECT COUNT(lr.id) FROM ln_loan_relation lr WHERE lr.bs_sub_account_id = regd.id ) = 0
    AND b.user_id = #{userId}
    )) AS aa
    ORDER BY aa.order_no ASC, aa.interest_begin_date DESC, aa.id DESC
    LIMIT #{start}, #{numPerPage}
  </select>
  <select id="countCommissionPlanList" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(auth.id)
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.account_id = b.id
    AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 6)
    AND p.id = auth.product_id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date,
    (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) != 0
    AND b.user_id = #{userId}
  </select>
  
  
  <select id="selectJSHBySuperUser" resultMap="VoResultMap">
  	select b.user_id,a.id,a.balance
  	from bs_sub_account a,bs_account b 
  	where a.account_id = b.id 
  	<if test="userIdList != null and userIdList !=''">
		and b.user_id in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	and a.available_balance > 0
	and a.product_type = 'DEP_JSH'
  
  </select>
  
  
  <select id="queryEntrustStatusBySubAccountId"   resultType="java.lang.String" parameterType="java.util.Map" >
    SELECT aa.* FROM ((
    <!--委托中-->
    SELECT  "ENTRUSTING" as entrust_status
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 6)
    AND p.id = auth.product_id AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) &lt; 0
    AND auth.id =#{authSubAccountId}
    ) UNION (
    <!-- 回款中 -->
    SELECT "RETURNING" as entrust_status
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 5, 6, 7)
    AND p.id = auth.product_id AND regd.balance > 0 AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND auth.id =#{authSubAccountId}
    ) UNION (
    <!-- 回款结束-->
    SELECT "RETURN_OVER" as entrust_status
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND auth.account_id = b.id
    AND p.id = auth.product_id AND regd.`status` IN (5, 7)
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND (SELECT COUNT(lr.id) FROM ln_loan_relation lr WHERE lr.bs_sub_account_id = regd.id ) > 0
    AND auth.id =#{authSubAccountId}
    ) UNION (
    <!--委托结束-->
    SELECT "ENTRUST_OVER" as entrust_status
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` = 5 AND regd.`status` = 5 AND auth.balance = 0
    AND p.id = auth.product_id AND regd.balance = 0 AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND (SELECT COUNT(lr.id) FROM ln_loan_relation lr WHERE lr.bs_sub_account_id = regd.id ) = 0
    AND auth.id =#{authSubAccountId}
    )) AS aa
  </select>


  <select id="countInTheInvestmentByUserId" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT SUM(aa.num) FROM ((
        select 1 AS no_1,COUNT(a.id) AS num
        from
        bs_sub_account a, bs_account b
        where
        a.account_id = b.id and b.user_id = #{userId} and a.product_type IN ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'AUTH_FREE') AND a.`status`  NOT  IN (1,5,6,7)
      ) UNION (
        SELECT 2 AS no_2,COUNT(auth.id) AS num
        FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_account a
        WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
        AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
        AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 6)
        AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) &lt; 0
        AND auth.account_id = a.id AND a.user_id = #{userId}
      ) UNION (
        SELECT 3 AS no_3,COUNT(auth.id) AS num
        FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_pay_orders o, bs_account a
        WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D' AND o.sub_account_id = auth.id AND o.`status` = 6
        AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
        AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 5, 6, 7) AND regd.balance > 0
        AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
        AND auth.account_id = a.id AND a.user_id = #{userId}
      )
    ) AS aa
  </select>
  
  <!-- 查询用户某日购买成功金额，按投资期限统计总投资金额 -->
  <select id="getSumOpenBalanceByDate" resultMap="DailyAmount4LoanVOMap"> 
  select sum(a.open_balance) as sum_amount,b.term from bs_sub_account a,bs_product b,bs_property_info c,bs_account d,bs_user e
	where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id 
	and e.id=d.user_id 
	<if test="productType != null and productType != ''"> 
		and a.product_type=#{productType} 
	</if>
	<if test="propertySymbol != null and propertySymbol != ''">
		and c.property_symbol=#{propertySymbol}
	</if>
	<if test="interestBeginDate != null and interestBeginDate != ''">
		and a.interest_begin_date=#{interestBeginDate}
	</if>
	<if test="userIdList != null and userIdList !=''">
		and d.user_id not in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
 	GROUP BY b.term;
  </select> 
  
  <select id="getSuperUserSubAccountIdList" resultType="java.lang.Integer">
	SELECT 
  		a.id 
  	FROM 
		bs_sub_account a 
		LEFT JOIN bs_account b ON a.account_id = b.id
	WHERE 
	a.product_type IN('AUTH', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7','AUTH_FREE')
	AND (FIND_IN_SET(b.user_id,(select conf_value from bs_sys_config where conf_key ='SUPER_FINANCE_USER_ID'))
	OR FIND_IN_SET(b.user_id,(select conf_value from bs_sys_config where conf_key ='YUN_DAI_SELF_SUPER_FINANCE_USER_ID'))
	OR FIND_IN_SET(b.user_id,(select conf_value from bs_sys_config where conf_key ='ZSD_SUPER_FINANCE_USER_ID'))
	OR FIND_IN_SET(b.user_id,(select conf_value from bs_sys_config where conf_key ='7_DAI_SELF_SUPER_FINANCE_USER_ID'))
	OR FIND_IN_SET(b.user_id,(select conf_value from bs_sys_config where conf_key ='FREE_SUPER_FINANCE_USER_ID')))
  </select>
  
  <!-- 活动需要查询使用的红包名称和投资的金额，投资的期限，以及投资的产品名称 -->
  <select id="select4ActivityBuy" resultMap="SubAc4ActivityMap">
  select d.serial_name,b.term,a.open_balance amount,b.`name` as product_name,b.show_terminal
	from bs_sub_account a,bs_product b,
		bs_red_packet_info c,bs_red_packet_check d,bs_account e,bs_pay_orders f
	where a.id=#{subAccountId} and e.user_id = #{userId} and e.user_id = c.user_id 
		and e.user_id = f.user_id and a.id = f.sub_account_id 
		and f.order_no = c.order_no and c.serial_no = d.serial_no and a.product_id = b.id;
  </select>
  
  <!-- 根据子账户ID查询对应用户ID -->
  <select id="selectUserIdBySubAccountId" parameterType="java.util.Map" resultType="java.lang.Integer">
	SELECT b.user_id 
	FROM `bs_sub_account` a,bs_account b
	WHERE a.account_id = b.id
	AND a.id = #{subAccountId}
  </select>
  
  <!-- 根据用户id查询历史投资 -->
  <select id="sumAmount4HisBuy" resultType="java.lang.Double" >
  	select IFNULL(sum(a.open_balance), 0)
  	from bs_sub_account a,bs_account b 
  	where a.account_id = b.id and a.`status` not in (1,6)
  	and b.user_id = #{userId}
  </select>
  
  
  <!-- =================PK瓜分2万现金活动-根据产品ID查询产品投资排行榜（前20名）========================== -->
  
  <resultMap id="PlayerKillingMap" type="com.pinting.business.model.vo.PlayerKillingVO" >
	    <result column="rowno" property="rowno" jdbcType="INTEGER" />
	    <result column="user_name" property="userName" jdbcType="VARCHAR" />
	    <result column="buy_amount" property="buyAmount" jdbcType="DOUBLE" />
	    <result column="award_amount" property="awardAmount" jdbcType="DOUBLE" />
	    <result column="mobile" property="mobile" jdbcType="VARCHAR" />
  		<result column="user_id" property="userId" jdbcType="INTEGER" />
  </resultMap>
  
  <select id="queryUserInvestRankingList" resultMap="PlayerKillingMap">
		SELECT
			(@rowNO := @rowNo + 1) rowno,
			t.*
		FROM
			(SELECT @rowNO := 0) b,
			(
			SELECT 
				c.id,
				CONCAT(LEFT(c.user_name,1),"**") user_name,
				SUM(a.open_balance) buy_amount,
				a.open_time
			FROM
			(SELECT * FROM bs_sub_account WHERE product_id = #{productId} GROUP BY open_time DESC) a
			LEFT JOIN bs_account b ON a.account_id = b.id
			LEFT JOIN bs_user c ON b.user_id = c.id
			GROUP BY
			c.id
			ORDER BY buy_amount DESC,open_time ASC
			LIMIT 0,20
		) t
  </select>
  
  
  
   <!-- =================PK瓜分2万现金活动-根据产品ID查询产品投资排行榜（前20名）E========================== -->
 
 
 	<!-- 三重好礼活动，二重礼，排名 -->
 	
 	<select id="queryTrebleGiftUserInvestList" resultMap="PlayerKillingMap">
 		select tt.*,case when tt.rowno>3 then ROUND(tt.buy_amount*0.003,2) else ROUND(tt.buy_amount*0.005,2) end as award_amount from(
 		SELECT
			(@rowNO := @rowNo + 1) rowno,
			t.*
		FROM
		(SELECT @rowNO := 0) b,
		( select bu.id,CONCAT(LEFT(bu.user_name,1),"**") user_name, 
			ROUND(sum(sub.year_invest),2) buy_amount FROM
			(select a.account_id,a.open_balance,b.term,a.product_type,a.open_time,
				CASE WHEN a.product_type = 'REG' THEN
					CASE WHEN b.term &lt;0 then abs(b.term) * a.open_balance /365 ELSE
						case when b.term = 12 then a.open_balance ELSE
							b.term*30*a.open_balance/365 END
					END 
					ELSE
						b.term*a.open_balance/24
					END
				as year_invest
				from bs_sub_account a,bs_product b
				where a.product_id = b.id
				and a.`status` =2 and a.interest_begin_date = #{selectDate} 
				and (a.product_type='AUTH' or a.product_type='REG')
				and (b.name like '港湾计划%' or b.name like '赞分期%')
			) sub,bs_account ba,bs_user bu 
			where sub.account_id = ba.id and ba.user_id = bu.id
			
			<if test="userId != null">
				and ba.user_id = #{userId}
			</if>
			GROUP BY bu.id
			ORDER BY buy_amount DESC,sub.open_time ASC
		) t
	)tt where buy_amount>=3000 limit 0,10
 	</select>

  <select id="countLanternActivityBuy" parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT COUNT(a.id) FROM bs_sub_account a, bs_product b WHERE a.product_id = b.id AND a.product_type IN ('REG', 'AUTH') AND a.`status` = 2
    AND a.open_time BETWEEN #{startTime} AND #{endTime}
    AND !FIND_IN_SET('PC_178', b.show_terminal)
    AND !FIND_IN_SET('H5_178', b.show_terminal) AND !FIND_IN_SET('PC_KQ', b.show_terminal) AND !FIND_IN_SET('H5_KQ', b.show_terminal)
    AND !FIND_IN_SET('PC_HN', b.show_terminal) AND !FIND_IN_SET('H5_HN', b.show_terminal) AND !FIND_IN_SET('PC_RUIAN', b.show_terminal)
    AND !FIND_IN_SET('H5_RUIAN', b.show_terminal)
  </select>

  <select id="selectAccountData" parameterType="java.util.Map" resultType="java.util.Map" >
    SELECT (aa.totalAmount-aa.totalAmount7Dai) as yundaiTotalAmount, aa.totalAmount7Dai,
    aa.zanLoanPrincipal, aa.zanRepaymentPrincipal, (aa.financingAmount-aa.financingAmount7Dai) as yundaiFinancingAmount,
    aa.financingAmount7Dai, aa.zanFinancingAmount
    FROM (
    SELECT
    (SELECT IFNULL(sum(a.balance),0)
    FROM bs_sub_account a
    WHERE a.product_type = 'REG' AND a.status = 2
    AND <![CDATA[ DATE(a.open_time) < DATE(NOW()) ]]>) AS totalAmount,
    (SELECT IFNULL(sum(a.balance),0)
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_type = 'REG' AND a.status = 2 AND a.product_id = b.id
    AND c.id = b.property_id AND c.property_symbol = '7_DAI'
    AND <![CDATA[ DATE(a.open_time) < DATE(NOW()) ]]>) AS totalAmount7Dai,
    (SELECT SUM(apply_amount) FROM ln_loan a, ln_user b
    WHERE a.ln_user_id = b.id AND b.partner_code = 'ZAN' AND `status` = 'PAIED'
    AND  <![CDATA[ DATE(a.loan_time) < DATE(NOW()) ]]>) AS zanLoanPrincipal,
    (SELECT SUM(principal) from bs_loan_finance_repay WHERE status = 'REPAIED'
    AND <![CDATA[ DATE(update_time) < DATE(NOW()) ]]>) AS zanRepaymentPrincipal,
    (SELECT IFNULL(sum(a.balance),0)
    FROM bs_sub_account a
    WHERE a.product_type = 'REG' AND a.status NOT IN (1,6)
    AND <![CDATA[ DATE(a.open_time) < DATE(NOW()) ]]>) AS financingAmount,
    (SELECT IFNULL(sum(a.balance),0)
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_type = 'REG' AND a.status NOT IN (1,6) AND a.product_id = b.id
    AND c.id = b.property_id AND c.property_symbol = '7_DAI'
    AND <![CDATA[ DATE(a.open_time) < DATE(NOW()) ]]>) AS financingAmount7Dai,
    (SELECT IFNULL(sum(a.approve_amount),0)
    FROM ln_loan a, ln_user b
    WHERE a.ln_user_id = b.id AND b.partner_code = 'ZAN' AND a.status = 'PAIED'
    AND <![CDATA[ DATE(a.loan_time) < DATE(NOW()) ]]>) AS zanFinancingAmount
    ) aa
  </select>

  <resultMap id="FinanceOverviewDetailForBeijingMap" type="com.pinting.business.model.vo.FinanceOverviewDetailForBeijingVO" >
    <result column="amount" property="amount" jdbcType="DOUBLE" />
    <result column="time" property="time" jdbcType="DATE" />
  </resultMap>
  <select id="selectBuyAmountForYunDai" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT aa.time, (aa.amount-IFNULL(bb.amount,0)) AS amount FROM
      (
      SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
          FROM bs_sub_account a
          WHERE a.product_type = 'REG'
            AND a.status NOT IN (1,6)
            AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
          GROUP BY DATE(a.open_time)

      ) aa LEFT JOIN
      (
      SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
          FROM bs_sub_account a, bs_product b, bs_property_info c
          WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
            AND a.status NOT IN (1,6)
            AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
          GROUP BY DATE(a.open_time)

      ) bb ON
      aa.time = bb.time
      ORDER BY aa.time DESC
  </select>
  <select id="selectBuyAmountFor7Dai" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
      AND a.status NOT IN (1,6)
      AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
    GROUP BY DATE(a.open_time)
    ORDER BY a.open_time DESC
  </select>
  <select id="selectBuyAmountForZan" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.open_balance),0) AS amount, DATE(a.open_time) AS time
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = 'ZAN' AND a.product_type = 'AUTH'
      AND a.status NOT IN (1,6) AND b.id != 504
      AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
    GROUP BY DATE(a.open_time)
    ORDER BY a.open_time DESC
  </select>
  <select id="selectReturnAmountForYunDai" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT aa.time, (aa.amount-IFNULL(bb.amount,0)) AS amount FROM 
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.last_finish_interest_date) AS time
	    FROM bs_sub_account a
	    WHERE a.product_type = 'REG'
	      AND a.status = 5
	      AND DATE(a.last_finish_interest_date) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.last_finish_interest_date)
	
	) aa LEFT JOIN
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.last_finish_interest_date) AS time
	    FROM bs_sub_account a, bs_product b, bs_property_info c
	    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
	      AND a.status = 5
	      AND DATE(a.last_finish_interest_date) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.last_finish_interest_date)
	) bb ON 
	aa.time = bb.time 
	ORDER BY aa.time DESC
  </select>
  <select id="selectReturnAmountFor7Dai" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT IFNULL(SUM(a.balance), 0) AS amount, DATE(a.last_finish_interest_date) AS time
    FROM bs_sub_account a,bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI'
      AND a.product_type = 'REG' AND a.status = 5
      AND DATE(a.last_finish_interest_date) BETWEEN #{startTime} AND #{endTime}
    GROUP BY DATE(a.last_finish_interest_date)
    ORDER BY a.last_finish_interest_date DESC
  </select>
  <select id="selectReturnAmountForZan" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT SUM(aa.amount) AS amount, aa.time FROM (
        (
            SELECT IFNULL(SUM(a.principal), 0) AS amount, DATE(a.update_time) AS time
            FROM bs_loan_finance_repay a LEFT JOIN bs_sys_config b ON b.conf_key = 'SUPER_FINANCE_USER_ID'
            WHERE a.status = 'REPAIED' AND !FIND_IN_SET(a.fn_user_id, b.conf_value)
              AND DATE(a.update_time) BETWEEN #{startTime} AND #{endTime}
            GROUP BY DATE(a.update_time)
        ) UNION (
            SELECT SUM((a.before_balance1 - a.after_balance1)) AS amount, DATE(a.trans_time) AS time
                FROM bs_account_jnl a, bs_sub_account b, bs_account c LEFT JOIN bs_sys_config d ON d.conf_key = 'SUPER_FINANCE_USER_ID'
                WHERE a.trans_code = 'AUTH_BACK' AND a.sub_account_id1 = b.id AND b.account_id = c.id AND !FIND_IN_SET(c.user_id, d.conf_value)
                  AND DATE(a.trans_time) BETWEEN #{startTime} AND #{endTime}
            GROUP BY DATE(a.trans_time)
        )
    ) AS aa
    GROUP BY aa.time
    ORDER BY aa.time DESC
  </select>
  <select id="selectFinanceAmountToYunDai" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT aa.time, (aa.amount-IFNULL(bb.amount,0)) AS amount FROM 
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
	    FROM bs_sub_account a
	    WHERE a.product_type = 'REG'
	     AND a.status NOT IN (1,6)
	     AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.open_time)
	) aa LEFT JOIN
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
	    FROM bs_sub_account a, bs_product b, bs_property_info c
	    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
	     AND a.status NOT IN (1,6)
	     AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.open_time)
	) bb ON 
	aa.time = bb.time 
	ORDER BY aa.time DESC
  </select>
  <select id="selectFinanceAmountTo7Dai" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
      AND a.status NOT IN (1,6)
      AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
    GROUP BY DATE(a.open_time)
    ORDER BY a.open_time DESC
  </select>
  <select id="selectFinanceAmountToZan" resultMap="FinanceOverviewDetailForBeijingMap" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.approve_amount),0) AS amount, DATE(a.loan_time) AS time
    FROM ln_loan a, ln_user b
    WHERE a.ln_user_id = b.id AND b.partner_code = 'ZAN' AND a.status = 'PAIED'
        AND DATE(a.loan_time) BETWEEN #{startTime} AND #{endTime}
    GROUP BY DATE(a.loan_time)
    ORDER BY a.loan_time DESC
  </select>

  <select id="countBuyAmountForYunDai" resultType="java.lang.Integer" parameterType="java.util.Map">
	SELECT COUNT(aa.num) FROM (
      SELECT COUNT(a.open_time) AS num
      FROM bs_sub_account a, bs_product b, bs_property_info c
      WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = 'YUN_DAI' AND a.product_type = 'REG'
        AND a.status NOT IN (1,6)
        AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
      GROUP BY DATE(a.open_time)
	) AS aa
  </select>
  <select id="countBuyAmountFor7Dai" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(aa.num) FROM (
      SELECT COUNT(a.open_time) AS num
      FROM bs_sub_account a, bs_product b, bs_property_info c
      WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
        AND a.status NOT IN (1,6)
        AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
      GROUP BY DATE(a.open_time)
    ) AS aa
  </select>
  <select id="countBuyAmountForZan" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(aa.num) FROM (
      SELECT COUNT(a.open_time) AS num
      FROM bs_sub_account a, bs_product b, bs_property_info c
      WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = 'ZAN' AND a.product_type = 'AUTH'
        AND a.status NOT IN (1,6) AND b.id != 504
        AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
      GROUP BY DATE(a.open_time)
    ) AS aa
  </select>
  <select id="countReturnAmountForYunDai" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(aa.num) FROM (
      SELECT COUNT(a.last_finish_interest_date) AS num
      FROM bs_sub_account a,bs_product b, bs_property_info c
      WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = 'YUN_DAI'
        AND a.product_type = 'REG' AND a.status = 5
        AND DATE(a.last_finish_interest_date) BETWEEN #{startTime} AND #{endTime}
      GROUP BY DATE(a.last_finish_interest_date)
    ) AS aa
  </select>
  <select id="countReturnAmountFor7Dai" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(aa.num) FROM (
      SELECT COUNT(a.last_finish_interest_date) AS num
      FROM bs_sub_account a,bs_product b, bs_property_info c
      WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI'
      AND a.product_type = 'REG' AND a.status = 5
      AND DATE(a.last_finish_interest_date) BETWEEN #{startTime} AND #{endTime}
      GROUP BY DATE(a.last_finish_interest_date)
    ) AS aa
  </select>
  <select id="countReturnAmountForZan" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(bb.time) FROM (
        SELECT SUM(aa.amount) AS amount, aa.time FROM (
                (
                        SELECT IFNULL(SUM(a.principal), 0) AS amount, DATE(a.update_time) AS time
                        FROM bs_loan_finance_repay a LEFT JOIN bs_sys_config b ON b.conf_key = 'SUPER_FINANCE_USER_ID'
                        WHERE a.status = 'REPAIED' AND !FIND_IN_SET(a.fn_user_id, b.conf_value)
                            AND DATE(a.update_time) BETWEEN #{startTime} AND #{endTime}
                        GROUP BY DATE(a.update_time)
                ) UNION (
                        SELECT SUM((a.before_balance1 - a.after_balance1)) AS amount, DATE(a.trans_time) AS time
                                FROM bs_account_jnl a, bs_sub_account b, bs_account c LEFT JOIN bs_sys_config d ON d.conf_key = 'SUPER_FINANCE_USER_ID'
                                WHERE a.trans_code = 'AUTH_BACK' AND a.sub_account_id1 = b.id AND b.account_id = c.id AND !FIND_IN_SET(c.user_id, d.conf_value)
                                    AND DATE(a.trans_time) BETWEEN #{startTime} AND #{endTime}
                        GROUP BY DATE(a.trans_time)
                )
        ) AS aa
        GROUP BY aa.time
    ) AS bb
  </select>
  <select id="countFinanceAmountToYunDai" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(aa.num) FROM (
      SELECT count(a.open_time) AS num
      FROM bs_sub_account a, bs_product b, bs_property_info c
      WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = 'YUN_DAI' AND a.product_type = 'REG'
      AND a.status NOT IN (1,6)
      AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
      GROUP BY DATE(a.open_time)
    ) AS aa
  </select>
  <select id="countFinanceAmountTo7Dai" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(aa.num) FROM (
      SELECT count(a.open_time) AS num
      FROM bs_sub_account a, bs_product b, bs_property_info c
      WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
        AND a.status NOT IN (1,6)
        AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
      GROUP BY DATE(a.open_time)
    ) AS aa
  </select>
  <select id="countFinanceAmountToZan" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT COUNT(aa.num) FROM (
      SELECT count(a.loan_time) AS num
      FROM ln_loan a, ln_user b
      WHERE a.ln_user_id = b.id AND b.partner_code = 'ZAN' AND a.status = 'PAIED'
          AND DATE(a.loan_time) BETWEEN #{startTime} AND #{endTime}
      GROUP BY DATE(a.loan_time)
    ) AS aa
  </select>

  <select id="sumBuyAmountForYunDai" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT SUM(cc.amount)
	FROM (
	SELECT aa.time, (aa.amount-IFNULL(bb.amount,0)) AS amount FROM 
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
	    FROM bs_sub_account a
	    WHERE a.product_type = 'REG'
	      AND a.status NOT IN (1,6)
	      AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.open_time)
	) aa LEFT JOIN
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
	    FROM bs_sub_account a, bs_product b, bs_property_info c
	    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
	      AND a.status NOT IN (1,6)
	      AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.open_time)
	) bb ON 
	aa.time = bb.time 
	) cc
  </select>
  <select id="sumBuyAmountFor7Dai" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.balance),0)
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
    AND a.status NOT IN (1,6)
    AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
  </select>
  <select id="sumBuyAmountForZan" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.open_balance),0)
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = 'ZAN' AND a.product_type = 'AUTH'
    AND a.status NOT IN (1,6) AND b.id != 504
    AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
  </select>
  
  <select id="sumReturnAmountForYunDai" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT SUM(cc.amount)
	FROM (
	SELECT aa.time, (aa.amount-IFNULL(bb.amount,0)) AS amount FROM 
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.last_finish_interest_date) AS time
	    FROM bs_sub_account a
	    WHERE a.product_type = 'REG'
	      AND a.status = 5
	      AND DATE(a.last_finish_interest_date) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.last_finish_interest_date)
	) aa LEFT JOIN
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.last_finish_interest_date) AS time
	    FROM bs_sub_account a, bs_product b, bs_property_info c
	    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
	      AND a.status = 5
	      AND DATE(a.last_finish_interest_date) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.last_finish_interest_date)
	) bb ON 
	aa.time = bb.time 
	) cc
  </select>
  <select id="sumReturnAmountFor7Dai" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(SUM(a.balance), 0)
    FROM bs_sub_account a,bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI'
    AND a.product_type = 'REG' AND a.status = 5
    AND DATE(a.last_finish_interest_date) BETWEEN #{startTime} AND #{endTime}
  </select>
  <select id="sumReturnAmountForZan" resultType="java.lang.Double" parameterType="java.util.Map">
	SELECT SUM(aa.amount) AS amount FROM (
			(
					SELECT IFNULL(SUM(a.principal), 0) AS amount, DATE(a.update_time) AS time
					FROM bs_loan_finance_repay a LEFT JOIN bs_sys_config b ON b.conf_key = 'SUPER_FINANCE_USER_ID'
					WHERE a.status = 'REPAIED' AND !FIND_IN_SET(a.fn_user_id, b.conf_value)
						AND DATE(a.update_time) BETWEEN #{startTime} AND #{endTime}
					GROUP BY DATE(a.update_time)
			) UNION (
					SELECT SUM((a.before_balance1 - a.after_balance1)) AS amount, DATE(a.trans_time) AS time
							FROM bs_account_jnl a, bs_sub_account b, bs_account c LEFT JOIN bs_sys_config d ON d.conf_key = 'SUPER_FINANCE_USER_ID'
							WHERE a.trans_code = 'AUTH_BACK' AND a.sub_account_id1 = b.id AND b.account_id = c.id AND !FIND_IN_SET(c.user_id, d.conf_value)
								AND DATE(a.trans_time) BETWEEN #{startTime} AND #{endTime}
					GROUP BY DATE(a.trans_time)
			)
	) AS aa
  </select>
  
  <select id="sumFinanceAmountToYunDai" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT SUM(cc.amount)
	FROM (
	SELECT aa.time, (aa.amount-IFNULL(bb.amount,0)) AS amount FROM 
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
	    FROM bs_sub_account a
	    WHERE a.product_type = 'REG'
	      AND a.status NOT IN (1,6)
	      AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.open_time)
	) aa LEFT JOIN
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
	    FROM bs_sub_account a, bs_product b, bs_property_info c
	    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
	      AND a.status NOT IN (1,6)
	      AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
	    GROUP BY DATE(a.open_time)
	) bb ON 
	aa.time = bb.time 
	) cc
  </select>
  <select id="sumFinanceAmountTo7Dai" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.balance),0)
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
    AND a.status NOT IN (1,6)
    AND DATE(a.open_time) BETWEEN #{startTime} AND #{endTime}
  </select>
  <select id="sumFinanceAmountToZan" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.approve_amount),0)
    FROM ln_loan a, ln_user b
    WHERE a.ln_user_id = b.id AND b.partner_code = 'ZAN' AND a.status = 'PAIED'
        AND DATE(a.loan_time) BETWEEN #{startTime} AND #{endTime}
  </select>
<select id="sumTotalAmountForYunDai" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT SUM(cc.amount)
	FROM (
	SELECT aa.time, (aa.amount-IFNULL(bb.amount,0)) AS amount FROM 
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
	    FROM bs_sub_account a
	    WHERE a.product_type = 'REG'
	      AND a.status NOT IN (1,6)
	      AND <![CDATA[ DATE(a.open_time) < DATE(NOW()) ]]>
	    GROUP BY DATE(a.open_time)
	) aa LEFT JOIN
	(
	SELECT IFNULL(sum(a.balance),0) AS amount, DATE(a.open_time) AS time
	    FROM bs_sub_account a, bs_product b, bs_property_info c
	    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
	      AND a.status NOT IN (1,6)
	      AND <![CDATA[ DATE(a.open_time) < DATE(NOW()) ]]>
	    GROUP BY DATE(a.open_time)
	) bb ON 
	aa.time = bb.time 
	) cc
  </select>
  <select id="sumTotalAmountFor7Dai" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.balance),0) AS amount
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = '7_DAI' AND a.product_type = 'REG'
    AND a.status NOT IN (1,6)
    AND <![CDATA[ DATE(a.open_time) < DATE(NOW()) ]]>
  </select>
  <select id="sumTotalAmountForZan" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(sum(a.open_balance),0) AS amount
    FROM bs_sub_account a, bs_product b, bs_property_info c
    WHERE a.product_id = b.id AND c.id = b.property_id AND c.property_symbol = 'ZAN' AND a.product_type = 'AUTH'
    AND a.status NOT IN (1,6) AND b.id != 504
    AND <![CDATA[ DATE(a.open_time) < DATE(NOW()) ]]>
  </select>



  <select id="sumBuyAmountByUserIdOneDay" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(
        ROUND(SUM(
            CASE a.product_type WHEN 'REG'
            THEN
                a.open_balance
            ELSE
                a.open_balance
            END
        ), 2), 0
    ) AS amount
    FROM bs_sub_account a, bs_account b, bs_product c
    WHERE a.account_id = b.id AND b.user_id = #{userId} AND a.`status` NOT IN(1,6) AND a.product_type IN ('REG', 'AUTH') AND c.activity_type != 'NEW_BUYER'
      AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
      AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
      AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
      AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
    AND DATE(a.open_time) = DATE(#{time}) AND a.product_id = c.id AND c.term >= 1
  </select>

  <select id="sumBuyAmountByUserIdBetweenDays" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT IFNULL(
        ROUND(SUM(
            CASE a.product_type WHEN 'REG'
            THEN
                IFNULL(
                        CASE c.term
                        WHEN 1 THEN a.balance*30/365
                        WHEN 3 THEN a.balance*90/365
                        WHEN 6 THEN a.balance*180/365
                        WHEN 12 THEN a.balance END
                , 0)
            ELSE
                IFNULL(a.open_balance * c.term / 12 / 2, 0)
            END
        ), 2), 0
    ) AS amount
    FROM bs_sub_account a, bs_account b, bs_product c
    WHERE a.account_id = b.id AND b.user_id = #{userId} AND a.`status` = 2 AND a.product_type IN ('REG', 'AUTH') AND c.activity_type != 'NEW_BUYER'
      AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
      AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
      AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
      AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
    AND DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime}) AND a.product_id = c.id AND c.term >= 1
  </select>


  <resultMap id="AnniversaryInvestUserInfoVOMap" type="com.pinting.business.model.vo.AnniversaryInvestUserInfoVO" >
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="DOUBLE" />
    <result column="rank" property="rank" jdbcType="INTEGER" />
  </resultMap>
  <select id="selectAnniversaryList" resultMap="AnniversaryInvestUserInfoVOMap" parameterType="java.util.Map">
    SELECT @rank:=@rank+1 AS rank, aaa.* FROM (
        SELECT aa.user_id, concat(left(aa.user_name,1),'**') AS user_name, SUM(aa.amount) AS amount FROM ((
            SELECT b.user_id, c.user_name, ROUND(SUM(
                CASE d.term
                WHEN 1 THEN a.balance*30/365
                WHEN 3 THEN a.balance*90/365
                WHEN 6 THEN a.balance*180/365
                WHEN 12 THEN a.balance END
            ), 2) AS amount
            FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
            WHERE a.`status` = 2 AND a.product_type = 'REG' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
            AND DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime}) AND d.term IN (1,3,6,12) AND d.activity_type != 'NEW_BUYER'
            AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
            AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
            AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
            AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
            GROUP BY c.id
            ORDER BY amount DESC
        ) UNION (
            SELECT b.user_id, c.user_name, ROUND(SUM(a.open_balance * d.term / 12 / 2), 2) AS amount
            FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
            WHERE a.`status` = 2 AND a.product_type = 'AUTH' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
            AND DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime}) AND d.activity_type != 'NEW_BUYER'
            AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
            AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
            AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
            AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
            GROUP BY c.id
            ORDER BY amount DESC
        )) AS aa
        GROUP BY aa.user_id
        ORDER BY aa.amount DESC
        LIMIT #{start}, #{numPerPage}
    ) aaa, (
        SELECT @rank := 0
    ) AS bb
  </select>

  <select id="sumAnniversaryOnePerson" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT ROUND(SUM(aa.amount), 2) FROM ((
        SELECT IFNULL(SUM(
            CASE c.term
            WHEN 1 THEN a.balance*30/365
            WHEN 3 THEN a.balance*90/365
            WHEN 6 THEN a.balance*180/365
            WHEN 12 THEN a.balance END
        ), 0) AS amount
        FROM bs_sub_account a, bs_account b, bs_product c
        WHERE a.product_type = 'REG' AND b.user_id = #{userId} AND a.product_id = c.id AND a.account_id = b.id
          AND a.`status` = 2 AND DATE(a.open_time) = DATE(NOW()) AND c.term IN (1,3,6,12) AND c.activity_type != 'NEW_BUYER'
            AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
            AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
            AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
            AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
      ) UNION (
          SELECT IFNULL(SUM(a.open_balance * c.term / 12 / 2), 0) AS amount
          FROM bs_sub_account a, bs_account b, bs_product c
          WHERE a.product_type = 'AUTH' AND b.user_id = #{userId} AND a.product_id = c.id AND a.account_id = b.id
          AND a.`status` = 2 AND DATE(a.open_time) = DATE(NOW()) AND c.activity_type != 'NEW_BUYER'
            AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
            AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
            AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
            AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
      )
    ) AS aa
  </select>

  <select id="sumAnniversaryAmountOneDay" resultType="java.lang.Double" parameterType="java.util.Map">
    SELECT ROUND(SUM(aa.amount), 2) FROM ((
            SELECT IFNULL(ROUND(SUM(
                    CASE c.term
                    WHEN 1 THEN a.balance*30/365
                    WHEN 3 THEN a.balance*90/365
                    WHEN 6 THEN a.balance*180/365
                    WHEN 12 THEN a.balance END
            ), 2), 0) AS amount
            FROM bs_sub_account a, bs_account b, bs_product c
            WHERE a.product_type = 'REG' AND a.product_id = c.id AND a.account_id = b.id AND c.activity_type != 'NEW_BUYER'
                AND a.`status` = 2 AND DATE(a.open_time) = DATE(#{time}) AND c.term IN (1,3,6,12)
        ) UNION (
                SELECT IFNULL(ROUND(SUM(a.open_balance * c.term / 12 / 2),2), 0) AS amount
                FROM bs_sub_account a, bs_account b, bs_product c
                WHERE a.product_type = 'AUTH' AND a.product_id = c.id AND a.account_id = b.id AND c.activity_type != 'NEW_BUYER'
                AND a.`status` = 2 AND DATE(a.open_time) = DATE(#{time})
        )
    ) AS aa
  </select>
  <select id="selectAnniversaryTodayList" resultMap="AnniversaryInvestUserInfoVOMap" parameterType="java.util.Map">

    SELECT @rank:=@rank+1 AS rank, aaaa.* FROM (
        SELECT aa.user_id, concat(left(aa.user_name,1),'**') AS user_name, SUM(aa.amount) AS amount FROM ((
                SELECT b.user_id, c.user_name, ROUND(SUM(
                    CASE d.term
                    WHEN 1 THEN a.balance*30/365
                    WHEN 3 THEN a.balance*90/365
                    WHEN 6 THEN a.balance*180/365
                    WHEN 12 THEN a.balance END
                ), 2) AS amount
                FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
                WHERE a.`status` = 2 AND a.product_type = 'REG' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
                AND DATE(a.open_time) = DATE(#{time}) AND d.term IN (1,3,6,12) AND d.activity_type != 'NEW_BUYER'
                AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
                AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
                AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
                AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
                GROUP BY c.id
                ORDER BY amount DESC
            ) UNION (
                SELECT b.user_id, c.user_name, ROUND(SUM(a.open_balance * d.term / 12 / 2), 2) AS amount
                FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
                WHERE a.`status` = 2 AND a.product_type = 'AUTH' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
                AND DATE(a.open_time) = DATE(#{time}) AND d.activity_type != 'NEW_BUYER'
                AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
                AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
                AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
                AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
                GROUP BY c.id
                ORDER BY amount DESC
            )
        ) AS aa
        GROUP BY aa.user_id
        ORDER BY aa.amount DESC
        LIMIT #{start}, #{numPerPage}
    ) AS aaaa, (
        SELECT @rank := 0
    ) AS bb
  </select>

  <resultMap id="AnniversaryAwardInfoVOMap" type="com.pinting.business.model.vo.AnniversaryAwardInfoVO" >
    <result column="time" property="time" jdbcType="DATE" />
    <result column="user_name" property="userName" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="DOUBLE" />
    <result column="award" property="award" jdbcType="DOUBLE" />
    <result column="anni_amount_that_day" property="anniAmountThatDay" jdbcType="DOUBLE" />
    <result column="rank" property="rank" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
  </resultMap>
  <select id="selectAnniversaryThatDayList" resultMap="AnniversaryAwardInfoVOMap" parameterType="java.util.Map">
    SELECT concat(left(aa.user_name,1),'**') AS user_name, SUM(aa.amount) AS amount, aa.time FROM ((
        SELECT b.user_id, c.user_name, ROUND(SUM(
                CASE d.term
                WHEN 1 THEN a.balance*30/365
                WHEN 3 THEN a.balance*90/365
                WHEN 6 THEN a.balance*180/365
                WHEN 12 THEN a.balance END
        ), 2) AS amount, DATE(a.open_time) AS time
        FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
        WHERE a.`status` = 2 AND a.product_type = 'REG' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id AND d.term IN (1,3,6,12)
        <if test="userId != null">
          AND c.id = #{userId}
          AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
          AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
          AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
          AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
        </if>
        AND d.activity_type != 'NEW_BUYER'
        AND DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime})
        GROUP BY DATE(a.open_time)
    ) UNION (
        SELECT b.user_id, c.user_name, ROUND(SUM(a.open_balance * d.term / 12 / 2), 2) AS amount, DATE(a.open_time) AS time
        FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
        WHERE a.`status` = 2 AND a.product_type = 'AUTH' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
        AND DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime})
        AND d.activity_type != 'NEW_BUYER'
        <if test="userId != null">
          AND c.id = #{userId}
          AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
          AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
          AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
          AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
        </if>
        GROUP BY DATE(a.open_time)
    )) AS aa
    GROUP BY aa.time
  </select>

  <select id="selectAllAwardList" resultMap="AnniversaryAwardInfoVOMap" parameterType="java.util.Map">
    SELECT @rank:=@rank+1 AS rank, aaaa.* FROM (
        SELECT aaa.*, ccc.* FROM (
            SELECT aa.user_id, concat(left(aa.user_name,1),'**') AS user_name, SUM(aa.amount) AS amount, aa.time FROM ((
                SELECT b.user_id, c.user_name, ROUND(SUM(
                    CASE d.term
                    WHEN 1 THEN a.balance*30/365
                    WHEN 3 THEN a.balance*90/365
                    WHEN 6 THEN a.balance*180/365
                    WHEN 12 THEN a.balance END
                ), 2) AS amount, DATE(a.open_time) AS time
                FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
                WHERE a.`status` = 2 AND a.product_type = 'REG' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
                AND DATE(a.open_time) = DATE(#{time}) AND d.term IN (1,3,6,12) AND d.activity_type != 'NEW_BUYER'
            AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
            AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
            AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
            AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
                GROUP BY c.id, DATE(a.open_time)
            ) UNION (
                SELECT b.user_id, c.user_name, ROUND(SUM(a.open_balance * d.term / 12 / 2), 2) AS amount, DATE(a.open_time) AS time
                FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
                WHERE a.`status` = 2 AND a.product_type = 'AUTH' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
                AND DATE(a.open_time) = DATE(#{time}) AND d.activity_type != 'NEW_BUYER'
            AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
            AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
            AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
            AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
                GROUP BY c.id, DATE(a.open_time)
            )) AS aa
            GROUP BY aa.user_id
        ) AS aaa, (
            SELECT SUM(aa.amount) AS anni_amount_that_day FROM ((
                    SELECT b.user_id, c.user_name, ROUND(SUM(
                            CASE d.term
                            WHEN 1 THEN a.balance*30/365
                            WHEN 3 THEN a.balance*90/365
                            WHEN 6 THEN a.balance*180/365
                            WHEN 12 THEN a.balance END
                    ), 2) AS amount, DATE(a.open_time) AS time
                    FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
                    WHERE a.`status` = 2 AND a.product_type = 'REG' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
                    AND DATE(a.open_time) = DATE(#{time}) AND d.term IN (1,3,6,12) AND d.activity_type != 'NEW_BUYER'
                    GROUP BY DATE(a.open_time)
            ) UNION (
                    SELECT b.user_id, c.user_name, ROUND(SUM(a.open_balance * d.term / 12 / 2), 2) AS amount, DATE(a.open_time) AS time
                    FROM bs_sub_account a, bs_account b, bs_user c, bs_product d
                    WHERE a.`status` = 2 AND a.product_type = 'AUTH' AND a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
                    AND DATE(a.open_time) = DATE(#{time}) AND d.activity_type != 'NEW_BUYER'
                    GROUP BY DATE(a.open_time)
            )) AS aa
            GROUP BY aa.time
        ) ccc
        ORDER BY aaa.amount DESC, aaa.time ASC
    ) AS aaaa, (
      SELECT @rank:=0
    ) AS bbb
    LIMIT #{start}, #{numPerPage}
  </select>
  
  <select id="selectInvestProportionList" resultMap="InvestProportionVOMap" parameterType="java.util.Map">
  SELECT tt.product_type,tt.invest_amount,tt.invest_num,
	  CASE WHEN ROUND(ROUND(tt.invest_amount/st.invest_amount,4)*100,2) is null THEN 0
  	ELSE ROUND(ROUND(tt.invest_amount/st.invest_amount,4)*100,2) END
  	as proportion_rate 
	from (
		select 'GW' as product_type, 
		CASE WHEN sum(open_balance) is NULL THEN 0 ELSE sum(open_balance) END as invest_amount,
		COUNT(
            CASE WHEN bsa.product_type IN ('RED', 'RED_ZSD','RED_7','RED_FREE') THEN NULL
            ELSE bsa.id END
        ) invest_num,u.id
		from bs_user u,bs_account ba,bs_sub_account bsa,bs_product bp
		where u.id = #{userId} and u.id = ba.user_id and ba.id = bsa.account_id
		and bsa.product_id = bp.id 
		and bsa.`status` in (2,7) and bsa.product_type in ('REG', 'AUTH_YUN', 'RED', 'AUTH_ZSD', 'RED_ZSD','AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE') and bsa.open_balance > 0
		UNION 
		select  'ZAN' as product_type, 
		(
			SELECT(
					(SELECT CASE WHEN SUM(a.open_balance) IS NULL THEN 0 ELSE SUM(a.open_balance) END FROM 
					bs_sub_account a,
					bs_account b 
					WHERE 
					a.account_id = b.id
					AND a.product_type = 'AUTH'
					AND a.`status` NOT IN (1, 6)
					AND b.user_id = #{userId} )
					-
					(SELECT CASE WHEN SUM(a.amount) IS NULL THEN 0 ELSE SUM(a.amount) END FROM bs_standby_return a WHERE a.user_id = #{userId}  )
					-
					(
                        SELECT CASE WHEN SUM(d.principal)  IS NULL THEN 0 ELSE SUM(d.principal)  END
                         FROM ln_loan_relation a ,ln_finance_repay_schedule b, bs_sub_account c, bs_loan_finance_repay d
                        WHERE a.id = b.relation_id AND c.id = a.bs_sub_account_id AND c.product_type IN ('REG_D', 'AUTH')
                        AND d.finance_repay_schedule_id = b.id AND d.`status` = 'REPAIED'
                        AND a.bs_user_id = #{userId}
					)
					-
					(
                       select CASE WHEN sum(lc.in_amount-lc.amount) IS NULL THEN 0 ELSE sum(lc.in_amount-lc.amount) END
                      from ln_finance_repay_schedule a ,ln_credit_transfer lc, bs_sub_account auth
                      where repay_serial = 1 and a.`status` = 'REPAIED' and lc.in_loan_relation_id = relation_id  AND lc.in_user_id = #{userId}
                      AND auth.id = lc.in_sub_account_id AND auth.product_type = 'REG_D'
					)
			) as invest_amount
		),
		(
          SELECT
          COUNT(auth.id)
          FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
          WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
          AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
          AND auth.`status` NOT IN (1, 6)
          AND p.id = auth.product_id AND auth.account_id = b.id
          AND b.user_id = #{userId} AND (
            (
            regd.`status` NOT IN (1, 5, 6, 7)
            AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
            AND regd.balance > 0
            ) OR (
            regd.`status` NOT IN (1, 6)
            AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) &lt; 0
            )
          )
        ) invest_num,u.id
		from bs_user u,bs_account ba,bs_sub_account bsa,bs_product bp,
		bs_sub_account bsa1,bs_sub_account_pair bsap
		where u.id = #{userId} and u.id = ba.user_id and ba.id = bsa.account_id
		and bsa.product_id = bp.id 
		and bsa.`status` in (2,7) and bsa.product_type ='AUTH'
		and bsa.id = bsap.auth_account_id and bsap.reg_d_account_id = bsa1.id
		and bsa1.`status` in (2,7)
        AND DATEDIFF(NOW(),ADDDATE(bsa.interest_begin_date,
		(SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) != 0
	) as tt,(
		SELECT(
					(SELECT CASE WHEN SUM(a.open_balance) IS NULL THEN 0 ELSE SUM(a.open_balance) END FROM 
					bs_sub_account a,
					bs_account b 
					WHERE 
					a.account_id = b.id
					AND a.product_type = 'AUTH'
					AND a.`status` NOT IN (1, 6)
					AND b.user_id = #{userId} )
					-
					(SELECT CASE WHEN SUM(a.amount) IS NULL THEN 0 ELSE SUM(a.amount) END FROM bs_standby_return a WHERE a.user_id = #{userId}  )
					-
					(
					  SELECT CASE WHEN SUM(d.principal)  IS NULL THEN 0 ELSE SUM(d.principal)  END
                       FROM ln_loan_relation a ,ln_finance_repay_schedule b, bs_sub_account c, bs_loan_finance_repay d
                      WHERE a.id = b.relation_id AND c.id = a.bs_sub_account_id AND c.product_type IN ('REG_D', 'AUTH')
                      AND d.finance_repay_schedule_id = b.id AND d.`status` = 'REPAIED'
                      AND a.bs_user_id = #{userId}
					)
					-
					(
                      select CASE WHEN sum(lc.in_amount-lc.amount) IS NULL THEN 0 ELSE sum(lc.in_amount-lc.amount) END
                      from ln_finance_repay_schedule a ,ln_credit_transfer lc, bs_sub_account auth
                      where repay_serial = 1 and a.`status` = 'REPAIED' and lc.in_loan_relation_id = relation_id  AND lc.in_user_id = #{userId}
                      AND auth.id = lc.in_sub_account_id AND auth.product_type = 'REG_D'
					)
					+
					(
						select CASE WHEN sum(open_balance) is NULL THEN 0 ELSE sum(open_balance) END
						from bs_user u,bs_account ba,bs_sub_account bsa,bs_product bp
						where u.id = #{userId} and u.id = ba.user_id and ba.id = bsa.account_id
						and bsa.product_id = bp.id 
						and bsa.`status` in (2,7) and bsa.product_type in ('REG', 'AUTH_7', 'RED_7', 'AUTH_YUN', 'RED', 'AUTH_ZSD', 'RED_ZSD', 'AUTH_FREE', 'RED_FREE') and bsa.open_balance > 0
					)
		) as invest_amount)as st
  
  </select>
  
  
  <select id="countMyInvestByStatus" resultType="java.lang.Integer" parameterType="java.util.Map">
	select
     	COUNT(*)
   	from bs_sub_account b,bs_account a,bs_product p
	where
	  b.account_id = a.id and b.product_id = p.id and b.status != 1 and b.status != 6 and
	  b.product_type in ('REG', 'AUTH_YUN', 'AUTH_ZSD','AUTH_7','AUTH_FREE')  AND
    a.user_id=  #{userId , jdbcType=INTEGER}
    <if test="investStatus != null and investStatus != '' and investStatus == 'HOLDING'">
    	AND (b.status = 2  OR b.status = 7 )
    </if>
    <if test="investStatus != null and investStatus != '' and investStatus == 'FINISH'">
    	AND  b.status = 5
    </if>
  </select>
  
  <select id="bgwMyInvestByUserId"   resultMap="VoResultMap" parameterType="java.util.Map" >
SELECT 
		*,
		CASE WHEN aa.`status` = 7 THEN 'RETURING' 
		WHEN aa.`status` = 5 THEN  'FINISH' 
		WHEN aa.`status` = 2 AND aa.investDay &lt;= 7 THEN 'EXPIRE'
        WHEN aa.`status` = 2 AND aa.investDay > 7 THEN 'HOLDING' END order_status
FROM (
        select
        	b.id id,p.`name` as product_name,p.property_id,
            IFNULL(b.open_balance, 0) AS balance,
	    	b.open_time openTime,
	    	b.interest_begin_date interestBeginDate,
	    	b.status,
	    	b.product_rate product_rate,
	    	p.id productId,
	    	p.term term,p.property_type propertyType,b.product_type AS productType,
	    	case when p.term = 12  then (365 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				when p.term = -7  then (7 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				else (p.term * 30 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				) end investDay,
			b.last_finish_interest_date investEndTime,
			c.amount AS red_amount, p.start_time,0 AS ticket_apr,0 AS interest_amount
	    	from bs_sub_account b ,bs_account a,bs_product p,
	    	bs_pay_orders o LEFT JOIN bs_red_packet_info c ON o.order_no = c.order_no AND c.`status` = 'USED'
		<where>
			b.account_id = a.id and b.product_id = p.id and b.status != 1 and b.status != 6 and
          <if test="type == 'REG'">
            b.product_type in ('REG')
          </if>
          <if test="type != 'REG'">
            b.product_type=#{type}
          </if>
          and (o.trans_type = 'CARD_BUY_PRODUCT' OR o.trans_type = 'BALANCE_BUY_PRODUCT') AND
		   a.user_id=#{userId , jdbcType=INTEGER} 
		    <if test="investStatus != null and investStatus != '' and investStatus == 'HOLDING'">
		    	AND (b.status = 2  OR b.status = 7 )
		    </if>
		    <if test="investStatus != null and investStatus != '' and investStatus == 'FINISH'">
		    	AND  b.status = 5
		    </if>
		    AND o.sub_account_id = b.id
		</where>
		UNION
		
        select
        	b.id id,p.`name` as product_name,p.property_id,
            IFNULL(b.open_balance, 0)+IFNULL(red.open_balance, 0) AS balance,
	    	b.open_time openTime,
	    	b.interest_begin_date interestBeginDate,
	    	b.status,
	    	b.product_rate product_rate,
	    	p.id productId,
	    	p.term term,p.property_type propertyType,b.product_type AS productType,
	    	case when p.term = 12  then (365 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				when p.term = -7  then (7 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				)
				else (p.term * 30 -
					case when datediff(now(), b.interest_begin_date) &lt; 0 then 0 else datediff(now(), b.interest_begin_date)  end
				) end investDay,
			b.last_finish_interest_date investEndTime,
			red.open_balance AS red_amount, p.start_time,
			ifnull(ti.ticket_apr,'0') AS ticket_apr, ifnull(ti.interest_amount,'0') AS interest_amount
	    	from bs_sub_account b LEFT JOIN bs_sub_account_pair pair ON pair.auth_account_id = b.id
              LEFT JOIN bs_sub_account red ON red.id = pair.red_account_id 
              LEFT JOIN bs_interest_ticket_info ti ON b.id = ti.auth_account_id
              ,bs_account a,bs_product p
		<where>
			b.account_id = a.id and b.product_id = p.id and b.status != 1 and b.status != 6 and
          <if test="type == 'REG'">
            b.product_type in ('AUTH_YUN', 'AUTH_ZSD','AUTH_7','AUTH_FREE')
          </if>
          <if test="type != 'REG'">
            b.product_type=#{type}
          </if>
          AND  a.user_id=#{userId , jdbcType=INTEGER} 
		    <if test="investStatus != null and investStatus != '' and investStatus == 'HOLDING'">
		    	AND (b.status = 2  OR b.status = 7 )
		    </if>
		    <if test="investStatus != null and investStatus != '' and investStatus == 'FINISH'">
		    	AND  b.status = 5
		    </if>
		</where>
		
	) aa
	
   <if test="investStatus != null and investStatus != '' and investStatus == 'HOLDING'">
   	order by field(order_status,'RETURING','EXPIRE','HOLDING','FINISH') , aa.interestBeginDate desc, aa.id desc
   </if>
   <if test="investStatus != null and investStatus != '' and investStatus == 'FINISH'">
   	order by aa.investEndTime DESC , aa.id DESC
   </if>
    limit #{start , jdbcType=INTEGER}, #{pageSize , jdbcType=INTEGER}
  </select>
  
  
  <select id="zanMyInvestByUserId"   resultMap="VoResultMap" parameterType="java.util.Map" >
    SELECT aa.* FROM ((
    <!--委托中-->
    SELECT auth.id,auth.product_id, p.`name` as product_name, p.base_rate as product_rate, auth.open_balance, p.term, auth.open_time, regd.balance, NULL AS return_balance, auth.interest_begin_date, regd.`status`, "ENTRUSTING" as entrust_status,p.return_type, 1 AS order_no
  		 ,0 return_amount,
		  0 receive_amount,
		  NULL done_time 
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 6)
    AND p.id = auth.product_id AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) &lt; 0
    AND b.user_id = #{userId}
    ) UNION (
    <!-- 回款中 -->
    SELECT auth.id,auth.product_id, p.`name` as product_name, p.base_rate as product_rate, auth.open_balance, p.term, auth.open_time, regd.balance, c.trans_amount  AS return_balance, auth.interest_begin_date, regd.`status`, "RETURNING" as entrust_status,p.return_type, 2 AS order_no
    	  ,(SELECT CASE WHEN SUM(IFNULL(aa.plan_interest,0)+IFNULL(aa.plan_principal,0)) IS NULL THEN 0 ELSE SUM(IFNULL(aa.plan_interest,0)+IFNULL(aa.plan_principal,0)) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND aa.`status` = 'REPAIED')+ CASE WHEN c.trans_amount IS NULL THEN 0 ELSE c.trans_amount END  return_amount,
		  (SELECT CASE WHEN SUM(IFNULL(aa.plan_interest, 0)+IFNULL(aa.plan_principal,0)) IS NULL THEN 0 ELSE SUM(IFNULL(aa.plan_interest, 0)+IFNULL(aa.plan_principal,0)) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND (aa.`status` = 'INIT' OR aa.`status` = 'REPAYING'))  receive_amount
    	  , NULL done_time 
    FROM bs_sub_account auth LEFT JOIN bs_account_jnl c ON c.sub_account_id1 = auth.id AND c.trans_code = 'AUTH_BACK', bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND regd.`status` NOT IN (1, 5, 6, 7)
    AND p.id = auth.product_id AND regd.balance > 0 AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND b.user_id = #{userId}
    ) UNION (
    <!-- 回款结束-->
    SELECT auth.id,auth.product_id, p.`name` as product_name, p.base_rate as product_rate, auth.open_balance, p.term, auth.open_time, regd.balance, c.trans_amount AS return_balance, auth.interest_begin_date, regd.`status`, "RETURN_OVER" as entrust_status,p.return_type, 3 AS order_no
    	  ,(SELECT CASE WHEN SUM(aa.plan_interest) IS NULL THEN 0 ELSE SUM(aa.plan_interest) END FROM `ln_finance_repay_schedule` aa, ln_loan_relation ab WHERE aa.relation_id = ab.id AND ab.bs_sub_account_id = regd.id AND aa.`status` = 'REPAIED') return_amount,
		  0 receive_amount,
          auth.open_time done_time
    FROM bs_sub_account auth LEFT JOIN bs_account_jnl c ON c.sub_account_id1 = auth.id AND c.trans_code = 'AUTH_BACK', bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) AND auth.account_id = b.id
    AND p.id = auth.product_id AND regd.`status` IN (5, 7)
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND (SELECT COUNT(lr.id) FROM ln_loan_relation lr WHERE lr.bs_sub_account_id = regd.id ) > 0
    AND b.user_id = #{userId}
    ) UNION (
    <!--委托结束-->
    SELECT auth.id,auth.product_id, p.`name` as product_name, p.base_rate as product_rate, auth.open_balance, p.term, auth.open_time, regd.balance, auth.open_balance AS return_balance, auth.interest_begin_date, regd.`status`,"ENTRUST_OVER" as entrust_status,p.return_type, 4 AS order_no
    	  ,0 return_amount,
		  0 receive_amount,
          auth.open_time done_time
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` = 5 AND regd.`status`  = 5 AND auth.balance = 0
    AND p.id = auth.product_id AND regd.balance = 0 AND auth.account_id = b.id
    AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    AND (SELECT COUNT(lr.id) FROM ln_loan_relation lr WHERE lr.bs_sub_account_id = regd.id ) = 0
    AND b.user_id = #{userId}
    )) AS aa
    <where>
	  	<if test="investStatus != null and investStatus != '' and investStatus == 'HOLDING'">
	    	AND  aa.entrust_status = 'RETURNING'
	    </if>
	    <if test="investStatus != null and investStatus != '' and investStatus == 'FINISH'">
	    	AND  (aa.entrust_status = 'RETURN_OVER'  OR  aa.entrust_status = 'ENTRUST_OVER' )
	    </if>
	    <if test="investStatus != null and investStatus != '' and investStatus == 'ENTRUSTING'">
	    	AND  aa.entrust_status = 'ENTRUSTING'
	    </if>
    </where>
    
    <if test="investStatus != null and investStatus != '' and investStatus == 'HOLDING'">
    	ORDER BY  aa.interest_begin_date DESC
    </if>
    <if test="investStatus != null and investStatus != '' and investStatus == 'FINISH'">
    	ORDER BY  field(aa.entrust_status,'RETURN_OVER','ENTRUST_OVER'),aa.done_time DESC
    </if>
    <if test="investStatus != null and investStatus != '' and investStatus == 'ENTRUSTING'">
    	ORDER BY  aa.open_time DESC
    </if>
    
    
    LIMIT #{start}, #{numPerPage}
  </select>
    
   <select id="countMyInvestZanByStatus" resultType="java.lang.Integer" parameterType="java.util.Map">
    SELECT 
		COUNT(*)
    FROM bs_sub_account auth, bs_sub_account regd, bs_sub_account_pair pair, bs_product p, bs_account b
    WHERE auth.product_type = 'AUTH' AND regd.product_type = 'REG_D'
    AND pair.auth_account_id = auth.id AND pair.reg_d_account_id = regd.id
    AND auth.`status` NOT IN (1, 6) 
    AND p.id = auth.product_id AND auth.account_id = b.id
    AND b.user_id = #{userId}
    <if test="investStatus != null and investStatus != '' and investStatus == 'HOLDING'">
    	AND regd.`status` NOT IN (1, 5, 6, 7)
    	AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    	AND regd.balance > 0
    </if>
    <if test="investStatus != null and investStatus != '' and investStatus == 'FINISH'">
    	AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) >= 0
    	AND ((
    		regd.`status` = 5 AND regd.balance = 0
            AND (SELECT COUNT(lr.id) FROM ln_loan_relation lr WHERE lr.bs_sub_account_id = regd.id ) = 0
    	) OR (regd.`status` IN (5, 7) AND (SELECT COUNT(lr.id) FROM ln_loan_relation lr WHERE lr.bs_sub_account_id = regd.id ) > 0) )
    </if>
    <if test="investStatus != null and investStatus != '' and investStatus == 'ENTRUSTING'">
    	AND regd.`status` NOT IN (1, 6)
    	AND DATEDIFF(NOW(),ADDDATE(auth.interest_begin_date, (SELECT config.conf_value FROM bs_sys_config config WHERE config.conf_key = 'DAY_4_WAIT_LOAN'))) &lt; 0
    </if>
    
  </select>
  
   <select id="zanMyInvestCurrentHoldByUserId" resultType="java.lang.Double" parameterType="java.util.Map">
		SELECT(
			(SELECT CASE WHEN SUM(a.open_balance) IS NULL THEN 0 ELSE SUM(a.open_balance) END FROM 
			bs_sub_account a,
			bs_account b 
			WHERE 
			a.account_id = b.id
			AND a.product_type = 'AUTH'
			AND a.`status` NOT IN (1, 6)
			AND b.user_id = #{userId} )
			-
			(SELECT CASE WHEN SUM(a.amount) IS NULL THEN 0 ELSE SUM(a.amount) END FROM bs_standby_return a WHERE a.user_id = #{userId}  )
			-
			(
				SELECT CASE WHEN SUM(d.principal)  IS NULL THEN 0 ELSE SUM(d.principal)  END
				 FROM ln_loan_relation a ,ln_finance_repay_schedule b, bs_sub_account c, bs_loan_finance_repay d
				WHERE a.id = b.relation_id AND c.id = a.bs_sub_account_id AND c.product_type = 'REG_D'
				AND d.finance_repay_schedule_id = b.id AND d.`status` = 'REPAIED'
				AND a.bs_user_id = #{userId}
			)
			-
			(
			    select CASE WHEN sum(lc.in_amount-lc.amount) IS NULL THEN 0 ELSE sum(lc.in_amount-lc.amount) END
                from ln_finance_repay_schedule a ,ln_credit_transfer lc, bs_sub_account reg
                where repay_serial = 1 and a.`status` = 'REPAIED' and lc.in_loan_relation_id = relation_id  AND lc.in_user_id = #{userId}
                AND reg.id = lc.in_sub_account_id AND reg.product_type = 'REG_D'
			)
		)
		
  </select>
  
  <select id="selectClosest" resultMap="BaseResultMap" parameterType="java.util.Map">
    SELECT a.* FROM bs_sub_account a, bs_account b, bs_product c
    WHERE b.user_id = #{userId} AND a.open_time &lt;= #{time} AND a.product_type IN ('REG', 'AUTH')
      AND a.account_id = b.id AND a.`status` = 2 AND a.product_id = c.id AND c.activity_type != 'NEW_BUYER'
      AND !FIND_IN_SET('H5_178', show_terminal) AND !FIND_IN_SET('PC_178', show_terminal)
      AND !FIND_IN_SET('H5_KQ', show_terminal) AND !FIND_IN_SET('PC_KQ', show_terminal)
      AND !FIND_IN_SET('H5_HN', show_terminal) AND !FIND_IN_SET('PC_HN', show_terminal)
      AND !FIND_IN_SET('H5_RUIAN', show_terminal) AND !FIND_IN_SET('PC_RUIAN', show_terminal)
    ORDER BY a.open_time DESC LIMIT 1
  </select>  
  
  <select id="selectInvestInfoByActivity" resultMap="VoResultMap" parameterType="java.util.Map">	
	SELECT a.open_time, CASE WHEN a.product_type in ('REG', 'AUTH_YUN', 'RED','AUTH_ZSD','RED_ZSD', 
	'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE') 
	and c.activity_type != 'NEW_BUYER' and c.name like '%港湾计划%'
	AND !FIND_IN_SET('H5_178', c.show_terminal) AND !FIND_IN_SET('PC_178', c.show_terminal)
    AND !FIND_IN_SET('H5_KQ', c.show_terminal) AND !FIND_IN_SET('PC_KQ', c.show_terminal)
    AND !FIND_IN_SET('H5_HN', c.show_terminal) AND !FIND_IN_SET('PC_HN', c.show_terminal)
    AND !FIND_IN_SET('H5_RUIAN', c.show_terminal) AND !FIND_IN_SET('PC_RUIAN', c.show_terminal)
	THEN a.open_balance + IFNULL(red.open_balance, 0) else 0 END as balance, CASE c.term
	                    WHEN 1 THEN 30
	                    WHEN 3 THEN 90
	                    WHEN 6 THEN 180
						WHEN 9 THEN 270 
	                    WHEN 12 THEN 365 END as investDay 
	FROM bs_sub_account a
	LEFT JOIN bs_account b on a.account_id = b.id
    LEFT JOIN bs_product c on a.product_id = c.id
    LEFT JOIN bs_sub_account_pair pr ON pr.auth_account_id = a.id 
    LEFT JOIN bs_sub_account red ON red.id = pr.red_account_id
	WHERE a.`status` = 2 
	AND b.user_id = #{userId} AND a.open_time BETWEEN #{startTime} AND #{endTime}
	ORDER BY a.id limit 1
  </select>
  <!-- ===========================存管匹配相关S=================================== --> 
  <resultMap id="DepFixedMatchMap" type="com.pinting.business.model.vo.BsSubAccountVO4DepFixedMatch">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="product_id" property="productId" jdbcType="INTEGER" />
    <result column="product_type" property="productType" jdbcType="VARCHAR" />
    <result column="product_rate" property="productRate" jdbcType="DOUBLE" />
    <result column="open_balance" property="openBalance" jdbcType="DOUBLE" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
    <result column="available_balance" property="availableBalance" jdbcType="DOUBLE" />
    <result column="freeze_balance" property="freezeBalance" jdbcType="DOUBLE" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="interest_begin_date" property="interestBeginDate" jdbcType="DATE" />
	<result column="user_id" property="userId" jdbcType="INTEGER" />
	<result column="agent_id" property="agentId" jdbcType="INTEGER" />
	<result column="red_sub_account_id" property="redSubAccountId" jdbcType="INTEGER" />
	<result column="red_available_balance" property="redAvailableBalance" jdbcType="DOUBLE" />
	<result column="hf_user_id" property="hfUserId" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="DepStageCanMatch4ZanMap" type="com.pinting.business.model.vo.BsCanMatch4ZanSubAccountVO">
  	<id column="id" property="id" jdbcType="INTEGER" />
    <result column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="product_id" property="productId" jdbcType="INTEGER" />
    <result column="product_type" property="productType" jdbcType="VARCHAR" />
    <result column="product_rate" property="productRate" jdbcType="DOUBLE" />
    <result column="open_balance" property="openBalance" jdbcType="DOUBLE" />
    <result column="balance" property="balance" jdbcType="DOUBLE" />
    <result column="available_balance" property="availableBalance" jdbcType="DOUBLE" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="interest_begin_date" property="interestBeginDate" jdbcType="DATE" />
	<result column="user_id" property="userId" jdbcType="INTEGER" />
	<result column="agent_id" property="agentId" jdbcType="INTEGER" />
	<result column="term" property="term" jdbcType="INTEGER" />
	<result column="hf_user_id" property="hfUserId" jdbcType="VARCHAR" />
  </resultMap>
  
  
  <!-- 存管定期，待匹配列表 -->
  <select id="depFixedNormalWait4MatchList" resultMap="DepFixedMatchMap">
  select DISTINCT * from (select a.id,a.account_id,a.product_id,a.product_type,
		a.open_balance,a.balance,a.available_balance,a.freeze_balance,
  		a.`status`,a.interest_begin_date,
		bu.id user_id,bu.agent_id,hfu.hf_user_id,
		CASE WHEN sred.available_balance IS NULL THEN 0 ELSE sred.available_balance END red_available_balance,
		sred.id red_sub_account_id
	from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
	bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
	ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
	LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
	LEFT JOIN bs_sub_account sred on sred.id = sp.red_account_id and sred.product_type=#{redProType}
	where a.account_id = ba.id and ba.user_id =bu.id
	and a.product_type=#{productType} and b.id is null
	and a.available_balance+ifnull(sred.available_balance,0) > #{invstAmt}
	and a.interest_begin_date &lt; DATE(NOW())
	and a.`status`=2
	and hfu.user_id = bu.id
	<if test="vipUserIdList != null and vipUserIdList !=''">
		and ba.user_id not in 
		<foreach collection="vipUserIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	ORDER BY a.interest_begin_date desc,a.available_balance desc
  )t1
  UNION ALL
  select DISTINCT * from (select a.id,a.account_id,a.product_id,a.product_type,
		a.open_balance,a.balance,a.available_balance,a.freeze_balance,
  		a.`status`,a.interest_begin_date,
		bu.id user_id,bu.agent_id,hfu.hf_user_id,
		CASE WHEN sred.available_balance IS NULL THEN 0 ELSE sred.available_balance END red_available_balance,
		sred.id red_sub_account_id
	from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
	bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
	ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
	LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
	LEFT JOIN bs_sub_account sred on sred.id = sp.red_account_id and sred.product_type=#{redProType}
	where a.account_id = ba.id and ba.user_id =bu.id
	and a.product_type=#{productType} and b.id is null
	and a.available_balance+ifnull(sred.available_balance,0) > #{invstAmt}
	and a.interest_begin_date = DATE(NOW())
	and a.`status`=2
	and hfu.user_id = bu.id
	<if test="vipUserIdList != null and vipUserIdList !=''">
		and ba.user_id not in 
		<foreach collection="vipUserIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	ORDER BY a.interest_begin_date desc,a.available_balance desc
  )t2
  </select>
  
  <!-- 存管定期，待匹配总金额 -->
  <select id="depFixedNormalSumAmountWait4Match" resultType="java.lang.Double">
  select CASE WHEN sum(t.available_balance+red_available_balance) is null then 0 else 
  	sum(t.available_balance+red_available_balance) end
  from(
	  (select a.id,a.account_id,a.product_id,a.product_type,
		a.open_balance,a.balance,a.available_balance,a.freeze_balance,
  		a.`status`,a.interest_begin_date,
		bu.id user_id,bu.agent_id,hfu.hf_user_id,
		CASE WHEN sred.available_balance IS NULL THEN 0 ELSE sred.available_balance END red_available_balance,
		sred.id red_sub_account_id
		from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
		bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
		ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
		LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
		LEFT JOIN bs_sub_account sred on sred.id = sp.red_account_id and sred.product_type=#{redProType}
		where a.account_id = ba.id and ba.user_id =bu.id
		and a.product_type=#{productType} and b.id is null 
		and a.available_balance+ifnull(sred.available_balance,0) > #{invstAmt}
		and a.interest_begin_date &lt; DATE(NOW())
		and a.`status`=2
		and hfu.user_id = bu.id
		<if test="vipUserIdList != null and vipUserIdList !=''">
			and ba.user_id not in 
			<foreach collection="vipUserIdList" item="userId" index="index"
				open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		ORDER BY a.interest_begin_date desc,a.available_balance desc
	  )
	  UNION ALL
	  (select a.id,a.account_id,a.product_id,a.product_type,
			a.open_balance,a.balance,a.available_balance,a.freeze_balance,
	  		a.`status`,a.interest_begin_date,
			bu.id user_id,bu.agent_id,hfu.hf_user_id,
			CASE WHEN sred.available_balance IS NULL THEN 0 ELSE sred.available_balance END red_available_balance,
			sred.id red_sub_account_id
		from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
		bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
		ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
		LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
		LEFT JOIN bs_sub_account sred on sred.id = sp.red_account_id and sred.product_type=#{redProType}
		where a.account_id = ba.id and ba.user_id =bu.id
		and a.product_type=#{productType} and b.id is null 
		and a.available_balance+ifnull(sred.available_balance,0) > #{invstAmt} 
		and a.interest_begin_date = DATE(NOW())
		and a.`status`=2
		and hfu.user_id = bu.id
		<if test="vipUserIdList != null and vipUserIdList !=''">
			and ba.user_id not in 
			<foreach collection="vipUserIdList" item="userId" index="index"
				open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		ORDER BY a.interest_begin_date desc,a.available_balance desc
	  )
  )t
  </select>

    <!-- 查询债权匹配最优匹配方案，匹配理财人 -->
    <select id="depFixedNormalWait4Match" resultType="com.pinting.business.model.vo.BsSubAccountVO4DepFixedMatch">
        <if test="oneLevelAuthFlag != null and oneLevelAuthFlag == true">
        (SELECT DISTINCT
        *
        FROM
        (
            SELECT
                a.id,
                a.account_id,
                a.product_id,
                a.product_type,
                a.open_balance,
                a.balance,
                a.available_balance,
                a.freeze_balance,
                a.`status`,
                a.interest_begin_date,
                bu.id user_id,
                bu.agent_id,
                hfu.hf_user_id,
                IFNULL(sred.available_balance, 0) AS red_available_balance,
                sred.id red_sub_account_id
            FROM
                bs_account ba
            INNER JOIN bs_user bu ON ba.user_id = bu.id
            INNER JOIN bs_hfbank_user_ext hfu ON hfu.user_id = bu.id
            INNER JOIN bs_sub_account a ON a.account_id = ba.id
            AND a.`status` = 2
            AND a.product_type = #{productType}
            AND a.interest_begin_date &lt;= DATE(NOW())
            LEFT JOIN bs_deposition_quit_apply b ON a.id = b.sub_account_id
            AND b.`status` IN ('INIT', 'PASS', 'PROCESS')
            LEFT JOIN bs_sub_account_pair sp ON sp.auth_account_id = a.id
            LEFT JOIN bs_sub_account sred ON sred.id = sp.red_account_id
            AND sred.product_type = #{redProType}
            WHERE
              1 = 1
            AND b.id IS NULL
            <if test="loanMatchRange.oneLevelMatchAmount != null">
            AND a.available_balance + IFNULL(sred.available_balance, 0) &gt;= #{loanMatchRange.oneLevelMatchAmount}
            </if>
            <if test="vipUserIdList != null and vipUserIdList !='true'">
                and ba.user_id not in
                <foreach collection="vipUserIdList" item="userId" index="index"
                         open="(" close=")" separator=",">
                    #{userId}
                </foreach>
            </if>
        ORDER BY
                (a.available_balance + IFNULL(sred.available_balance, 0)) DESC
        ) t1 limit #{loanMatchRange.redisLevelQueueCount})
        </if>
        <if test="oneLevelAuthFlag != null and oneLevelAuthFlag == true">
            <choose>
                <when test="twoLevelAuthFlag != null and twoLevelAuthFlag == true">
                    UNION ALL
                </when>
                <when test="threeLevelAuthFlag != null and threeLevelAuthFlag == true">
                    UNION ALL
                </when>
            </choose>
        </if>
        <if test="twoLevelAuthFlag != null and twoLevelAuthFlag == true">
        (SELECT DISTINCT
        *
        FROM
        (
            SELECT
            a.id,
            a.account_id,
            a.product_id,
            a.product_type,
            a.open_balance,
            a.balance,
            a.available_balance,
            a.freeze_balance,
            a.`status`,
            a.interest_begin_date,
            bu.id user_id,
            bu.agent_id,
            hfu.hf_user_id,
            IFNULL(sred.available_balance, 0) AS red_available_balance,
            sred.id red_sub_account_id
            FROM
            bs_account ba
            INNER JOIN bs_user bu ON ba.user_id = bu.id
            INNER JOIN bs_hfbank_user_ext hfu ON hfu.user_id = bu.id
            INNER JOIN bs_sub_account a ON a.account_id = ba.id
            AND a.`status` = 2
            AND a.product_type = #{productType}
            AND a.interest_begin_date &lt;= DATE(NOW())
            LEFT JOIN bs_deposition_quit_apply b ON a.id = b.sub_account_id
            AND b.`status` IN ('INIT', 'PASS', 'PROCESS')
            LEFT JOIN bs_sub_account_pair sp ON sp.auth_account_id = a.id
            LEFT JOIN bs_sub_account sred ON sred.id = sp.red_account_id
            AND sred.product_type = #{redProType}
            WHERE
            1 = 1
            AND b.id IS NULL
            <if test="loanMatchRange.twoLevelMatchAmount != null">
                AND a.available_balance + IFNULL(sred.available_balance, 0) &gt;= #{loanMatchRange.twoLevelMatchAmount}
            </if>
            <if test="loanMatchRange.oneLevelMatchAmount != null">
                AND a.available_balance + IFNULL(sred.available_balance, 0) &lt; #{loanMatchRange.oneLevelMatchAmount}
            </if>
            <if test="vipUserIdList != null and vipUserIdList !='true'">
                and ba.user_id not in
                <foreach collection="vipUserIdList" item="userId" index="index"
                         open="(" close=")" separator=",">
                    #{userId}
                </foreach>
            </if>
            ORDER BY
              (a.available_balance + IFNULL(sred.available_balance, 0)) DESC
        ) t1 limit #{loanMatchRange.redisLevelQueueCount})
        </if>
        <if test="twoLevelAuthFlag != null and twoLevelAuthFlag == true and threeLevelAuthFlag != null and threeLevelAuthFlag == true">
        UNION ALL
        </if>
        <if test="threeLevelAuthFlag != null and threeLevelAuthFlag == true">
        (SELECT DISTINCT
        *
        FROM
        (
            SELECT
            a.id,
            a.account_id,
            a.product_id,
            a.product_type,
            a.open_balance,
            a.balance,
            a.available_balance,
            a.freeze_balance,
            a.`status`,
            a.interest_begin_date,
            bu.id user_id,
            bu.agent_id,
            hfu.hf_user_id,
            IFNULL(sred.available_balance, 0) AS red_available_balance,
            sred.id red_sub_account_id
            FROM
            bs_account ba
            INNER JOIN bs_user bu ON ba.user_id = bu.id
            INNER JOIN bs_hfbank_user_ext hfu ON hfu.user_id = bu.id
            INNER JOIN bs_sub_account a ON a.account_id = ba.id
            AND a.`status` = 2
            AND a.product_type = #{productType}
            AND a.interest_begin_date &lt;= DATE(NOW())
            LEFT JOIN bs_deposition_quit_apply b ON a.id = b.sub_account_id
            AND b.`status` IN ('INIT', 'PASS', 'PROCESS')
            LEFT JOIN bs_sub_account_pair sp ON sp.auth_account_id = a.id
            LEFT JOIN bs_sub_account sred ON sred.id = sp.red_account_id
            AND sred.product_type = #{redProType}
            WHERE
            1 = 1
            AND b.id IS NULL
            <if test="loanMatchRange.threeLevelMatchAmount != null">
                AND a.available_balance + IFNULL(sred.available_balance, 0) &gt;= #{loanMatchRange.threeLevelMatchAmount}
            </if>
            <if test="loanMatchRange.twoLevelMatchAmount != null">
                AND a.available_balance + IFNULL(sred.available_balance, 0) &lt; #{loanMatchRange.twoLevelMatchAmount}
            </if>
            <if test="vipUserIdList != null and vipUserIdList !='true'">
                and ba.user_id not in
                <foreach collection="vipUserIdList" item="userId" index="index"
                         open="(" close=")" separator=",">
                    #{userId}
                </foreach>
            </if>
            ORDER BY
              (a.available_balance + IFNULL(sred.available_balance, 0)) DESC
        ) t1 limit #{loanMatchRange.redisLevelQueueCount})
        </if>
    </select>

    <!-- 查询匹配站岗户+红包户可用余额 -->
    <select id="depFixedAvailableBalance4MatchById" resultType="com.pinting.business.model.vo.BsSubAccountVO4Match">
        SELECT
          a.id AS subAccountId,
          a.available_balance
          <choose>
            <when test="redAccountId != null and redAccountId !=''">
                ,c.id AS redSubAccountId,
                c.red_available_balance
            </when>
            <otherwise>
                ,0 AS red_available_balance
            </otherwise>
          </choose>
        FROM
          (SELECT id, IFNULL(available_balance, 0) AS available_balance, `status` FROM bs_sub_account where id = #{authAccountId}) a
          LEFT JOIN bs_deposition_quit_apply b ON a.id = b.sub_account_id
          AND b.`status` IN ('INIT', 'PASS', 'PROCESS')
          <if test="redAccountId != null and redAccountId !=''">
          ,(SELECT id, IFNULL(available_balance, 0) AS red_available_balance FROM bs_sub_account where id = #{redAccountId}) c
          </if>
        WHERE
          a.`status` = 2
        AND b.id IS NULL
    </select>

  <!-- 存管分期，债权匹配时查询可以匹配的小额AUTH户列表 -->
  <select id="canSmallMatch4ZanListDepStage"  resultMap="DepStageCanMatch4ZanMap">
    select b.term,e.id as user_id,e.agent_id ,a.id,a.balance,a.available_balance,a.open_balance,a.account_id,a.product_type,
    a.status,a.interest_begin_date,a.product_rate,hfu.hf_user_id
    from bs_sub_account a,bs_product b,bs_property_info c,bs_account d,bs_user e,bs_hfbank_user_ext hfu
    where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id
    and e.id=d.user_id and hfu.user_id = e.id
    <if test="matchLimitAmount != null and matchLimitAmount != ''">
      and a.available_balance &lt; #{matchLimitAmount} and a.available_balance > 0
    </if>
    <if test="term != null and term != ''">
      and b.term =#{term}
    </if>
    <if test="productType != null and productType != ''">
      and a.product_type=#{productType}
    </if>
    <if test="propertySymbol != null and propertySymbol != ''">
      and c.property_symbol=#{propertySymbol}
    </if>
    <if test="interestBeginDate != null and interestBeginDate != ''">
      and a.interest_begin_date=#{interestBeginDate}
    </if>
    <if test="userIdList != null and userIdList !='' and isSuper == 'yes'">
      and d.user_id in
      <foreach collection="userIdList" item="userId" index="index"
               open="(" close=")" separator=",">
        #{userId}
      </foreach>
    </if>
    <if test="userIdList != null and userIdList !='' and isSuper == 'no'">
      and d.user_id not in
      <foreach collection="userIdList" item="userId" index="index"
               open="(" close=")" separator=",">
        #{userId}
      </foreach>
    </if>
    order by a.available_balance asc
  </select>
  
  
  <!-- 债权匹配时查询可以匹配的AUTH户列表 -->
  	<select id="canMatch4ZanListDepStage"  resultMap="DepStageCanMatch4ZanMap">
  	select b.term,e.id as user_id,e.agent_id ,a.id,a.balance,a.available_balance,a.open_balance,a.account_id,a.product_type,
  	a.status,a.interest_begin_date,a.product_rate,hfu.hf_user_id 
  	from bs_sub_account a,bs_product b,bs_property_info c,bs_account d,bs_user e,bs_hfbank_user_ext hfu
	where a.`status`=2 and d.id=a.account_id and a.product_id = b.id and b.property_id = c.id
	and e.id=d.user_id and hfu.user_id = e.id
	<if test="matchLimitAmount != null and matchLimitAmount != ''">
		and a.available_balance >=#{matchLimitAmount} 
	</if>
	<if test="term != null and term != ''"> 
		and b.term =#{term} 
	</if>
	<if test="productType != null and productType != ''"> 
		and a.product_type=#{productType} 
	</if>
	<if test="propertySymbol != null and propertySymbol != ''">
		and c.property_symbol=#{propertySymbol}
	</if>
	<if test="interestBeginDate != null and interestBeginDate != ''">
		and a.interest_begin_date=#{interestBeginDate}
	</if>
	<if test="userIdList != null and userIdList !='' and isSuper == 'yes'">
		and d.user_id in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	<if test="userIdList != null and userIdList !='' and isSuper == 'no'">
		and d.user_id not in 
		<foreach collection="userIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	  order by a.open_balance desc
</select>

<!--====================== 债权转让时查找合适的债权受让人=============== -->
 <select id="query4TransferCommon" resultMap="DepFixedMatchMap">
  select t.* from (
  	select a.id,a.account_id,a.product_id,a.product_type,
		a.open_balance,a.balance,a.available_balance,a.freeze_balance,
  		a.`status`,a.interest_begin_date,
		bu.id user_id,bu.agent_id,hfu.hf_user_id,
		CASE WHEN sred.available_balance IS NULL THEN 0 
		ELSE CASE WHEN sred.available_balance >#{principal} THEN #{principal}
			ELSE sred.available_balance END
		   END red_available_balance,
		CASE
			WHEN sred.available_balance IS NULL THEN
				a.available_balance
			ELSE
				CASE
				WHEN sred.available_balance >#{principal} THEN
					#{principal}+a.available_balance
				ELSE
					sred.available_balance+a.available_balance
				END
			END sumBalance,
		sred.id red_sub_account_id
	from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
	bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
	ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
	LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
	LEFT JOIN bs_sub_account sred on sred.id = sp.red_account_id and sred.product_type=#{redProType}
	where a.account_id = ba.id and ba.user_id =bu.id
	and a.product_type=#{productType} and b.id is null
	and a.available_balance>0
	and a.interest_begin_date &lt;= DATE(NOW())
	and a.`status`=2
	and hfu.user_id = bu.id
		<if test="outUserId != null or outUserId !=''">
			AND bu.id != #{outUserId}
		</if>
		<if test="inAgentViewConfig == null or inAgentViewConfig =='no'">
			AND (bu.agent_id IS NULL
					or bu.agent_id not in 
					(select agent_id from bs_agent_view_config where agent_id!=49 GROUP BY agent_id)
				)
		</if>
		<if test="inAgentViewConfig != null and inAgentViewConfig =='yes'">
			and bu.agent_id in 
			(select agent_id from bs_agent_view_config where agent_id!=49 GROUP BY agent_id)
		</if>
		<if test="vipIdList != null and vipIdList !='' and isSuper == 'yes'">
			and ba.user_id in 
			<foreach collection="vipIdList" item="userId" index="index"
				open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		<if test="vipIdList != null and vipIdList !='' and isSuper == 'no'">
			and ba.user_id not in 
			<foreach collection="vipIdList" item="userId" index="index"
				open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
	)t where sumBalance >= #{amount}
	ORDER BY sumBalance,interest_begin_date
	limit 1
  </select>
	
 <select id="query4TransferZsd" resultMap="DepFixedMatchMap">
  select t.* from (
  	select a.id,a.account_id,a.product_id,a.product_type,
		a.open_balance,a.balance,a.available_balance,a.freeze_balance,
  		a.`status`,a.interest_begin_date,
		bu.id user_id,bu.agent_id,hfu.hf_user_id,
		CASE WHEN sred.available_balance IS NULL THEN 0 
		ELSE CASE WHEN sred.available_balance >#{principal} THEN #{principal}
			ELSE sred.available_balance END
		   END red_available_balance,
		CASE
			WHEN sred.available_balance IS NULL THEN
				a.available_balance
			ELSE
				CASE
				WHEN sred.available_balance >#{principal} THEN
					#{principal}+a.available_balance
				ELSE
					sred.available_balance+a.available_balance
				END
			END sumBalance,
		sred.id red_sub_account_id
	from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
	bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
	ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
	LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
	LEFT JOIN bs_sub_account sred on sred.id = sp.red_account_id and sred.product_type='RED_ZSD'
	where a.account_id = ba.id and ba.user_id =bu.id
	and a.product_type='AUTH_ZSD' and b.id is null 
	and a.available_balance>0
	and a.interest_begin_date &lt;= DATE(NOW())
	and a.`status`=2
	and hfu.user_id = bu.id
		<if test="outUserId != null or outUserId !=''">
			AND bu.id != #{outUserId}
		</if>
		<if test="inAgentViewConfig == null or inAgentViewConfig =='no'">
			AND (bu.agent_id IS NULL
					or bu.agent_id not in 
					(select agent_id from bs_agent_view_config GROUP BY agent_id)
				)
		</if>
		<if test="inAgentViewConfig != null and inAgentViewConfig =='yes'">
			and bu.agent_id in 
			(select agent_id from bs_agent_view_config GROUP BY agent_id)
		</if>
		<if test="vipIdList != null and vipIdList !='' and isSuper == 'yes'">
			and ba.user_id in 
			<foreach collection="vipIdList" item="userId" index="index"
				open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
		<if test="vipIdList != null and vipIdList !='' and isSuper == 'no'">
			and ba.user_id not in 
			<foreach collection="vipIdList" item="userId" index="index"
				open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
	)t where sumBalance >= #{amount}
	ORDER BY sumBalance,interest_begin_date
	limit 1
  </select>	
	
 <!-- ===========================存管匹配相关E=================================== -->
 
 
   <!-- =============================统计到期自然退出的用户账户信息 S ============================ -->	
    
  <resultMap id="DepfixedMaturityExitMap" type="com.pinting.business.model.vo.DepFixedMaturityExitVO" extends="BaseResultMap">
  	<result column="user_id" property="userId" jdbcType="INTEGER" />
  </resultMap>
  
  <select id="queryDepfixedMaturityExitInfo"   resultMap="DepfixedMaturityExitMap" parameterType="java.util.Map" >
		SELECT 
			TIMESTAMPDIFF(DAY,a.interest_begin_date,NOW()) invest_day,
			CASE WHEN e.id IS NULL THEN IFNULL(a.open_balance,0)
			ELSE IFNULL(a.open_balance,0) + IFNULL(e.open_balance,0) END open_balance,
			a.*,
			c.user_id,
			CASE  
			WHEN b.term = 12  THEN  365
			WHEN b.term = 24 THEN  730 
			END  max_term
		FROM 
		bs_sub_account a
		LEFT JOIN bs_sub_account_pair d ON a.id = d.auth_account_id
		LEFT JOIN bs_sub_account e ON d.red_account_id = e.id ,
		bs_product b,
		bs_account c
		WHERE a.product_id = b.id
		AND a.account_id = c.id
		AND (a.product_type = 'AUTH_YUN' OR a.product_type = 'AUTH_ZSD' OR a.product_type = 'AUTH_7' OR a.product_type = 'AUTH_FREE')
		AND a.`status` IN ('2','7')
		AND (
			CASE WHEN b.term = 12 THEN 
			TIMESTAMPDIFF(DAY,a.interest_begin_date,NOW()) >= 365-1
			WHEN b.term &lt; 0 THEN 
			TIMESTAMPDIFF(DAY,a.interest_begin_date,NOW()) >= -b.term-1
			ELSE
			TIMESTAMPDIFF(DAY,a.interest_begin_date,NOW()) >= b.term * 30 -1
			END
		)
		<if test="vipUserList != null and vipUserList !='' ">
			AND c.user_id not in 
			<foreach collection="vipUserList" item="userId" index="index"
				open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>		
  </select>
  <!-- =============================统计到期自然退出的用户账户信息 E ============================ -->
  <!-- ========================统计赞分期当日可用额度===================== -->
  <select id="zsdDailyMoneyCount" resultType="java.lang.Double">
    <![CDATA[
        select(
			(
                select
                    case
                        when sum(a.available_balance) is null then 0.00
                        else sum(a.available_balance)
                    end total_amount
                from bs_sub_account a, bs_account b, bs_user c
                where a.product_type in ('AUTH_ZSD','RED_ZSD')   
                and a.interest_begin_date <= DATE_FORMAT(now(), '%Y-%m-%d')
                and a.status =2 
                and b.id=a.account_id and b.user_id=c.id  
            )
            -
            (
                select IFNULL(sum(IFNULL(b.left_amount,0) - IFNULL(d.plan_principal,0)) + sum(ROUND((IFNULL(b.left_amount,0) - IFNULL(d.plan_principal,0)) * 
                c.agreement_rate * CASE WHEN h.last_pay_date is null THEN
					DATEDIFF(NOW(),DATE(c.loan_time))+1
					ELSE DATEDIFF(NOW(),h.last_pay_date) END /36500,2)),0) sub_amount
                from bs_deposition_quit_apply a, ln_loan c LEFT JOIN 
					(select * from (select e.loan_id,e.plan_date last_pay_date from ln_repay_schedule e,ln_repay_schedule_detail f 
						where f.plan_id = e.id and e.`status` not in ('INIT','CANCELLED') and f.subject_code = 'PRINCIPAL' and plan_amount =0
						order by loan_id asc, plan_date desc) g GROUP BY loan_id ) h
				on h.loan_id = c.id, ln_loan_relation b
                left join ln_finance_repay_schedule d on b.id = d.relation_id and d.status = 'REPAYING'
                 ,bs_sub_account sub
                WHERE a.sub_account_id = b.bs_sub_account_id and b.loan_id = c.id and a.status != 'REFU' and a.status != 'RETURNED'
                and a.sub_account_id = sub.id and sub.product_type = 'AUTH_ZSD'
                and !FIND_IN_SET(a.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'ZSD_SUPER_FINANCE_USER_ID')) 
                and b.status = 'SUCCESS'
                and a.plan_date <= DATE_FORMAT(now(), '%Y-%m-%d')
            )
        ) rest_amount
	]]>
  </select>
  <!-- ========================统计云贷自助放款当日可用额度===================== -->
  <select id="dailyMoneyCount" resultType="java.lang.Double">
    <![CDATA[
        select(
			(
                select
                    case
                        when sum(a.available_balance) is null then 0.00
                        else sum(a.available_balance)
                    end total_amount
                from bs_sub_account a, bs_account b, bs_user c
                where a.product_type in ("AUTH_YUN","RED")
                and a.interest_begin_date <= DATE_FORMAT(now(), '%Y-%m-%d')
                and a.status =2 and a.last_finish_interest_date > DATE_FORMAT(now(),'%Y-%m-%d')
                and b.id=a.account_id and b.user_id=c.id 
                and !FIND_IN_SET(c.id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID')) 
            )
            -
            (
                select IFNULL(sum(IFNULL(b.left_amount,0) - IFNULL(d.plan_principal,0)) + sum(ROUND((IFNULL(b.left_amount,0) - IFNULL(d.plan_principal,0)) * 
                c.agreement_rate * CASE WHEN h.last_pay_date is null THEN
					DATEDIFF(NOW(),DATE(c.loan_time))+1
					ELSE DATEDIFF(NOW(),h.last_pay_date) END /36500,2)),0) sub_amount
                from bs_deposition_quit_apply a, ln_loan c LEFT JOIN 
					(select * from (select e.loan_id,e.plan_date last_pay_date from ln_repay_schedule e,ln_repay_schedule_detail f 
						where f.plan_id = e.id and e.`status` not in ('INIT','CANCELLED') and f.subject_code = 'PRINCIPAL' and plan_amount =0
						order by loan_id asc, plan_date desc) g GROUP BY loan_id ) h
				on h.loan_id = c.id, ln_loan_relation b
                left join ln_finance_repay_schedule d on b.id = d.relation_id and d.status = 'REPAYING'
                 ,bs_sub_account sub
                WHERE a.sub_account_id = b.bs_sub_account_id and b.loan_id = c.id and a.status != 'REFU' and a.status != 'RETURNED'
                and a.sub_account_id = sub.id and sub.product_type = 'AUTH_YUN'
                and !FIND_IN_SET(a.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID')) 
                and b.status = 'SUCCESS'
                and a.plan_date <= DATE_FORMAT(now(), '%Y-%m-%d')
            )
            -
            (
                select IFNULL(sum(IFNULL(a.left_amount,0) - IFNULL(d.plan_principal,0)),0) vip_amount
                from ln_loan_relation a
                left join ln_finance_repay_schedule d on a.id = d.relation_id and d.status = 'REPAYING'
                where a.status = 'SUCCESS' 
                and FIND_IN_SET(a.bs_user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID')) 
            )
        ) rest_amount
	]]>
  </select>

    <select id="dailyMoneyCountFixedDay" resultType="java.lang.Double" parameterType="String">
        <![CDATA[
        select(
            (
                SELECT
                    CASE
                WHEN sum(a.available_balance) IS NULL THEN
                    0.00
                ELSE
                    sum(a.available_balance)
                END total_amount
                FROM
                    (
                        SELECT
                            a.account_id,
                            a.available_balance
                        FROM
                            bs_sub_account a
                        WHERE
                            a.interest_begin_date <= DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        AND a.last_finish_interest_date > DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        AND a.product_type IN ("AUTH_YUN","RED")
                        AND a. STATUS = 2
                    ) a
                INNER JOIN bs_account b ON b.id = a.account_id
                INNER JOIN bs_user c ON c.id = b.user_id
                WHERE
                  !FIND_IN_SET(c.id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID'))
            )
            -
            (
                SELECT
                    IFNULL(sum(IFNULL(t.left_amount, 0) - IFNULL(t.plan_principal, 0)) + sum(
                            ROUND((IFNULL(t.left_amount, 0) - IFNULL(t.plan_principal, 0)) * t.agreement_rate * CASE
                                WHEN t.last_pay_date IS NULL THEN
                                    DATEDIFF(#{PlanDate},DATE(t.loan_time)) + 1
                                ELSE
                                    DATEDIFF(#{PlanDate},t.last_pay_date)END / 36500,2)),0) sub_amount
                    FROM(
                        SELECT
                            b.left_amount,
                            d.plan_principal,
                            c.agreement_rate,
                            c.loan_time,
                                (SELECT
                                    e.plan_date last_pay_date
                                FROM
                                    ln_repay_schedule e,
                                    ln_repay_schedule_detail f
                                WHERE
                                    f.plan_id = e.id
                                AND e.`status` NOT IN ('INIT', 'CANCELLED')
                                AND f.subject_code = 'PRINCIPAL'
                                AND plan_amount = 0
                                AND e.loan_id = b.loan_id
                                ORDER BY
                                    loan_id ASC,
                                    plan_date DESC
                                LIMIT 1
                            ) AS last_pay_date
                        FROM
                            (
                            SELECT
                                a.user_id,
                                a.sub_account_id
                            FROM
                                bs_deposition_quit_apply a
                            WHERE
                                a. STATUS != 'REFU'
                            AND a. STATUS != 'RETURNED'
                            AND a.plan_date <= DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        ) a
                        INNER JOIN ln_loan_relation b ON b.bs_sub_account_id = a.sub_account_id
                        AND b.`status` = 'SUCCESS'
                        INNER JOIN ln_loan c ON c.id = b.loan_id
                        INNER JOIN bs_sub_account sub ON (
                            sub.id = a.sub_account_id
                            AND sub.product_type = 'AUTH_YUN'
                        )
                        LEFT JOIN ln_finance_repay_schedule d ON b.id = d.relation_id
                        AND d. STATUS = 'REPAYING'
                        WHERE
                          ! FIND_IN_SET(a.user_id, (SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID'))
                ) t
            )
            -
            (
                select IFNULL(sum(IFNULL(a.left_amount,0) - IFNULL(d.plan_principal,0)),0) vip_amount
                from ln_loan_relation a
                left join ln_finance_repay_schedule d on a.id = d.relation_id and d.status = 'REPAYING'
                where a.status = 'SUCCESS'
                and a.bs_user_id = (SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID')
            )
        ) rest_amount
    ]]>
    </select>
  
  <select id="dailyMoneyCalculate" resultType="java.lang.Double" parameterType="String">
    <![CDATA[
        select(
			(
          		select
                    case 
                        when sum(a.available_balance) is null then 0.00
                        else sum(a.available_balance)
                    end total_amount 
                from bs_sub_account a, bs_account b, bs_user c 
                where a.product_type in ('AUTH_FREE','RED_FREE')
                	and a.interest_begin_date <= DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                	and a.status =2 and a.last_finish_interest_date > DATE_FORMAT(#{PlanDate},'%Y-%m-%d')
                	and b.id=a.account_id and b.user_id=c.id 
                	and !FIND_IN_SET(c.id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'FREE_SUPER_FINANCE_USER_ID')) 
            ) - (
                select IFNULL(sum(IFNULL(b.left_amount,0) - IFNULL(d.plan_principal,0)) + sum(ROUND((IFNULL(b.left_amount,0) - IFNULL(d.plan_principal,0)) * 
                c.agreement_rate * CASE WHEN h.last_pay_date is null THEN
					DATEDIFF(NOW(),DATE(c.loan_time))+1
					ELSE DATEDIFF(NOW(),h.last_pay_date) END /36500,2)),0) sub_amount
                from bs_deposition_quit_apply a, ln_loan c LEFT JOIN 
					(select * from (select e.loan_id,e.plan_date last_pay_date from ln_repay_schedule e,ln_repay_schedule_detail f 
						where f.plan_id = e.id and e.`status` not in ('INIT','CANCELLED') and f.subject_code = 'PRINCIPAL' and plan_amount =0
						order by loan_id asc, plan_date desc) g GROUP BY loan_id ) h
				on h.loan_id = c.id, ln_loan_relation b
                left join ln_finance_repay_schedule d on b.id = d.relation_id and d.status = 'REPAYING'
                 ,bs_sub_account sub
                WHERE a.sub_account_id = b.bs_sub_account_id and b.loan_id = c.id and a.status != 'REFU' and a.status != 'RETURNED'
                and a.sub_account_id = sub.id and sub.product_type = 'AUTH_FREE'
                and !FIND_IN_SET(a.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'FREE_SUPER_FINANCE_USER_ID')) 
                and b.status = 'SUCCESS'
                and a.plan_date <= DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
            )
            -
            (
                select IFNULL(sum(IFNULL(a.left_amount,0) - IFNULL(d.plan_principal,0)),0) vip_amount
                from ln_loan_relation a
                left join ln_finance_repay_schedule d on a.id = d.relation_id and d.status = 'REPAYING'
                where a.status = 'SUCCESS' 
                and FIND_IN_SET(a.bs_user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'FREE_SUPER_FINANCE_USER_ID')) 
            )
        ) rest_amount
	]]>
  </select>

    <select id="dailyMoneyCalculateFixedDay" resultType="java.lang.Double" parameterType="String">
        <![CDATA[
        select(
            (
                SELECT
                    CASE
                WHEN sum(a.available_balance) IS NULL THEN
                    0.00
                ELSE
                    sum(a.available_balance)
                END total_amount
                FROM
                    (
                        SELECT
                            a.account_id,
                            a.available_balance
                        FROM
                            bs_sub_account a
                        WHERE
                            a.interest_begin_date <= DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        AND a.last_finish_interest_date > DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        AND a.product_type IN ('AUTH_FREE','RED_FREE')
                        AND a. STATUS = 2
                    ) a
                INNER JOIN bs_account b ON b.id = a.account_id
                INNER JOIN bs_user c ON c.id = b.user_id
                WHERE
                  !FIND_IN_SET(c.id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'FREE_SUPER_FINANCE_USER_ID'))
            )
			 -
			(
             SELECT
                    IFNULL(sum(IFNULL(t.left_amount, 0) - IFNULL(t.plan_principal, 0)) + sum(
                            ROUND((IFNULL(t.left_amount, 0) - IFNULL(t.plan_principal, 0)) * t.agreement_rate * CASE
                                WHEN t.last_pay_date IS NULL THEN
                                    DATEDIFF(#{PlanDate},DATE(t.loan_time)) + 1
                                ELSE
                                    DATEDIFF(#{PlanDate},t.last_pay_date)END / 36500,2)),0) sub_amount
                    FROM(
                        SELECT
                            b.left_amount,
                            d.plan_principal,
                            c.agreement_rate,
                            c.loan_time,
                                (SELECT
                                    e.plan_date last_pay_date
                                FROM
                                    ln_repay_schedule e,
                                    ln_repay_schedule_detail f
                                WHERE
                                    f.plan_id = e.id
                                AND e.`status` NOT IN ('INIT', 'CANCELLED')
                                AND f.subject_code = 'PRINCIPAL'
                                AND plan_amount = 0
                                AND e.loan_id = b.loan_id
                                ORDER BY
                                    loan_id ASC,
                                    plan_date DESC
                                LIMIT 1
                            ) AS last_pay_date
                        FROM
                            (
                            SELECT
                                a.user_id,
                                a.sub_account_id
                            FROM
                                bs_deposition_quit_apply a
                            WHERE
                                a. STATUS != 'REFU'
                            AND a. STATUS != 'RETURNED'
                            AND a.plan_date <= DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        ) a
                        INNER JOIN ln_loan_relation b ON b.bs_sub_account_id = a.sub_account_id
                        AND b.`status` = 'SUCCESS'
                        INNER JOIN ln_loan c ON c.id = b.loan_id
                        INNER JOIN bs_sub_account sub ON (
                            sub.id = a.sub_account_id
                            AND sub.product_type = 'AUTH_FREE'
                        )
                        LEFT JOIN ln_finance_repay_schedule d ON b.id = d.relation_id
                        AND d. STATUS = 'REPAYING'
                        WHERE
                          ! FIND_IN_SET(a.user_id, (SELECT conf_value FROM bs_sys_config WHERE conf_key = 'FREE_SUPER_FINANCE_USER_ID'))
                ) t
            )
            -
            (
                select IFNULL(sum(IFNULL(a.left_amount,0) - IFNULL(d.plan_principal,0)),0) vip_amount
                from ln_loan_relation a
                left join ln_finance_repay_schedule d on a.id = d.relation_id and d.status = 'REPAYING'
                where a.status = 'SUCCESS'
                and a.bs_user_id = (SELECT conf_value FROM bs_sys_config WHERE conf_key = 'FREE_SUPER_FINANCE_USER_ID')
            )
        ) rest_amount
	]]>
    </select>

    <!-- =================查询资产方站岗资金当前可用余额================= -->
    <select id="dailyAvailableBalanceMoneyCalculate" resultType="java.lang.Double">
        <![CDATA[
            select
                IFNULL(SUM(a.available_balance), 0.00) total_amount
            from bs_sub_account a
            where a.product_type in (#{productType},#{redProType})
                and a.status =2 and a.last_finish_interest_date > DATE_FORMAT(now(),'%Y-%m-%d')
        ]]>
    </select>

    <!-- =================查询七店资产方站岗资金当前可用余额================= -->
    <select id="dailyAvailableBalanceMoneyCalculateForSevenDian" resultType="java.lang.Double" parameterType="java.util.Map">
        select
            IFNULL(SUM(a.available_balance), 0.00) total_amount
        from bs_sub_account a, bs_account b, bs_user c, bs_agent d
        where  b.id = a.account_id
            AND b.user_id = c.id
            AND c.agent_id = d.id
            AND a.product_type in
            <foreach collection="productTypes" item="productType" index="index"
                    open="(" close=")" separator=",">
                    #{productType}
            </foreach>
            AND a.status =2
            AND a.last_finish_interest_date > DATE_FORMAT(now(),'%Y-%m-%d')
            AND d.agent_code = 'qdkj_77'
    </select>

    <!-- =================查询站岗户次日退出本息总计 本金+应付利息 本金*利息*天数/365 ================= -->
    <select id="dailyQuitAuthMoneyCalculate" resultType="java.lang.Double">
        <![CDATA[
            SELECT
                IFNULL(
                    SUM(
                        a.open_balance + ROUND(
                            CASE
                            WHEN b.term != 12 THEN
                                a.open_balance * b.base_rate * b.term * 30 / 36500
                            WHEN b.term = 12 THEN
                                a.open_balance * b.base_rate * 365 / 36500
                            END,
                            2
                        )
                    ),
                    0.00
                ) total_amount
            FROM
                bs_sub_account a
            INNER JOIN bs_product b ON b.id = a.product_id
            WHERE
                a.product_type IN (#{productType}, #{redProType})
            AND a.`status` = 2
            AND a.last_finish_interest_date <= DATE_FORMAT(DATE_ADD(now(),INTERVAL 1 DAY), '%Y-%m-%d')
        ]]>
    </select>

  <!-- =================2017踏春活动  有过购买成功记录的则为老用户================= -->
  <select id="countInvestedNum" resultType="java.lang.Integer" parameterType="java.util.Map">
		select count(a.id) 
	  	from bs_sub_account a,bs_account b 
	  	where a.account_id = b.id and a.`status` not in (1,6) and a.product_type in('REG','AUTH')
	  	and b.user_id = #{userId} 
  </select>
    <!-- =================2017踏春活动  投资排行榜前10================= -->
  <select id="springInvestRankingList" resultMap="PlayerKillingMap">
		SELECT
			(@rowNO := @rowNo + 1) rowno,
			tt.*
		FROM
			(SELECT @rowNO := 0) b,
			(
				select * from (
					select CASE WHEN e.first_buy_time >d.start_time
							and (first_buy_name like concat(concat('%', '赞分期'), '%') 
								or first_buy_name like concat(concat('%', '港湾计划'), '%')
								or first_buy_name like concat(concat('%', '老用户专享'), '%')) 
						THEN sum(a.open_balance)-e.open_balance 
						ELSE sum(a.open_balance) END buy_amount,
					CONCAT(LEFT(c.user_name,1),"**") user_name,
					c.id user_id,
					CONCAT(SUBSTRING(c.mobile FROM 1 FOR 4),"****",SUBSTRING(c.mobile FROM 9)) mobile,
					c.id,a.account_id,MAX(a.open_time) last_buy_time
					from bs_sub_account a,bs_account b,bs_user c,bs_product p,
						(select * from bs_activity where id = 19)d,
						(select a.id,a.account_id,a.open_balance,min(a.open_time) first_buy_time ,b.user_id,f.`name` first_buy_name
							from bs_sub_account a,bs_account b,bs_product f 
							where a.account_id = b.id and a.`status` not in (1,6) 
								and a.product_type in('REG','AUTH')and f.id = a.product_id
					  		GROUP BY account_id
					  	)e
					where a.account_id = b.id and b.user_id = c.id 
						and a.open_time >= d.start_time and a.open_time &lt;= d.end_time
						and e.user_id = c.id and p.id = a.product_id 
						and (p.`name` like concat(concat('%', '赞分期'), '%') 
							or p.`name` like concat(concat('%', '港湾计划'), '%')
							or p.`name` like concat(concat('%', '老用户专享'), '%') )
						GROUP BY a.account_id 
				) t
				where buy_amount >100000 
				ORDER BY buy_amount desc,last_buy_time asc limit 10
			)tt
  </select>
  
  <!-- =================2017踏春活动  用户投资金额================= -->
  <select id="springUserInvestAmount" resultType="java.lang.Double" parameterType="java.util.Map">
  select CASE WHEN e.first_buy_time >=d.start_time 
			and (first_buy_name like concat(concat('%', '赞分期'), '%') 
					or first_buy_name like concat(concat('%', '港湾计划'), '%')
					or first_buy_name like concat(concat('%', '老用户专享'), '%'))
		THEN sum(a.open_balance)-e.open_balance ELSE sum(a.open_balance) END buy_amount
	from bs_sub_account a,bs_account b,bs_user c,bs_product p,
	(select * from bs_activity where id = 19)d,
	(select a.id,a.account_id,a.open_balance,min(a.open_time) first_buy_time ,b.user_id,f.`name` first_buy_name
	from bs_sub_account a,bs_account b,bs_product f 
	where a.account_id = b.id and a.`status` not in (1,6) and a.product_type in('REG','AUTH')
	and f.id = a.product_id 
 	 and b.user_id = #{userId})e
	where a.account_id = b.id and b.user_id = c.id and a.open_time >= d.start_time and a.open_time &lt;= d.end_time
	and p.id = a.product_id and (p.`name` like concat(concat('%', '赞分期'), '%') 
			or p.`name` like concat(concat('%', '港湾计划'), '%')
			or p.`name` like concat(concat('%', '老用户专享'), '%') )
	and e.user_id = c.id and c.id=#{userId};
	
  </select>
     <!-- =================2017踏春活动  用户邀请================= -->
  <select id="springUserInvitedList" resultMap="PlayerKillingMap" parameterType="java.util.Map">
  	select CONCAT(SUBSTRING(a.mobile FROM 1 FOR 4),"****",SUBSTRING(a.mobile FROM 9)) mobile, 
	CASE WHEN e.open_balance>=5000 THEN 10 else 0 END award_amount,e.account_id,
	a.id user_id,e.open_balance buy_amount
	from bs_user a LEFT JOIN
	(
		select c.user_id,b.account_id,b.open_balance,MIN(b.open_time)
		from bs_sub_account b,bs_account c,(select * from bs_activity where id = 19)d 
		where c.id= b.account_id and b.`status` not in (1,6) and b.product_type in('REG','AUTH') 
		and b.open_time>= d.start_time 
		GROUP BY b.account_id 
	)e ON a.id=e.user_id,(select * from bs_activity where id = 19)f
	where a.recommend_id = #{userId} 
	and a.register_time>= f.start_time 
	ORDER BY a.register_time;
  </select>

  <resultMap id="diffMoneyMap" type="com.pinting.business.model.vo.DailyDiffVO" >
    <id column="sub_account_id" property="subAccountId" jdbcType="INTEGER" />
    <result column="amount" property="amount" jdbcType="DOUBLE" />
    <result column="loan_relation_id" property="loanRelationId" jdbcType="INTEGER" />
    <result column="product_rate" property="productRate" jdbcType="DOUBLE" />
    <result column="diff_account_id" property="diffAccountId" jdbcType="INTEGER" />
    <result column="account_id" property="accountId" jdbcType="INTEGER" />
  </resultMap>

  <select id="dailyDiffMoney" resultMap="diffMoneyMap">
    SELECT a.id as sub_account_id, a.account_id, a.product_rate,pair.diff_account_id,
    a.open_balance + IFNULL(red.open_balance,0)- sum(IFNULL(d.left_amount, 0))-IFNULL(ret.return_principal,0)  as amount
    from bs_sub_account a
    LEFT JOIN ln_loan_relation d on a.id = d.bs_sub_account_id and d.create_time  &lt; DATE_FORMAT(NOW(),'%Y-%m-%d') and d.status = 'SUCCESS'
    LEFT JOIN
    (
    SELECT e.bs_sub_account_id, SUM(f.plan_principal) as return_principal FROM ln_loan_relation e, ln_finance_repay_schedule f
    WHERE e.id=f.relation_id AND f.status='REPAIED' AND DATE(f.done_time)=DATE(DATE_SUB(NOW(),INTERVAL 1 day)) AND f.plan_principal>0
    GROUP BY e.bs_sub_account_id
    ) ret
    ON a.id=ret.bs_sub_account_id,
		bs_sub_account_pair pair LEFT JOIN bs_sub_account red on pair.red_account_id = red.id,
		bs_account account
    WHERE 
		a.id = pair.auth_account_id
		AND a.product_type in('AUTH_YUN','AUTH_ZSD','AUTH_7','AUTH_FREE') and a.status = '2' 
    	AND DATE(NOW()) >= DATE(DATE_ADD(a.open_time,INTERVAL 2 day))
		AND a.account_id = account.id
		AND  !FIND_IN_SET( account.user_id,(
			SELECT conf_value from bs_sys_config where conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID'
		))
		AND  !FIND_IN_SET( account.user_id,(
			SELECT conf_value from bs_sys_config where conf_key = 'ZSD_SUPER_FINANCE_USER_ID'
		)) 
		AND  !FIND_IN_SET( account.user_id,(
			SELECT conf_value from bs_sys_config where conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID'
		))
		AND  !FIND_IN_SET( account.user_id,(
			SELECT conf_value from bs_sys_config where conf_key = 'FREE_SUPER_FINANCE_USER_ID'
		))
    group by a.id HAVING amount&lt;>0
  </select>
  
  
  <select id="selectTotalPrincipal" resultType="java.lang.Double" parameterType="java.util.Map">
		SELECT 
			CASE WHEN d.id IS NULL THEN IFNULL(a.open_balance,0)
			ELSE IFNULL(a.open_balance,0) + IFNULL(e.open_balance,0) END open_balance
		FROM 
		bs_sub_account a
		LEFT JOIN bs_sub_account_pair d ON a.id = d.auth_account_id
		LEFT JOIN bs_sub_account e ON d.red_account_id = e.id 
		WHERE 
		   a.id =  #{subAccountId} 
  </select>

  <select id="selectAuthAccountByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    a.id, a.account_id, a.code, a.product_type, a.open_balance, a.balance,
    a.available_balance, a.can_withdraw, a.freeze_balance,
    a.trans_status, a.status, a.open_time, a.note
    from
    bs_sub_account a, bs_account b, bs_user c
    where
    a.account_id = b.id and
    b.user_id = c.id and
    c.id = #{userId} and
    a.status = '2' and
    a.product_type = 'AUTH'
  </select>

  <select id="selectZanAuthAmount" resultType="java.lang.Double" parameterType="java.util.Map" >
    SELECT
       IFNULL(SUM(a.available_balance),0)
    FROM
    bs_sub_account a, bs_account b, bs_user c
    where
    a.account_id = b.id and
    b.user_id = c.id and
    c.id = #{userId} and
    a.status = '2' and
    a.product_type = 'AUTH'
  </select>

  <select id="selectAuthAccountById" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    SELECT
      auth.id, auth.account_id, auth.code, auth.product_id, auth.product_type, auth.product_code, auth.product_name, auth.product_rate,
      auth.bank_card, auth.extra_rate, (IFNULL(auth.open_balance,0) + IFNULL(red.open_balance,0)) AS open_balance , auth.balance,
      auth.available_balance, auth.can_withdraw, auth.freeze_balance,auth.trans_status, auth.status, auth.check_status,
      auth.interest_begin_date, auth.last_trans_date, auth.last_cal__interest_date,auth.last_finish_interest_date,
      auth.accumulation_inerest, auth.open_time, auth.close_time, auth.transfer_time,auth.note
    FROM bs_sub_account_pair pr
    LEFT JOIN bs_sub_account auth ON pr.auth_account_id = auth.id
    LEFT JOIN bs_sub_account red ON pr.red_account_id = red.id
    WHERE pr.auth_account_id = #{authAccountId,jdbcType=INTEGER}
  </select>

  <!-- =================运营管理-赞分期可转债权查询S================= -->
  <resultMap id="AvailableClaimVOMap" type="com.pinting.business.model.vo.AvailableClaimVO" >
    <result column="period" property="period" jdbcType="VARCHAR" />
    <result column="available_claim" property="availableClaim" jdbcType="DOUBLE" />
    <result column="vip_claim" property="vipClaim" jdbcType="DOUBLE" />
    <result column="user_stand_amount" property="userStandAmount" jdbcType="DOUBLE" />

  </resultMap>

  <!--
   实际可转=今日VIP-用户站岗
   今日VIP指当日VIP持有的债权，要对此进行限制，排除：
    1、VIP持有≥10天的期限为1个月的债权。
    2、借款人还过款的债权；
    3、已逾期的债权；
   以上条件满足其中一项，就排除掉。
  -->
   <select id="availableClaim" resultMap="AvailableClaimVOMap" >
		select t.period as period, (vip_total-IF(user_total is null, 0, user_total)) as available_claim, vip_total as vip_claim, IF(user_total is null , 0, user_total) user_stand_amount from 
		(
		select period, IF(total2 is null, 0, total2) as vip_total , user_total from temp t1
		
		LEFT JOIN 
		(

				SELECT aa.p2,SUM(aa.total2) total2,aa.loan_id FROM (
					select l.period as p2,SUM(
								CASE WHEN l.period = 1 AND DATEDIFF(NOW(), r.create_time) >= 10
								THEN 0 ELSE r.total_amount END
							) as total2,l.id loan_id  from ln_loan_relation r, ln_loan l where r.loan_id=l.id and
					r.bs_user_id in 
					<foreach collection="userIds" item="userId" index="index"
						open="(" close=")" separator=",">
						#{userId}
					</foreach>
					and r.`status`='SUCCESS' and r.total_amount=r.left_amount and r.left_amount>= #{matchLimitAmount}
					GROUP BY r.loan_id
				) aa
				WHERE
				aa.loan_id NOT IN (
					SELECT DISTINCT
						loan_id
					FROM
						ln_finance_repay_schedule s,
						ln_loan_relation b
					WHERE
						b.id = s.relation_id
					AND s. STATUS = 'REPAYING'
					AND b.bs_user_id IN 
					<foreach collection="userIds" item="userId" index="index"
						open="(" close=")" separator=",">
						#{userId}
					</foreach>
				)
				GROUP BY aa.p2 
			
		) t2
		on t1.period =t2.p2
		LEFT JOIN
		(
		select p.term, SUM( sa.balance) as user_total from bs_sub_account sa, bs_product p,bs_account sb  where sa.product_type='AUTH' and sa.product_id=p.id 
		and sa.account_id = sb.id and sb.user_id not in 
		<foreach collection="userIds" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
		and sa.balance>= #{matchLimitAmount}
		GROUP BY p.term) t3
		on t1.period=t3.term
		
		) t
  </select>
  
  <select id="getMatchLimitAmount" resultType="java.lang.Double">
  	SELECT conf_value FROM bs_sys_config WHERE conf_key = 'MATCH_LIMIT_AMOUNT'
  </select>
  <!-- =================运营管理-赞分期可转债权查询E================= -->
  
  <!-- =========================钱报APP查询S============================= -->
   <select id="CountQbUserPosition" resultType="java.lang.Integer" parameterType="java.util.Map" >
    select count(t.id) from(
	    select sum(b1.open_balance),a1.mobile,MIN(b1.open_time) open_time,b1.id
		from bs_user a1,bs_sub_account b1,bs_account c1
		where a1.id = c1.user_id and c1.id = b1.account_id 
		and a1.agent_id =#{agentId} and b1.product_id = #{productId}
		and b1.product_type in ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7') and b1.`status` in (2,7) 
		GROUP BY a1.id 
	
	)t where 1=1
	<if test="createTimeBegin != null">
		and t.open_time >= #{createTimeBegin}
	</if>
	<if test="createTimeEnd != null">
		and t.open_time &lt;= #{createTimeEnd}
	</if>
	;
  </select>
  
  <resultMap id="PositionProduct4UserInfoMap" type="com.pinting.gateway.hessian.message.qb178.model.PositionProduct4UserInfo">
	    <result column="user_account" property="user_account" jdbcType="VARCHAR" />
	    <result column="ta_balance" property="ta_balance" jdbcType="BIGINT" />
  </resultMap>
  
   <select id="queryQbUserPositionPageList" resultMap="PositionProduct4UserInfoMap" parameterType="java.util.Map" >
    select * from(
	    select sum(b1.open_balance*100) ta_balance,a1.mobile user_account,MIN(b1.open_time) open_time
		from bs_user a1,bs_sub_account b1,bs_account c1
		where a1.id = c1.user_id and c1.id = b1.account_id 
		and a1.agent_id =#{agentId} and b1.product_id = #{productId}
		and b1.product_type in ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7') and b1.`status` in (2,7) 
		GROUP BY a1.id ORDER BY MIN(b1.open_time) desc
	
	)t where 1=1
	<if test="createTimeBegin != null">
		and t.open_time >= #{createTimeBegin}
	</if>
	<if test="createTimeEnd != null">
		and t.open_time &lt;= #{createTimeEnd}
	</if>
	LIMIT #{start}, #{numPerPage}
	;
  </select>

  
  <resultMap id="QbRepayPlanMap" type="com.pinting.gateway.hessian.message.qb178.model.RepayPlanInfo">
	    <result column="user_account" property="user_account" jdbcType="VARCHAR" />
		<result column="product_code" property="product_code" jdbcType="VARCHAR" />
		<result column="product_name" property="product_name" jdbcType="VARCHAR" />
		<result column="total_period" property="total_period" jdbcType="INTEGER" />
		<result column="profit_begin_time" property="profit_begin_time" jdbcType="VARCHAR" />
		<result column="period" property="period" jdbcType="INTEGER" />
		<result column="plan_date" property="plan_date" jdbcType="VARCHAR" />
		<result column="real_date" property="real_date" jdbcType="VARCHAR" />
	    <result column="principal_amount" property="principal_amount" jdbcType="BIGINT" />
	    <result column="profit_amount" property="profit_amount" jdbcType="BIGINT" />
	    <result column="jet_plan_status" property="jet_plan_status" jdbcType="VARCHAR" />
  </resultMap>
  <select id="queryQbRepayPlanList" resultMap="QbRepayPlanMap" parameterType="java.util.Map" >
  	select t.*,
  	case when t.product_type='REG' then
  		case when e.return_status = 'SUCCESS' then DATE_FORMAT(e.update_time,'%Y%m%d%H%i%s') else '' end
  	else case when f.status = 'RETURNED' then DATE_FORMAT(f.update_time,'%Y%m%d%H%i%s') else '' end
  	end  real_date
from (
  	select b.product_type,b.id,a.mobile user_account, d.id product_code, d.`name` product_name, 1 as total_period,
		DATE_FORMAT(b.last_finish_interest_date,'%Y%m%d%H%i%s') profit_begin_time, b.id as period,
		DATE_FORMAT(b.last_finish_interest_date,'%Y%m%d%H%i%s') plan_date,
		b.open_balance*100 principal_amount, 
		case when d.term &lt;0 then cast(b.open_balance*d.base_rate/365*ABS(d.term) as decimal(18,0)) 
		when d.term = 12 then cast(b.open_balance*d.base_rate as decimal(18,0)) 
		ELSE cast(b.open_balance*d.base_rate/365*d.term*30 as decimal(18,0)) end profit_amount,
		case when b.`status` = 5 then 'FINISH' else 'WAITING' end jet_plan_status
	from bs_user a,bs_account c,bs_product d,
		bs_sub_account b
		where a.id = c.user_id and c.id = b.account_id and b.product_id = d.id
		and a.agent_id = #{agentId} 
		<if test="productId != null and productId != ''">
			and b.product_id = #{productId} 
		</if>
		 <if test="userMobile != null  and userMobile != ''">
			and a.mobile = #{userMobile} 
		</if>
		and b.product_type in ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7') and b.`status` in (2,5,7) 
	<if test="createTimeBegin != null">
		and b.open_time >= #{createTimeBegin}
	</if>
	<if test="createTimeEnd != null">
		and b.open_time &lt;= #{createTimeEnd}
	</if>
	ORDER BY b.open_time desc LIMIT #{start}, #{numPerPage}
	)t LEFT JOIN bs_batch_buy_detail e on t.id = e.sub_account_id
		LEFT JOIN bs_deposition_quit_apply f on t.id = f.sub_account_id;
  </select>
  <select id="countQbRepayPlan" resultType="java.lang.Integer" parameterType="java.util.Map" >
  	select count(b.id)
	from bs_user a,bs_account c,bs_product d,
		bs_sub_account b 
		where a.id = c.user_id and c.id = b.account_id and b.product_id = d.id
		and a.agent_id = #{agentId} 
		<if test="productId != null  and productId != ''">
			and b.product_id = #{productId} 
		</if>
		 <if test="userMobile != null  and userMobile != ''">
			and a.mobile = #{userMobile} 
		</if>
		
		and b.product_type in ('REG', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7') and b.`status` in (2,5,7) 
	<if test="createTimeBegin != null">
		and b.open_time >= #{createTimeBegin}
	</if>
	<if test="createTimeEnd != null">
		and b.open_time &lt;= #{createTimeEnd}
	</if>
  </select>

  <resultMap type="com.pinting.gateway.hessian.message.qb178.model.QueryBalanceInfo" id="queryBalanceInfoResultMap" >
    <result column="user_account" property="user_account" jdbcType="VARCHAR"/>
    <result column="total_balance" property="total_balance" jdbcType="BIGINT" />
    <result column="current_balance" property="current_balance" jdbcType="BIGINT" />
    <result column="frozen_balance" property="frozen_balance" jdbcType="BIGINT" />
  </resultMap>

  <select id="count178QueryBalance"  parameterType="java.util.Map" resultType="java.lang.Integer">
    SELECT
    COUNT(c.id)
    FROM
    bs_sub_account a, bs_account b, bs_user c
    WHERE
    a.account_id = b.id AND
    b.user_id = c.id AND
    a.status = '1' AND
    a.product_type = 'DEP_JSH' AND
    c.agent_id = 15
    <if test="userAccountAry != null and userAccountAry !=''">
      AND c.mobile IN
      <foreach collection="userAccountAry" item="userAccount" index="index" open="(" close=")" separator=",">
        #{userAccount}
      </foreach>
    </if>

    <if test="createTimeBegin != null and createTimeBegin != ''">
      AND c.register_time >= #{createTimeBegin}
    </if>
    <if test="createTimeEnd != null and createTimeEnd != ''">
      AND c.register_time &lt;= #{createTimeEnd}
    </if>
  </select>

  <select id="select178QueryBalanceByPage" resultMap="queryBalanceInfoResultMap" parameterType="Map">
    SELECT
    c.mobile AS user_account,
    a.balance*100 AS total_balance,
    a.available_balance*100 AS current_balance,
    a.freeze_balance*100 AS frozen_balance
    FROM
    bs_sub_account a, bs_account b, bs_user c
    WHERE
    a.account_id = b.id AND
    b.user_id = c.id AND
    a.status = '1' AND
    a.product_type = 'DEP_JSH'  AND
    c.agent_id = 15
    <if test="userAccountAry != null and userAccountAry !=''">
      AND c.mobile IN
      <foreach collection="userAccountAry" item="userAccount" index="index" open="(" close=")" separator=",">
        #{userAccount}
      </foreach>
    </if>
    <if test="createTimeBegin != null and createTimeBegin != ''">
      AND c.register_time >= #{createTimeBegin}
    </if>
    <if test="createTimeEnd != null and createTimeEnd != ''">
      AND c.register_time &lt;= #{createTimeEnd}
    </if>
    ORDER BY c.register_time DESC
    LIMIT #{start}, #{numPerPage}
  </select>
  <!-- =========================钱报APP查询E============================= -->
  
  <select id="sumRedAccBalanceByType" resultType="java.lang.Double" parameterType="Map">
  		SELECT 
  		IFNULL(sum(s.balance), 0) as redAccBalance
  		from bs_sub_account s 
  		where s.product_type = #{type} and s.status='2'
  </select>
  	
  <select id="sumRedAccBalance" resultType="java.lang.Double" parameterType="Map">
  		SELECT 
  		IFNULL(sum(s.open_balance), 0) as redAccBalance
  		from bs_sub_account s 
  		where s.product_type in ('RED', 'RED_7', 'RED_ZSD') and s.status='2'
  </select>
  
    <!-- =================运营管理-赞时贷可转债权查询S================= -->
  <resultMap id="zsdAvailableClaimVOMap" type="com.pinting.business.model.vo.AvailableClaimVO" >
    <result column="period" property="period" jdbcType="VARCHAR" />
    <result column="available_claim" property="availableClaim" jdbcType="DOUBLE" />
    <result column="vip_claim" property="vipClaim" jdbcType="DOUBLE" />
    <result column="vip_interest" property="vipInterest" jdbcType="DOUBLE" />
    <result column="user_stand_amount" property="userStandAmount" jdbcType="DOUBLE" />
  </resultMap> 	
	
  <!--
    实际可转=今日VIP-用户站岗
    今日VIP指当日VIP持有的债权，要对此进行限制，排除：已逾期的债权-->
  <select id="zsdAvailableClaim" resultMap="zsdAvailableClaimVOMap" >
		select (t2.vip_amount + t2.vip_interest - t3.user_total) as available_claim, t2.vip_interest, t2.vip_amount as vip_claim, t3.user_total as user_stand_amount 
		from
		(
			select sum(IFNULL(a.left_amount,0) - IFNULL(d.plan_principal,0)) vip_amount,
		  	sum((IFNULL(a.left_amount,0)-IFNULL(d.plan_principal,0))*l.agreement_rate*(DATEDIFF(now(), l.loan_time))/36500) as vip_interest 
			from ln_loan_relation a 
			LEFT JOIN ln_loan l on a.loan_id=l.id
			left join ln_finance_repay_schedule d on a.id = d.relation_id and d.status = 'REPAYING',
			ln_repay_schedule e
			where a.status = 'SUCCESS' 
			AND a.loan_id = e.loan_id
			and FIND_IN_SET(a.bs_user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'ZSD_SUPER_FINANCE_USER_ID'))
			AND e.plan_date != DATE_FORMAT(now(), '%Y-%m-%d')
		)t2,
		(
			select SUM(IFNULL(sa.available_balance, 0) + IFNULL(sd.available_balance, 0)) as user_total 
			from  bs_sub_account sa  LEFT JOIN bs_sub_account_pair sc ON sa.id = sc.auth_account_id 
			LEFT JOIN bs_sub_account sd ON sc.red_account_id = sd.id
			,bs_account sb
			where sa.product_type = 'AUTH_ZSD'
			and sa.account_id = sb.id 
			AND sa.`status` =2 
			AND sa.interest_begin_date &lt;= DATE_FORMAT(now(), '%Y-%m-%d')
			and !FIND_IN_SET(sb.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'ZSD_SUPER_FINANCE_USER_ID'))
			AND sa.id NOT IN (SELECT sub_account_id FROM bs_deposition_quit_apply WHERE `status` = 'PASS')
		)t3
  </select>		
  <!-- =================运营管理-赞时贷可转债权查询E================= -->
  
  <!-- =========================赞时贷匹配S=============================== -->
  
  <!-- 根据产品类型查询所有赞时贷待匹配的总额 -->
  <select id="balanceWait4Match4ZSD" resultType="java.lang.Double">
  select CASE WHEN sum(t.available_balance+red_available_balance) is null then 0 else 
  	sum(t.available_balance+red_available_balance) end
  from(
	  select a.available_balance,
		CASE WHEN sred.available_balance IS NULL THEN 0 ELSE sred.available_balance END red_available_balance,
		sred.id red_sub_account_id
		from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
		bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
		ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
		LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
		LEFT JOIN bs_sub_account sred on sred.id = sp.red_account_id and sred.product_type='RED_ZSD'
		where a.account_id = ba.id and ba.user_id =bu.id
		and a.product_type=#{productType} and b.id is null 
		and a.available_balance>0
		and a.`status`=2
		and a.interest_begin_date &lt;= DATE(NOW())
		and hfu.user_id = bu.id
  )t
   </select>
   
   <select id="zsdNormalWait4MatchList" resultMap="DepFixedMatchMap">
  select DISTINCT * from (select a.id,a.account_id,a.product_id,a.product_type,
		a.open_balance,a.balance,a.available_balance,a.freeze_balance,
  		a.`status`,a.interest_begin_date,
		bu.id user_id,bu.agent_id,hfu.hf_user_id,
		CASE WHEN sred.available_balance IS NULL THEN 0 ELSE sred.available_balance END red_available_balance,
		sred.id red_sub_account_id,
		CASE WHEN sred.available_balance IS NULL THEN a.available_balance ELSE sred.available_balance+a.available_balance END sum_available_balance
	from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
	bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
	ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
	LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
	LEFT JOIN bs_sub_account sred on sred.id = sp.red_account_id and sred.product_type='RED_ZSD'
	where a.account_id = ba.id and ba.user_id =bu.id
	and a.product_type=#{productType} and b.id is null 
	and a.interest_begin_date &lt;= DATE(NOW())
	and a.`status`=2
	and hfu.user_id = bu.id
	<if test="vipUserIdList != null and vipUserIdList !=''">
		and ba.user_id not in 
		<foreach collection="vipUserIdList" item="userId" index="index"
			open="(" close=")" separator=",">
			#{userId}
		</foreach>
	</if>
	
 )t where 1=1
	 <if test="minBalance != null">
		and sum_available_balance>=#{minBalance}
	</if>
	<if test="minBalance == null">
		and sum_available_balance>0
	</if>
	<if test="maxBalance != null">
		and sum_available_balance&lt;#{maxBalance}
	</if>
	<if test="maxBalance != null">
		ORDER BY sum_available_balance asc
	</if>
	<if test="minBalance != null">
		ORDER BY interest_begin_date asc,sum_available_balance desc
	</if>
	
  </select>
   
   <select id="zsdVIPWait4MatchList" resultMap="DepFixedMatchMap">
  	select a.id,a.account_id,a.product_id,a.product_type,
		a.open_balance,a.balance,a.available_balance,a.freeze_balance,
  		a.`status`,a.interest_begin_date,
		bu.id user_id,bu.agent_id,hfu.hf_user_id
	from bs_account ba, bs_user bu, bs_hfbank_user_ext hfu,
		bs_sub_account a LEFT JOIN bs_deposition_quit_apply b 
		ON a.id = b.sub_account_id and b.`status` IN ('INIT', 'PASS','PROCESS') 
		LEFT JOIN bs_sub_account_pair sp on sp.auth_account_id = a.id
		where a.account_id = ba.id and ba.user_id =bu.id
		and a.product_type=#{productType} and b.id is null 
		and a.interest_begin_date &lt;= DATE(NOW())
		and a.`status`=2
		and a.available_balance>0
		and hfu.user_id = bu.id
		<if test="vipUserIdList != null and vipUserIdList !=''">
			and ba.user_id in 
			<foreach collection="vipUserIdList" item="userId" index="index"
				open="(" close=")" separator=",">
				#{userId}
			</foreach>
		</if>
	</select>
  <!-- =========================赞时贷匹配S=============================== -->

  <select id="selectFirstInvest" parameterType="java.util.Map" resultMap="BaseResultMap" >
    select a.* from bs_sub_account a, bs_account b, bs_user c
    where a.account_id = b.id and b.user_id = c.id
    and a.product_type in ('AUTH_YUN', 'AUTH_ZSD', 'RED', 'RED_ZSD', 'AUTH') and a.`status` in (2,5,7)
    and c.id = #{userId} and DATE(a.open_time) = DATE(NOW())
    order by id asc limit 1
  </select>

  <resultMap id="InvestAmountVOMap" type="com.pinting.business.model.vo.InvestAmountVO" >
    <result column="open_date" property="date" jdbcType="TIMESTAMP" />
    <result column="invest_amount" property="investAmount" jdbcType="DOUBLE" />

  </resultMap>
  <select id="selectInvestAmountEachMonth" parameterType="java.util.Map" resultMap="InvestAmountVOMap" >
    SELECT
    SUM(a.open_balance) as invest_amount, date(a.open_time) as open_date
    FROM bs_sub_account a
    WHERE
    a.`status` NOT IN (1,6) AND  a.product_type in ('REG', 'AUTH', 'AUTH_YUN', 'AUTH_ZSD', 'RED', 'RED_ZSD', 'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE')
    AND year(a.open_time) = year(NOW())
    group by MONTH(a.open_time)
  </select>
  
  
    <!-- ========================统计7贷自助放款当日可用额度===================== -->
  <select id="sevenDaiSelfDailyMoneyCount" resultType="java.lang.Double">
    <![CDATA[
      select(
			(
                select
                    case
                        when sum(a.available_balance) is null then 0.00
                        else sum(a.available_balance)
                    end total_amount
                from bs_sub_account a, bs_account b, bs_user c
                where a.product_type in ('AUTH_7','RED_7')
                and a.interest_begin_date <= DATE_FORMAT(now(), '%Y-%m-%d')
                and a.status =2 and a.last_finish_interest_date > DATE_FORMAT(now(),'%Y-%m-%d')
                and b.id=a.account_id and b.user_id=c.id
                and !FIND_IN_SET(c.id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID'))
            )
            -
            (
                select IFNULL(sum(IFNULL(b.left_amount,0) - IFNULL(d.plan_principal,0)) + sum(ROUND((IFNULL(b.left_amount,0) - IFNULL(d.plan_principal,0)) * 
                c.agreement_rate * CASE WHEN h.last_pay_date is null THEN
					DATEDIFF(NOW(),DATE(c.loan_time))+1
					ELSE DATEDIFF(NOW(),h.last_pay_date) END /36500,2)),0) sub_amount
                from bs_deposition_quit_apply a, ln_loan c LEFT JOIN 
					(select * from (select e.loan_id,e.plan_date last_pay_date from ln_repay_schedule e,ln_repay_schedule_detail f 
						where f.plan_id = e.id and e.`status` not in ('INIT','CANCELLED') and f.subject_code = 'PRINCIPAL' and plan_amount =0
						order by loan_id asc, plan_date desc) g GROUP BY loan_id ) h
				on h.loan_id = c.id, ln_loan_relation b
                left join ln_finance_repay_schedule d on b.id = d.relation_id and d.status = 'REPAYING'
                 ,bs_sub_account sub
                WHERE a.sub_account_id = b.bs_sub_account_id and b.loan_id = c.id and a.status != 'REFU' and a.status != 'RETURNED'
                and a.sub_account_id = sub.id and sub.product_type = 'AUTH_7'
                and !FIND_IN_SET(a.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID')) 
                and b.status = 'SUCCESS'
                and a.plan_date <= DATE_FORMAT(now(), '%Y-%m-%d')
            )
            -
            (
                select IFNULL(sum(IFNULL(a.left_amount,0) - IFNULL(d.plan_principal,0)),0) vip_amount
                from ln_loan_relation a
                left join ln_finance_repay_schedule d on a.id = d.relation_id and d.status = 'REPAYING'
                where a.status = 'SUCCESS' 
                and FIND_IN_SET(a.bs_user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID')) 
            )
        ) rest_amount
	]]>
  </select>

    <select id="sevenDaiSelfDailyMoneyCountFixedDay" resultType="java.lang.Double" parameterType="java.lang.String">
        <![CDATA[
      select(
            (
                SELECT
                    CASE
                WHEN sum(a.available_balance) IS NULL THEN
                    0.00
                ELSE
                    sum(a.available_balance)
                END total_amount
                FROM
                    (
                        SELECT
                            a.account_id,
                            a.available_balance
                        FROM
                            bs_sub_account a
                        WHERE
                            a.interest_begin_date <= DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        AND a.last_finish_interest_date > DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        AND a.product_type IN ('AUTH_7', 'RED_7')
                        AND a. STATUS = 2
                    ) a
                INNER JOIN bs_account b ON b.id = a.account_id
                INNER JOIN bs_user c ON c.id = b.user_id
                WHERE
                  !FIND_IN_SET(c.id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID'))
            )
            -
            (
                SELECT
                    IFNULL(sum(IFNULL(t.left_amount, 0) - IFNULL(t.plan_principal, 0)) + sum(
                            ROUND((IFNULL(t.left_amount, 0) - IFNULL(t.plan_principal, 0)) * t.agreement_rate * CASE
                                WHEN t.last_pay_date IS NULL THEN
                                    DATEDIFF(#{PlanDate},DATE(t.loan_time)) + 1
                                ELSE
                                    DATEDIFF(#{PlanDate},t.last_pay_date)END / 36500,2)),0) sub_amount
                    FROM(
                        SELECT
                            b.left_amount,
                            d.plan_principal,
                            c.agreement_rate,
                            c.loan_time,
                                (SELECT
                                    e.plan_date last_pay_date
                                FROM
                                    ln_repay_schedule e,
                                    ln_repay_schedule_detail f
                                WHERE
                                    f.plan_id = e.id
                                AND e.`status` NOT IN ('INIT', 'CANCELLED')
                                AND f.subject_code = 'PRINCIPAL'
                                AND plan_amount = 0
                                AND e.loan_id = b.loan_id
                                ORDER BY
                                    loan_id ASC,
                                    plan_date DESC
                                LIMIT 1
                            ) AS last_pay_date
                        FROM
                        (
                            SELECT
                                a.user_id,
                                a.sub_account_id
                            FROM
                                bs_deposition_quit_apply a
                            WHERE
                                a. STATUS != 'REFU'
                            AND a. STATUS != 'RETURNED'
                            AND a.plan_date <= DATE_FORMAT(#{PlanDate}, '%Y-%m-%d')
                        ) a
                        INNER JOIN ln_loan_relation b ON b.bs_sub_account_id = a.sub_account_id
                        AND b.`status` = 'SUCCESS'
                        INNER JOIN ln_loan c ON c.id = b.loan_id
                        INNER JOIN bs_sub_account sub ON (
                            sub.id = a.sub_account_id
                            AND sub.product_type = 'AUTH_7'
                        )
                        LEFT JOIN ln_finance_repay_schedule d ON b.id = d.relation_id
                        AND d. STATUS = 'REPAYING'
                        WHERE
                          ! FIND_IN_SET(a.user_id, (SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID'))
                ) t
            )
            -
            (
                select IFNULL(sum(IFNULL(a.left_amount,0) - IFNULL(d.plan_principal,0)),0) vip_amount
                from ln_loan_relation a
                left join ln_finance_repay_schedule d on a.id = d.relation_id and d.status = 'REPAYING'
                where a.status = 'SUCCESS'
                and a.bs_user_id = (SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID')
            )
        ) rest_amount
	]]>
    </select>


    <!-- 2018平台数据添加字段 start -->
    <!-- 2. 累计出借额（平台自成立以来出借的金额总和，仅统计本金） -->
    <select id="sumLoanAmount" resultType="java.lang.Double" parameterType="Map">
        select a.amount + b.amount from (
          select ifnull(sum(a.approve_amount), 0) as amount from ln_loan a where a.`status` = 'PAIED'
        ) as a, (
          select ROUND(sum(open_balance), 0) as amount from bs_sub_account where product_type='REG'
          and `status`=5 and last_finish_interest_date &lt;='2018-01-11'
        ) as b
    </select>

    <!-- 3. 自成立以来累计借贷金额（平台成立以来出借的金额总和，仅统计本金） -->
    <select id="sumBorrowerAmount" resultType="java.lang.Double" parameterType="Map">
        select a.amount + b.amount from (
          select ifnull(sum(a.approve_amount), 0) as amount from ln_loan a where a.`status` = 'PAIED'
        ) as a, (
          select ROUND(sum(open_balance), 0) as amount from bs_sub_account where product_type='REG'
          and `status`=5 and last_finish_interest_date &lt;='2018-01-11'
        ) as b
    </select>

    <!-- 4. 自成立以来累计借贷笔数（平台成立以来出借的总笔数） -->
    <select id="countLoanTimes" resultType="java.lang.Integer" parameterType="Map">
        select count(a.approve_amount) from ln_loan a where a.`status` = 'PAIED'
    </select>

    <!-- 5. 当前待还借贷金额（借款人未还款的出借金额总和，仅统计本金） -->
    <select id="sumLeftAmount" resultType="java.lang.Double" parameterType="Map">
        select ifnull(sum(a.left_amount),0) from ln_loan_relation a where a.`status` = 'SUCCESS'
    </select>

    <!-- 6. 当前待还借贷笔数（借款人未还款的出借总笔数） -->
    <select id="countLeftAmountTimes" resultType="java.lang.Integer" parameterType="Map">
        select count(distinct a.loan_id) from ln_loan_relation a where a.`status` = 'SUCCESS'
    </select>

    <!-- 9. 累计出借人数（平台成立以来，累计的出借总人数，排除VIP理财人） -->
    <select id="countLoanUserTimes" resultType="java.lang.Integer" parameterType="Map">
        select count(distinct b.user_id) from bs_sub_account a,bs_account b where a.`status` in(2,5,7) 
			and a.account_id = b.id 
			and a.product_type not in('DEP_JSH','JSH','JLJ')
        <if test="userIdList != null and userIdList !=''">
            and b.user_id not in
            <foreach collection="userIdList" item="userId" index="index"
                     open="(" close=")" separator=",">
                #{userId}
            </foreach>
        </if>
    </select>

    <!-- 10. 当期出借人数（目前有待回款的出借人数，排除VIP理财人） -->
    <select id="countCurrentLoanUserTimes" resultType="java.lang.Integer" parameterType="Map">
        select count(distinct a.bs_user_id) from ln_loan_relation a, bs_sub_account b where a.`status` = 'SUCCESS'
        and a.left_amount != 0 and a.total_amount != 0
        and a.bs_sub_account_id = b.id and b.`status` in (2, 7)
        <if test="userIdList != null and userIdList !=''">
            and a.bs_user_id not in
            <foreach collection="userIdList" item="userId" index="index"
                     open="(" close=")" separator=",">
                #{userId}
            </foreach>
        </if>
    </select>

    <!-- 12.  前十大出借人出借余额占比（按待回款金额排序，前十大出借人出借余额总和/当前待还借贷金额，仅统计本金，排除VIP理财人） -->
    <select id="sumTenLargestLeftAmount" resultType="java.lang.Double" parameterType="Map">
        select ifnull(sum(a.left_amount),0) as left_amount from (
            select a.* from (
                select ifnull(sum(a.left_amount),0) as left_amount, a.bs_user_id from ln_loan_relation a where a.`status` = 'SUCCESS' and a.left_amount != 0 and a.total_amount != 0
                <if test="userIdList != null and userIdList !=''">
                    and a.bs_user_id not in
                    <foreach collection="userIdList" item="userId" index="index"
                             open="(" close=")" separator=",">
                        #{userId}
                    </foreach>
                </if>
                group by a.bs_user_id
            ) as a order by a.left_amount desc limit 10
        ) as a
    </select>

    <!-- 13. 最大单一出借人出借余额占比（按待回款金额排序，最大单一出借人出借余额总和/当前待还借贷金额，仅统计本金，排除VIP理财人） -->
    <select id="sumLargestLeftAmount" resultType="java.lang.Double" parameterType="Map">
        select ifnull(a.left_amount,0) from (
            select ifnull(sum(a.left_amount),0) as left_amount, a.bs_user_id from ln_loan_relation a where a.`status` = 'SUCCESS' and a.left_amount != 0 and a.total_amount != 0
            <if test="userIdList != null and userIdList !=''">
                and a.bs_user_id not in
                <foreach collection="userIdList" item="userId" index="index"
                         open="(" close=")" separator=",">
                    #{userId}
                </foreach>
            </if>
            group by a.bs_user_id
        ) as a order by a.left_amount desc limit 1
    </select>

    <!-- 14. 累计借款人数（平台成立以来，累计的借款人数） -->
    <select id="countBorrowerUserTimes" resultType="java.lang.Integer" parameterType="Map">
        select count(distinct a.id_card) from ln_user a, ln_loan b where a.id = b.ln_user_id and b.`status` = 'PAIED'
    </select>

    <!-- 15. 当期借款人数（目前处于借款状态的借款人数） -->
    <select id="countCurrentBorrowerUserTimes" resultType="java.lang.Integer" parameterType="Map">
        select count(distinct a.id_card) from ln_user a, (
            select c.loan_id, c.ln_user_id, sum(c.left_amount) as amount from ln_loan_relation c
            where c.`status` = 'SUCCESS' and c.left_amount > 0
            group by c.ln_user_id
        ) as c
        where a.id = c.ln_user_id
    </select>

    <!-- 17. 前十大借款人待还金额占比（按当前借款金额排序，前十大借款人待还金额总和/当前待还借贷金额，仅统计本金） -->
    <select id="sumTenBorrowerLargestLeftAmount" resultType="java.lang.Double" parameterType="Map">
        select ifnull(sum(a.amount),0) from (
            select b.* from (
                select a.id_card, ifnull(sum(b.approve_amount),0) as approve_amount, ifnull(sum(c.amount),0) as amount from ln_user a, ln_loan b, (
                    select c.loan_id, c.ln_user_id, ifnull(sum(c.left_amount),0) as amount from ln_loan_relation c
                    where c.`status` = 'SUCCESS' and c.left_amount > 0 group by c.loan_id
                ) as c
                where a.id = b.ln_user_id and a.id = c.ln_user_id and b.`status` = 'PAIED' and c.loan_id = b.id
                and a.id != 724953 and a.id != 724952
                group by a.id_card
            ) as b order by b.approve_amount desc limit 10
        ) as a
    </select>

    <!-- 18. 最大单一借款人待还金额占比（按当前借款金额排序，最大单一借款人待还金额总和/当前待还借贷金额，仅统计本金） -->
    <select id="sumBorrowerLargestLeftAmount" resultType="java.lang.Double" parameterType="Map">
        select b.amount from (
            select a.id_card, sum(b.approve_amount) as approve_amount, ifnull(sum(c.amount),0) as amount from ln_user a, ln_loan b, (
                select c.loan_id, c.ln_user_id, ifnull(sum(c.left_amount),0) as amount from ln_loan_relation c
                where c.`status` = 'SUCCESS' and c.left_amount > 0 group by c.loan_id
            ) as c
            where a.id = b.ln_user_id and a.id = c.ln_user_id and b.`status` = 'PAIED' and c.loan_id = b.id and a.id != 724953 and a.id != 724952
            group by a.id_card
        ) as b order by b.approve_amount desc limit 1
    </select>

    <!-- 21. 借款人逾期金额（当前对投资人已经处于逾期状态的所有借款的金额总和，仅统计本金） -->
    <select id="sumLateAmount" resultType="java.lang.Double" parameterType="Map">
        select ifnull(a.amount+b.amount+c.amount+d.amount, 0) from
        ( select ifnull(sum(c.plan_total), 0) as amount from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` ='LATE_NOT' and c.relation_id = e.id and a.serial_id = b.period and c.repay_serial = a.serial_id
            and e.loan_id = b.id and a.loan_id = b.id and d.id = b.ln_user_id and d.partner_code ='7_DAI_SELF' and b.`status` = 'PAIED'
        ) a,
        ( select ifnull(sum(c.plan_total), 0) as amount from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status`='LATE_NOT' and c.relation_id = e.id and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
            and d.id = b.ln_user_id and d.partner_code in('ZSD','ZAN') and b.`status` = 'PAIED'
        ) b,(
            select ifnull(sum(c.plan_total), 0) as amount from
            (select max(a.serial_id) as serial_id, a.loan_id, a.`status` from (
				select serial_id,loan_id,`status`,plan_date from ln_repay_schedule where `status`!= 'CANCELLED' ORDER BY serial_id desc 
			) a group by a.loan_id) as a,
            ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where c.relation_id = e.id  and c.repay_serial = a.serial_id and a.`status`= 'LATE_NOT'
            and e.loan_id = b.id and a.loan_id = b.id and d.id = b.ln_user_id and d.partner_code = 'YUN_DAI_SELF' and b.`status` = 'PAIED'
            and b.partner_business_flag = 'REPAY_ANY_TIME'
        ) c,
        ( select ifnull(sum(c.plan_total), 0) as amount from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status`='LATE_NOT' and c.relation_id = e.id and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
            and d.id = b.ln_user_id and d.partner_code = 'YUN_DAI_SELF' and b.`status` = 'PAIED' 
            and b.partner_business_flag IN ('FIXED_INSTALLMENT', 'FIXED_PRINCIPAL_INTEREST')
        ) d
    </select>

    <!-- 22. 借款人逾期笔数（当前对投资人处于逾期状态的所有借款的笔数之和） -->
    <select id="countLateAmount" resultType="java.lang.Integer" parameterType="Map">
        select ifnull(a.times+b.times+c.times+d.times, 0) from
        ( select count(DISTINCT(a.id)) as times from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
                where a.`status` in ('LATE_NOT') and c.relation_id = e.id and a.serial_id = b.period and c.repay_serial = a.serial_id
                and e.loan_id = b.id and a.loan_id = b.id and d.id = b.ln_user_id and d.partner_code in('7_DAI_SELF','ZAN') and b.`status` = 'PAIED'
        ) a,
        ( select count(DISTINCT(a.id)) as times from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
                where a.`status` in ('LATE_NOT') and c.relation_id = e.id and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
                and d.id = b.ln_user_id and d.partner_code ='ZSD' and b.`status` = 'PAIED'
        ) b,(
                select count(DISTINCT(a.id)) as times from
                (select a.id,max(a.serial_id) as serial_id, a.loan_id, a.`status` from (
					select id,serial_id,loan_id,`status`,plan_date from ln_repay_schedule where `status`!= 'CANCELLED' ORDER BY serial_id desc 
				) a group by a.loan_id) as a,
                ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
                where c.relation_id = e.id  and c.repay_serial = a.serial_id and a.`status`= 'LATE_NOT'
                and e.loan_id = b.id and a.loan_id = b.id and d.id = b.ln_user_id and d.partner_code = 'YUN_DAI_SELF' and b.`status` = 'PAIED'
                and b.partner_business_flag = 'REPAY_ANY_TIME'
        ) c,
        ( select count(DISTINCT(a.id)) as times from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
                where a.`status` in ('LATE_NOT') and c.relation_id = e.id and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
                and d.id = b.ln_user_id and d.partner_code = 'YUN_DAI_SELF' and b.`status` = 'PAIED'
                and b.partner_business_flag IN ('FIXED_INSTALLMENT', 'FIXED_PRINCIPAL_INTEREST')
        ) d
    </select>

    <!-- 23. 借款人逾期90天以上金额（当前对投资人逾期＞90天的借款金额总和，仅统计本金） -->
    <select id="sum90LateAmount" resultType="java.lang.Double" parameterType="Map">
        select ifnull(a.amount+b.amount, 0) from (
                select ifnull(sum(c.plan_total), 0) as amount from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
                where a.`status` in ('INIT', 'LATE_NOT') and c.relation_id = e.id and a.serial_id = b.period
                and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
                and d.id = b.ln_user_id and d.partner_code = 'ZAN' and b.`status` = 'PAIED'
                and (to_days(now()) - to_days(a.plan_date)) > 90
        ) a, (
                select ifnull(sum(c.plan_total), 0) as amount
                from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
                where a.`status` in ('INIT', 'LATE_NOT') and c.relation_id = e.id
                and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
                and d.id = b.ln_user_id and d.partner_code = 'ZSD' and b.`status` = 'PAIED'
                and (to_days(now()) - to_days(a.plan_date)) > 90
        ) b
    </select>

    <!-- 24. 借款人逾期90天以上笔数（当前对投资人逾期＞90天的借款笔数之和） -->
    <select id="count90LateAmount" resultType="java.lang.Integer" parameterType="Map">
        select ifnull(a.times+b.times, 0) from (
            select count(DISTINCT(a.id)) as times from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('INIT', 'LATE_NOT') and c.relation_id = e.id and a.serial_id = b.period
            and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
            and d.id = b.ln_user_id and d.partner_code = 'ZAN' and b.`status` = 'PAIED'
            and (to_days(now()) - to_days(a.plan_date)) > 90
        ) a, (
            select count(DISTINCT(a.id)) as times
            from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('INIT', 'LATE_NOT') and c.relation_id = e.id
            and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
            and d.id = b.ln_user_id and d.partner_code = 'ZSD' and b.`status` = 'PAIED'
            and (to_days(now()) - to_days(a.plan_date)) > 90
        ) b
    </select>

    <!-- 25. 累计代偿金额（平台自成立以来，累计的代偿金额，包括本金和利息） -->
    <select id="sumLateNotAmount" resultType="java.lang.Double" parameterType="Map">
        select ifnull(a.amount+b.amount+c.amount+d.amount, 0) from
        ( select ifnull(sum(c.plan_total), 0) as amount from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('LATE_NOT', 'LATE_REPAIED') and c.relation_id = e.id and a.serial_id = b.period and c.repay_serial = a.serial_id
            and e.loan_id = b.id and a.loan_id = b.id and d.id = b.ln_user_id and d.partner_code =  '7_DAI_SELF' and b.`status` = 'PAIED'
        ) a,
        ( select ifnull(sum(c.plan_total), 0) as amount from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('LATE_NOT', 'LATE_REPAIED') and c.relation_id = e.id and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
            and d.id = b.ln_user_id and d.partner_code in('ZAN','ZSD') and b.`status` = 'PAIED' and c.done_time>='2017-9-20'
        ) b,(
            select ifnull(sum(c.plan_total), 0) as amount from
                (select max(a.serial_id) as serial_id, a.loan_id, a.`status` from (
					select serial_id,loan_id,`status`,plan_date from ln_repay_schedule where `status`!= 'CANCELLED' ORDER BY serial_id desc 
				) a group by a.loan_id) as a,
                ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('LATE_NOT', 'LATE_REPAIED') and c.relation_id = e.id and c.repay_serial = a.serial_id
            and e.loan_id = b.id and a.loan_id = b.id and d.id = b.ln_user_id and d.partner_code = 'YUN_DAI_SELF' and b.`status` = 'PAIED'
            and b.partner_business_flag = 'REPAY_ANY_TIME'
        ) c,
        ( select ifnull(sum(c.plan_total), 0) as amount from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('LATE_NOT', 'LATE_REPAIED') and c.relation_id = e.id and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
            and d.id = b.ln_user_id and d.partner_code = 'YUN_DAI_SELF' and b.`status` = 'PAIED' 
            and b.partner_business_flag IN ('FIXED_INSTALLMENT', 'FIXED_PRINCIPAL_INTEREST')
        ) d
    </select>

    <!-- 26. 累计代偿笔数（平台自成立以来，累计代偿的笔数之和） -->
    <select id="countLateNotAmount" resultType="java.lang.Integer" parameterType="Map">
        select ifnull(a.times+b.times+c.times+d.times, 0) from
        ( select count(DISTINCT(a.id)) as times  from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('LATE_NOT', 'LATE_REPAIED') and c.relation_id = e.id and a.serial_id = b.period and c.repay_serial = a.serial_id
            and e.loan_id = b.id and a.loan_id = b.id and d.id = b.ln_user_id and d.partner_code =  '7_DAI_SELF' and b.`status` = 'PAIED'
        ) a,
        ( select count(DISTINCT(a.id)) as times from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('LATE_NOT', 'LATE_REPAIED') and c.relation_id = e.id and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
            and d.id = b.ln_user_id and d.partner_code in('ZAN','ZSD') and b.`status` = 'PAIED' and c.done_time>='2017-9-20'
        ) b,(
            select count(DISTINCT(a.id)) as times from
                (select a.id,max(a.serial_id) as serial_id, a.loan_id, a.`status` from (
					select id,serial_id,loan_id,`status`,plan_date from ln_repay_schedule where `status`!= 'CANCELLED' ORDER BY serial_id desc 
				) a group by a.loan_id) as a,
                ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('LATE_NOT', 'LATE_REPAIED') and c.relation_id = e.id and c.repay_serial = a.serial_id
            and e.loan_id = b.id and a.loan_id = b.id and d.id = b.ln_user_id and d.partner_code = 'YUN_DAI_SELF' and b.`status` = 'PAIED'
            and b.partner_business_flag = 'REPAY_ANY_TIME'
        ) c,
        ( select count(DISTINCT(a.id)) as times from ln_repay_schedule a, ln_loan b, ln_user d, ln_finance_repay_schedule c, ln_loan_relation e
            where a.`status` in ('LATE_NOT', 'LATE_REPAIED') and c.relation_id = e.id and c.repay_serial = a.serial_id and e.loan_id = b.id and a.loan_id = b.id
            and d.id = b.ln_user_id and d.partner_code = 'YUN_DAI_SELF' and b.`status` = 'PAIED'
            and b.partner_business_flag IN ('FIXED_INSTALLMENT', 'FIXED_PRINCIPAL_INTEREST')
        ) d
    </select>
    
    <!-- 27. 本月成交额（元） 本月出借的金额总和，仅统计本金 -->
    <select id="monthBuyAmount" resultType="java.lang.Double" parameterType="Map">
    	SELECT ifnull(SUM(a.open_balance),0) as invest_amount FROM bs_sub_account a 
		WHERE a.`status` NOT IN (1,6) AND a.product_type in ('REG', 'AUTH', 'AUTH_YUN', 'AUTH_ZSD', 'RED', 'RED_ZSD', 'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE') 
		AND year(a.open_time) = #{year} and MONTH(a.open_time) = #{month}; 
    </select>
    
    <!-- 28. 本月成交人数（人）本月出借的人数总和 -->
    <select id="monthBuyUserNumber" resultType="java.lang.Integer" parameterType="Map">
    	SELECT count(DISTINCT(a.account_id)) FROM bs_sub_account a 
		WHERE a.`status` NOT IN (1,6) AND a.product_type in ('REG', 'AUTH', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'AUTH_FREE') 
		AND year(a.open_time) = #{year} and MONTH(a.open_time) = #{month} ; 
    </select>
    <!-- 29. 本月成交笔数（笔）本月出借的笔数总和 -->
    <select id="monthBuyNumber" resultType="java.lang.Integer" parameterType="Map">
    	SELECT count(a.id) FROM bs_sub_account a 
		WHERE a.`status` NOT IN (1,6) AND a.product_type in ('REG', 'AUTH', 'AUTH_YUN', 'AUTH_ZSD', 'AUTH_7', 'AUTH_FREE') 
		AND year(a.open_time) = #{year} and MONTH(a.open_time) = #{month}; 
    </select>
    <!-- 30. 本月用户收益（元） 本月累计帮用户赚取 -->
    <select id="monthIncomeAmount" resultType="java.lang.Double" parameterType="Map">
    	select ifnull(b.interest,0)+ifnull(c.bonus,0) from
		(select sum(interest) interest,MONTH(time) time from bs_daily_interest 
			where year(time) = #{year} and MONTH(time) = #{month} ) b,
 		(select sum(bonus) bonus,MONTH(time) time from bs_daily_bonus 
 			where year(time) = #{year} and MONTH(time) = #{month} and type != 'BONUS_WITHDRAW' )c;
    </select>
    <!-- 31. 本月借贷金额（元）借款人本月借贷金额总和 -->
    <select id="monthLoanAmount" resultType="java.lang.Double" parameterType="Map">
    	select ifnull(sum(approve_amount),0) from ln_loan where year(loan_time) = #{year}  and MONTH(loan_time)=#{month} and`status`='PAIED' ;
    </select>
    <!-- 32. 本月借贷笔数（笔） 借款人本月借贷的总笔数 -->
    <select id="monthLoanNumber" resultType="java.lang.Integer" parameterType="Map">
		select count(id) from ln_loan where year(loan_time) = #{year}  and MONTH(loan_time)=#{month} and`status`='PAIED';
    </select>
    <!-- 33. 本月各期限计划成交额 -->
    <select id="buyGroupList" parameterType="Map"  resultMap="Platform4ManageProductVOMap">
    	SELECT case when e.term = 12 then 365 else e.term*30 end product_term, 
    		sum(ifnull(e.open_balance,0)+IFNULL(e.red_balance,0))amount FROM
	(
	SELECT d.open_balance red_balance,aaa.* FROM(
		SELECT c.red_account_id, aa.* FROM (
		SELECT b.term, a.* FROM bs_sub_account a, bs_product b 
			WHERE year(a.open_time)=#{year}
				and MONTH(a.open_time)=#{month}
				and a.product_type in ('REG','AUTH','AUTH_YUN','AUTH_ZSD','AUTH_7','AUTH_FREE') 
				AND a.`status` in (2,5,7) and a.product_id=b.id and b.id!=504 ) aa
				LEFT JOIN bs_sub_account_pair c ON c.auth_account_id=aa.id )aaa LEFT JOIN bs_sub_account d ON aaa.red_account_id=d.id
		) e GROUP BY e.term;
    </select>
    <!-- 34. 网页版端口占比（%）订单端口，无端口加至pc -->
    <select id="pcProportion" resultType="java.lang.Double" parameterType="Map">
    	select ROUND(t1.amount/t2.amount*100,2)
		from (select SUM(amount) amount from bs_pay_orders o where 
		    o.trans_type IN ('CARD_BUY_PRODUCT','BALANCE_BUY_PRODUCT')
			and o.`status` = 6 and (o.terminal_type = 2 or o.terminal_type is null)
		)t1,(
			select SUM(amount) amount from bs_pay_orders o where 
		    o.trans_type IN ('CARD_BUY_PRODUCT','BALANCE_BUY_PRODUCT')
			and o.`status` = 6 
		) t2
    </select>
    
    <!-- 35. H5端口占比（%） -->
    <select id="h5Proportion" resultType="java.lang.Double" parameterType="Map">
    	select ROUND(t1.amount/t2.amount*100,2)
		from (select SUM(amount) amount from bs_pay_orders o where 
		    o.trans_type IN ('CARD_BUY_PRODUCT','BALANCE_BUY_PRODUCT')
			and o.`status` = 6 and o.terminal_type = 1
		)t1,(
			select SUM(amount) amount from bs_pay_orders o where 
		    o.trans_type IN ('CARD_BUY_PRODUCT','BALANCE_BUY_PRODUCT')
			and o.`status` = 6 
		) t2
    </select>
    
    <!-- 36. 单日最高成交额（元） -->
    <select id="mostDayBuyAmount" resultType="java.lang.Double" parameterType="Map">
    select SUM(sa.open_balance) 
	from bs_sub_account sa where sa.`status` in (2,5,7) 
		and product_type in ('REG','AUTH_7','AUTH_YUN','AUTH_ZSD','AUTH','RED','RED_ZSD','RED_7','AUTH_FREE','RED_FREE') 
			GROUP BY DATE(sa.open_time) 
		ORDER BY SUM(sa.open_balance) desc limit 1;
    </select>
    <!-- 37. 单笔最高成交额（元） -->
    <select id="mostOneBuyAmount" resultType="java.lang.Double" parameterType="Map">
    SELECT a.open_balance+IFNULL(c.open_balance,0) maxBalance FROM bs_sub_account a 
		LEFT JOIN bs_sub_account_pair b ON a.id = b.auth_account_id 
		LEFT JOIN bs_sub_account c ON b.red_account_id = c.id
	WHERE a.`status` in(2,5,7) 
		AND a.product_type in ('AUTH','REG', 'AUTH_YUN','AUTH_ZSD','AUTH_7','AUTH_FREE')
		ORDER BY maxBalance DESC LIMIT 1;
    </select>
    <!-- 38. 最快满标时间（秒） -->
    <select id="fastestSecond" resultType="java.lang.Double" parameterType="Map">
    SELECT
		a.update_time - a.start_time 
	FROM
	    bs_product a
	WHERE
	    (a.max_total_amount-a.curr_total_amount)=0 
	order by a.update_time - a.start_time limit 1
    </select>
    <!-- 39. 成交次数最多（次） -->
    <select id="mostBuyTimes" resultType="java.lang.Double" parameterType="Map">
   	select count(*) from bs_user u , bs_sub_account sa, bs_account a WHERE
		u.id=a.user_id and a.id=sa.account_id and sa.product_type in ('REG','REG_D', 'AUTH_YUN','AUTH_7','AUTH_ZSD') 
	and sa.`status` in (2,5,7)
	GROUP BY u.id ORDER BY count(*) DESC limit 0,1;
    </select>
    
    <select id="richerList" resultType="java.lang.String" parameterType="Map">
    	SELECT
		CONCAT(SUBSTR(u.user_name,1,1),",",CASE WHEN SUBSTR(u.id_card,17,1)%2 = 1 THEN '男'
						ELSE  '女' END,",",sum(sub.open_balance))
		FROM
		    bs_sub_account sub, bs_user u, bs_account a
		WHERE
					sub.account_id=a.id and a.user_id=u.id
		     and account_id not in(24874) 
		     and sub.`status` in  (2,5,7)
		     and product_type in ('AUTH','REG','RED','AUTH_YUN','AUTH_ZSD','RED_ZSD','AUTH_7','RED_7','AUTH_FREE','RED_FREE')
		group by account_id 
		order by sum(sub.open_balance) desc limit 5;
    </select>
    
    <!-- 2018平台数据添加字段 end -->

    <select id="sumAnnualAmount" resultType="java.lang.Double" parameterType="Map">
        select IFNULL(ROUND(SUM(
            CASE d.term WHEN 12 THEN a.open_balance
            ELSE a.open_balance*d.term*30/365
            END
        ), 2), 0) AS amount from (
            select a.open_balance, a.account_id, a.product_id from bs_sub_account a
            where DATE(a.open_time) BETWEEN DATE(#{startTime}) AND DATE(#{endTime})
            and a.`status` = 2 AND a.product_type in ('AUTH_7','AUTH_YUN', 'RED','RED_7','REG')
        ) as a, bs_account b, bs_user c, bs_product d
        where a.account_id = b.id AND b.user_id = c.id AND a.product_id = d.id
        and (
          d.`name` like '%港湾计划%' or (d.activity_type = 'NEW_BUYER' and d.`name` like '%港湾新手计划%')
        )
        <if test="userId != null">
            and c.id = #{userId}
        </if>
    </select>

    <!-- 2018财务管理-财务总账查询-站岗户 start -->
    <!-- 1、云贷站岗户余额 -->
    <select id="selectSumBgwAuthYunBalance" resultType="java.lang.Double" >
        SELECT SUM(IFNULL(balance, 0)) FROM bs_sub_account WHERE product_type = 'AUTH_YUN' AND `status` = 2
    </select>

    <!-- 2、7贷站岗户余额 -->
    <select id="selectSumBgwAuthSevenBalance" resultType="java.lang.Double" >
        SELECT SUM(IFNULL(balance, 0)) FROM bs_sub_account WHERE product_type = 'AUTH_7' AND `status` = 2
    </select>

    <!-- 3、赞时贷站岗户余额 -->
    <select id="selectSumBgwAuthZsdBalance" resultType="java.lang.Double" >
        SELECT SUM(IFNULL(balance, 0)) FROM bs_sub_account WHERE product_type = 'AUTH_ZSD' AND `status` = 2
    </select>

    <!-- 4、赞分期站岗户余额 -->
    <select id="selectSumBgwAuthZanBalance" resultType="java.lang.Double" >
        SELECT SUM(IFNULL(balance, 0)) FROM bs_sub_account WHERE product_type = 'AUTH' AND `status` = 2
    </select>

    <!-- 2018财务管理-财务总账查询-站岗户 end -->

    <select id="selectOldYUNOrSevenSignedSupplementInfo" resultType="com.pinting.business.model.vo.BsUserAgreementSignVO" parameterType="java.util.Map">
        SELECT
            a.id AS subAccountId,
            c.user_id AS id,
            d.user_name AS userName,
            d.id_card AS idCard
        FROM
            (
                SELECT
                    t.id,
                    t.account_id,
                    t.note
                FROM
                    bs_sub_account t
                WHERE
                    (
                        t.product_type = 'AUTH_YUN'
                        OR t.product_type = 'AUTH_7'
                    )
                AND t.transfer_time IS NOT NULL
                AND t.note IS NOT NULL
            ) a
        INNER JOIN bs_sub_account b ON (
            b.id = a.note
            AND b.product_type = 'REG'
        )
        INNER JOIN bs_account c ON c.id = a.account_id
        INNER JOIN bs_user d ON d.id = c.user_id
        LIMIT #{start}, #{numPerPage}
    </select>

    
    <!-- =========================周周乐 幸运出借人=============================== -->
	<select id="selectWeekhaySumAmount" resultType="java.lang.Double">
  		SELECT 
  			IFNULL(sum(
	  			CASE b.term WHEN -7 THEN a.balance/365*7
				WHEN 1 THEN a.open_balance/365*30
				WHEN 3 THEN a.open_balance/365*90
				WHEN 6 THEN a.open_balance/365*180
				WHEN 12 THEN a.open_balance
				END
			),0) as sumAmount
  		from bs_sub_account a,bs_product b
		where a.product_id = b.id
		and a.`status` =2    
		and a.product_type in ('REG', 'AUTH_YUN', 'RED','AUTH_ZSD','RED_ZSD', 'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE') 
		and a.product_name like '港湾计划%'
		and b.activity_type != 'NEW_BUYER'
		AND !FIND_IN_SET('PC_178', b.show_terminal) AND !FIND_IN_SET('H5_178', b.show_terminal) 
	    AND !FIND_IN_SET('PC_KQ', b.show_terminal) AND !FIND_IN_SET('H5_KQ', b.show_terminal)
	    AND !FIND_IN_SET('PC_HN', b.show_terminal) AND !FIND_IN_SET('H5_HN', b.show_terminal)
	    AND !FIND_IN_SET('PC_RUIAN', b.show_terminal) AND !FIND_IN_SET('H5_RUIAN', b.show_terminal)
	    AND !FIND_IN_SET('H5_QD', b.show_terminal)
	    and a.interest_begin_date = DATE_FORMAT(NOW(),'%Y-%m-%d') 
  	</select>
  	
  	<resultMap id="SelectWeekhayUserMap" type="com.pinting.business.model.vo.BsActivityLuckyDrawVO" >
    <result column="id" property="userId" jdbcType="INTEGER" />
  	</resultMap>
  	
  	<select id="selectWeekhayBigInvestors" resultMap="SelectWeekhayUserMap" parameterType="java.lang.Double">
	  	SELECT s.id FROM
		(   SELECT 
	  			d.id, 
	  			IFNULL(sum(
		  			CASE b.term WHEN -7 THEN a.balance/365*7
					WHEN 1 THEN a.open_balance/365*30
					WHEN 3 THEN a.open_balance/365*90
					WHEN 6 THEN a.open_balance/365*180
					WHEN 12 THEN a.open_balance
					END
				),0) as sumAmount
	  		FROM bs_sub_account a,bs_product b, bs_account c, bs_user d
			WHERE 	a.product_id = b.id
				AND a.account_id = c.id
				AND c.user_id = d.id
				AND a.`status` =2    
				AND a.product_type in ('REG', 'AUTH_YUN', 'RED','AUTH_ZSD','RED_ZSD', 'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE') 
				AND a.product_name like '港湾计划%'
				AND b.activity_type != 'NEW_BUYER'
				AND !FIND_IN_SET('PC_178', b.show_terminal) AND !FIND_IN_SET('H5_178', b.show_terminal)
		    	AND !FIND_IN_SET('PC_KQ', b.show_terminal) AND !FIND_IN_SET('H5_KQ', b.show_terminal)
		    	AND !FIND_IN_SET('PC_HN', b.show_terminal) AND !FIND_IN_SET('H5_HN', b.show_terminal) 
		    	AND !FIND_IN_SET('PC_RUIAN', b.show_terminal) AND !FIND_IN_SET('H5_RUIAN', b.show_terminal)
		    	AND !FIND_IN_SET('H5_QD', b.show_terminal)
		    	AND a.interest_begin_date = DATE_FORMAT(NOW(),'%Y-%m-%d') 
		    GROUP BY d.id
		) s
		WHERE s.sumAmount >= #{investAmount}
  	</select>
  	
  	<select id="selectWeekhayAllInvestors" resultMap="SelectWeekhayUserMap">
 		SELECT 
  			d.id
  		FROM bs_sub_account a,bs_product b, bs_account c, bs_user d
		WHERE 	a.product_id = b.id
			AND a.account_id = c.id
			AND c.user_id = d.id
			AND a.`status` =2    
			AND a.product_type in ('REG', 'AUTH_YUN', 'RED','AUTH_ZSD','RED_ZSD', 'AUTH_7', 'RED_7', 'AUTH_FREE', 'RED_FREE') 
			AND a.product_name like '港湾计划%'
			AND b.activity_type != 'NEW_BUYER'
			AND !FIND_IN_SET('PC_178', b.show_terminal) AND !FIND_IN_SET('H5_178', b.show_terminal)
	    	AND !FIND_IN_SET('PC_KQ', b.show_terminal) AND !FIND_IN_SET('H5_KQ', b.show_terminal)
	    	AND !FIND_IN_SET('PC_HN', b.show_terminal) AND !FIND_IN_SET('H5_HN', b.show_terminal) 
	    	AND !FIND_IN_SET('PC_RUIAN', b.show_terminal) AND !FIND_IN_SET('H5_RUIAN', b.show_terminal)
	    	AND !FIND_IN_SET('H5_QD', b.show_terminal)
	    	AND a.interest_begin_date = DATE_FORMAT(NOW(),'%Y-%m-%d') 
	    GROUP BY d.id
  	</select>


	<select id="subAccountInterest" parameterType="java.util.Map"  resultType="java.lang.Double">
	select ROUND(t.open_balance*t.base_rate*t.term/36500,2)
	from(
	select a.open_balance+IFNULL(d.open_balance,0) open_balance ,b.base_rate, 
	case when b.term&lt;0 then ABS(term) when b.term = 12 then 365 else b.term*30 end term
	from (select id,open_balance,product_id from  bs_sub_account where id  = #{subAccountId})a,bs_product b,
	(select auth_account_id,red_account_id from bs_sub_account_pair where auth_account_id = #{subAccountId})c
	LEFT JOIN bs_sub_account d on d.id= c.red_account_id 
	where a.product_id = b.id )t
	</select>
	
	
	<select id="sumYearInvestByUserId" parameterType="java.util.Map"  resultType="java.lang.Double">
	select 
	sum(case when pro.term &lt;0 then round(ABS(pro.term)*(aa.open_balance+IFNULL(red.open_balance,0))/365,2)
	when pro.term= 12 then aa.open_balance+IFNULL(red.open_balance,0)
	else round((aa.open_balance+IFNULL(red.open_balance,0))*pro.term*30/365,2) end )from 
	(	select a.id,a.open_balance,a.product_id from  bs_sub_account a,
		(select id,user_id from bs_account where user_id = #{userId})b 
		where a.account_id = b.id and a.`status` in(2,5,7) 
		and a.product_type in ('REG','AUTH_YUN','AUTH_7','AUTH_ZSD','AUTH_FREE') 
	)aa LEFT JOIN bs_sub_account_pair c on c.auth_account_id= aa.id LEFT JOIN bs_sub_account red on red.id = c.red_account_id
	,bs_product pro
	where aa.product_id = pro.id
	</select>
	
	<select id="firstInvestByUserId" parameterType="java.util.Map"  resultMap="BaseResultMap">
	select a.id,a.open_balance,a.product_id,a.open_time from  bs_sub_account a,
		(select id,user_id from bs_account where user_id = #{userId})b 
		where a.account_id = b.id and a.`status` in(2,5,7) 
		and a.product_type in ('REG','AUTH_YUN','AUTH_7','AUTH_ZSD','AUTH','AUTH_FREE') 
	ORDER BY a.open_time asc limit 1
	</select>

    <!-- 2018财务管理-财务总账查询-新增自由站岗户业务数据 start -->
    <!-- 1、自有产品站岗红包 -->
    <select id="sumRedFreeAccBalance" resultType="java.lang.Double" parameterType="Map">
        select
        IFNULL(round(sum(s.balance),2), 0) as redFreeAccBalance
        from bs_sub_account s
        where s.product_type = 'RED_FREE' and s.status='2'
    </select>

    <!-- 2、自由站岗户余额 -->
    <select id="selectSumBgwAuthFreeBalance" resultType="java.lang.Double" >
        SELECT SUM(IFNULL(balance, 0)) FROM bs_sub_account WHERE product_type = 'AUTH_FREE' AND `status` = 2
    </select>
    <!-- 2018财务管理-财务总账查询-新增自由站岗户业务数据 end -->
	
	<!-- 平台存量数据-投资余额 -->
    <select id="sumFinancesAuthBalance" resultType="java.lang.Double" parameterType="Map">
        SELECT sum(IFNULL(a.open_balance,0)) 
		    FROM bs_sub_account a
		  	LEFT JOIN bs_account d on d.id=a.account_id
			LEFT JOIN bs_user e on e.id=d.user_id 
        <where>
        	a.status = 2 
        	<if test="productType != null and productType != '' and productType == 'ALL'">
				AND a.product_type in ('AUTH_7', 'RED_7', 'AUTH_YUN', 'RED', 'AUTH_FREE', 'RED_FREE')
				AND (!FIND_IN_SET(d.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID')) 
				OR !FIND_IN_SET(d.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID'))
				OR !FIND_IN_SET(d.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'FREE_SUPER_FINANCE_USER_ID'))) 
			</if>
        	<if test="productType != null and productType != '' and productType == 'AUTH_7'">
				AND a.product_type in ('AUTH_7', 'RED_7')
				AND !FIND_IN_SET(d.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = '7_DAI_SELF_SUPER_FINANCE_USER_ID')) 
			</if>
			<if test="productType != null and productType != '' and productType == 'AUTH_YUN'">
				AND a.product_type in ('AUTH_YUN', 'RED')
				AND !FIND_IN_SET(d.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'YUN_DAI_SELF_SUPER_FINANCE_USER_ID')) 
			</if>
			<if test="productType != null and productType != '' and productType == 'AUTH_FREE'">
				AND a.product_type in ('AUTH_FREE', 'RED_FREE')
				AND !FIND_IN_SET(d.user_id,(SELECT conf_value FROM bs_sys_config WHERE conf_key = 'FREE_SUPER_FINANCE_USER_ID')) 
			</if>
			<if test="endTime != null and endTime != ''">
	     		<![CDATA[
					AND a.open_time <= #{endTime}
				]]>
	    	</if>
        </where>
    </select>

    <!-- 2018财务管理-每日日终账务查询-系统余额快照记录表站岗户金额查询 start -->
    <resultMap id="SysBalanceDailySnapMap" type="com.pinting.business.model.vo.SysBalanceDailySnapVO" >
        <result column="balance" property="balance" jdbcType="DOUBLE" />
        <result column="freeze_balance" property="freezeBalance" jdbcType="DOUBLE" />
        <result column="available_balance" property="availableBalance" jdbcType="DOUBLE" />
    </resultMap>

    <!-- 1、云贷站岗户余额 -->
    <select id="selectSumAuthYunBalance" resultMap="SysBalanceDailySnapMap">
        SELECT
        SUM(IFNULL(balance, 0)) AS balance, SUM(IFNULL(freeze_balance, 0)) AS freeze_balance,
        SUM(IFNULL(available_balance, 0)) AS available_balance
        FROM bs_sub_account WHERE product_type = 'AUTH_YUN' AND `status` = 2
    </select>

    <!-- 2、7贷站岗户余额 -->
    <select id="selectSumAuthSevenBalance" resultMap="SysBalanceDailySnapMap">
        SELECT
        SUM(IFNULL(balance, 0)) AS balance, SUM(IFNULL(freeze_balance, 0)) AS freeze_balance,
        SUM(IFNULL(available_balance, 0)) AS available_balance
        FROM bs_sub_account WHERE product_type = 'AUTH_7' AND `status` = 2
    </select>

    <!-- 3、赞时贷站岗户余额 -->
    <select id="selectSumAuthZsdBalance" resultMap="SysBalanceDailySnapMap">
        SELECT
        SUM(IFNULL(balance, 0)) AS balance, SUM(IFNULL(freeze_balance, 0)) AS freeze_balance,
        SUM(IFNULL(available_balance, 0)) AS available_balance
        FROM bs_sub_account WHERE product_type = 'AUTH_ZSD' AND `status` = 2
    </select>

    <!-- 4、赞分期站岗户余额 -->
    <select id="selectBgwAuthZanBalance" resultMap="SysBalanceDailySnapMap">
        SELECT
        SUM(IFNULL(balance, 0)) AS balance, SUM(IFNULL(freeze_balance, 0)) AS freeze_balance,
        SUM(IFNULL(available_balance, 0)) AS available_balance
        FROM bs_sub_account WHERE product_type = 'AUTH' AND `status` = 2
    </select>
    <!-- 2018财务管理-每日日终账务查询-系统余额快照记录表站岗户金额查询 end -->

</mapper>